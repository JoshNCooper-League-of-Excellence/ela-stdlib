
#ifndef FREESTANDING {
  impl!<T> Slice!<T> {
    fn clone!<Alloc>(self, allocator: *mut Alloc) -> #self where Alloc: Allocator | dyn Allocator | *mut dyn Allocator {
      data : *mut T = allocator.allocate_array(sizeof(T), self.length);
      memcpy(data, self.data, self.length * sizeof(T));
      return .{
        data: data,
        length: self.length,
      };
    }

    // this is really just for cloned slices, that which take ownership.
    // To be honest, this shouldnt really be neccesary, we should return a tuple with the memory and the length,
    // since Slice!<T> is supposed to be like blatantly non-owning.
    // it's confusing and muddles the intended purpose and clarity of having the type in the standard.
    fn deinit!<Alloc>(*mut self, allocator: *mut Alloc) where Alloc: Allocator | dyn Allocator | *mut dyn Allocator {
      allocator.free(self.data);
    }
  }
}

impl!<T> Subscript!<T> for Slice!<T> {
  fn subscript(*const self, idx: u64) -> *const T {
    return &const self.data[idx];
  }
  fn subscript_mut(*mut self, idx: u64) -> *mut T {
    return &mut self.data[idx];
  }
}

impl!<T> Slice!<T> {
  fn is_empty(self) -> bool {
    return self.length == 0;
  }

  fn from(data: *const T, len: u32) -> #self => .{
    data: data,
    length: len,
  }
  
  // TODO: do we want to truncate or throw an error when the requested range's length is greater than the amount of 
  // data available??
  fn slice!<Range>(self, mut range: Range) -> Slice!<T> where Range: RangeBase!<u8>  |  RangeBase!<u16> |  RangeBase!<u32> | RangeBase!<u64> | RangeBase!<s8>  | RangeBase!<s16> | RangeBase!<s32> |  RangeBase!<s64> {
    if range.begin < 0 then range.begin = 0;

    if range.end == -1 || range.end > self.length {
      range.end = self.length;  
    }

    length := range.end - range.begin;
    
    // TODO: support reverse ranges?
    if length < 0 then return .{};

    return .{
      data: self.data + range.begin,
      length: length,
    }
  }
}

impl!<T> Iterable for Slice!<T> {
  fn iter(*const self) -> Iter!<T> {
    return .{
      ptr: self.data as *mut T,
      end: self.data + self.length
    }
  }

  fn iter_mut(*mut self) -> Iter!<T> {
    return .{
      ptr: self.data as *mut T,
      end: self.data + self.length
    }
  }
}

impl AsByteSlice for Slice!<u8> {
  fn as_byte_slice(self) -> #self {
    return self;
  }
}
