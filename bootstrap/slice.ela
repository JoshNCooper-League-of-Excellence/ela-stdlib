
#ifndef FREESTANDING {
  impl!<T> [T] {
    fn clone!<Alloc>(self, allocator: *mut Alloc) -> Self where Alloc: Allocator | dyn Allocator | *mut dyn Allocator {
      data : *mut T = allocator.allocate_array(sizeof(T), self.length);
      std::c::memcpy(data, self.data, self.length * sizeof(T));
      return .{
        data: data,
        length: self.length,
      };
    }

    // this is really just for cloned slices, that which take ownership.
    // To be honest, this shouldnt really be neccesary, we should return a tuple with the memory and the length,
    // since [T] is supposed to be like blatantly non-owning.
    // it's confusing and muddles the intended purpose and clarity of having the _type in the standard.
    fn destroy!<Alloc>(*mut self, allocator: *mut Alloc) where Alloc: Allocator | dyn Allocator | *mut dyn Allocator {
      allocator.free(self.data);
    }
  }
}

impl!<T> [T] {
  fn cast!<ToInner>(*self) -> [ToInner] {
    mut length: s64;
    if (sizeof(T) < sizeof(ToInner)) {
      length = self.length / sizeof(ToInner);
    } else {
      length = self.length * sizeof(ToInner);
    }

    return .{
      data: self.data as *mut ToInner,
      length: length
    }
  }
}

impl!<T> Index!<T> for [T] {
  fn index(*const self, idx: u64) -> *const T {
    return &const self.data![idx];
  }
  fn index_mut(*mut self, idx: u64) -> *mut T {
    return &mut self.data![idx];
  }
}

impl!<T> [T] {
  fn is_empty(self) -> bool {
    return self.length == 0;
  }

  fn from(data: *const T, len: u32) -> Self => .{
    data: data,
    length: len,
  }
  
  // TODO: do we want to truncate or throw an error when the requested range's length is greater than the amount of 
  // data available??
  fn slice!<Range>(self, mut range: Range) -> [T] where Range: RangeBase!<u8>  |  RangeBase!<u16> |  RangeBase!<u32> | RangeBase!<u64> | RangeBase!<s8>  | RangeBase!<s16> | RangeBase!<s32> |  RangeBase!<s64> {
    if range.begin < 0 then range.begin = 0;

    if range.end == -1 || range.end > self.length {
      range.end = self.length;  
    }

    length := range.end - range.begin;
    
    // TODO: support reverse ranges?
    if length < 0 then return .{};

    return .{
      data: self.data + range.begin,
      length: length,
    }
  }
}

impl [u8] {
  fn as_str(self) -> str {
    return .{
      length: self.length,
      data: self.data,
    };
  }
  fn as_c_str(self) -> c_str {
    return self.data;
  }

  // if passing this pointer to C api's, you may need to use this.
  // it does allocate, therefore it returns a string. just use .data, and a using statement
  fn null_terminated(self, allocator: dyn Allocator) -> String {
    buf: *mut u8 = allocator.allocate(sizeof(u8) * self.length + 1);
    std::c::strncpy(buf, self.data, self.length + 1);
    return .{
      data: buf,
      length: self.length,
      capacity: self.length
    };
  }
}

impl!<T> Iterable for [T] {
  fn iter(*const self) -> Iter!<T> {
    return .{
      ptr: self.data as *mut T,
      end: self.data + self.length
    }
  }

  fn iter_mut(*mut self) -> IterMut!<T> {
    return .{
      ptr: self.data as *mut T,
      end: self.data + self.length
    }
  }
}

impl!<T> AsSlice!<T> for [T] {
  fn as_slice(self) -> Self {
    return self;
  }
}



impl!<T> Index!<T> for mut [T] {
  fn index(*const self, idx: u64) -> *const T {
    return &const self.data![idx];
  }
  fn index_mut(*mut self, idx: u64) -> *mut T {
    return &mut self.data![idx];
  }
}

impl!<T> mut [T] {
  fn is_empty(self) -> bool {
    return self.length == 0;
  }

  fn from(data: *mut T, len: u32) -> Self => .{
    data: data,
    length: len,
  }
  
  // TODO: do we want to truncate or throw an error when the requested range's length is greater than the amount of 
  // data available??
  fn slice!<Range>(self, mut range: Range) -> [T] where Range: RangeBase!<u8>  |  RangeBase!<u16> |  RangeBase!<u32> | RangeBase!<u64> | RangeBase!<s8>  | RangeBase!<s16> | RangeBase!<s32> |  RangeBase!<s64> {
    if range.begin < 0 then range.begin = 0;

    if range.end == -1 || range.end > self.length {
      range.end = self.length;  
    }

    length := range.end - range.begin;
    
    // TODO: support reverse ranges?
    if length < 0 then return .{};

    return .{
      data: self.data + range.begin,
      length: length,
    }
  }
}

impl mut [u8] {
  fn as_str(self) -> str {
    return .{
      length: self.length,
      data: self.data,
    };
  }
  fn as_c_str(self) -> c_str {
    return self.data;
  }
}

impl!<T> Iterable for mut [T] {
  fn iter(*const self) -> Iter!<T> {
    return .{
      ptr: self.data as *mut T,
      end: self.data + self.length
    }
  }

  fn iter_mut(*mut self) -> IterMut!<T> {
    return .{
      ptr: self.data as *mut T,
      end: self.data + self.length
    }
  }
}

impl !<T> mut [T] {
  /*
    Retain only the elements specified by the predicate function.
    The predicate should return true to keep the element, false to remove it.
  */
  @[inline]
  fn retain(*mut self, predicate: fn(*const T) -> bool) {
    mut write_idx := 0;
    for read_idx in 0..self.length {
      if predicate(&const self.data![read_idx]) {
        if write_idx != read_idx {
          self.data![write_idx] = self.data![read_idx];
        }
        write_idx += 1;
      }
    }
    self.length = write_idx;
  }
}