// equivalent to an explicit cast operator overload in C++,
// allow an object to be constructed from another.
// Except it's not done via casting, just a call.
trait From!<T> {
  // construct a self type from T.
  fn from(v: T) -> #self;
}

// A deep clone, versus assignment always being a shallow clone in Ela. (think C memory semantics)
trait Clone {
  // get a deep clone of self.
  fn clone(self) -> #self;
}

// Construct from an InitList!<V>. This is never done automatically/implicitly, as of now.
trait Init!<V> {
  fn init(init: InitList!<V>) -> #self;
}

// Binary arithmetic operator overloads.
trait Arithmetic!<Right> {
  fn add(self, right: Right) -> #self;       // '+' operator.
  fn sub(self, right: Right) -> #self;       // '-' operator.
  fn mul(self, right: Right) -> #self;       // '*' operator.
  fn div(self, right: Right) -> #self;       // '/' operator.
  fn modulo(self, right: Right) -> #self;    // '%' operator.
}

// Binary bitwise operator overloading.
trait Bitwise!<Right> {
  fn shr(self, right: Right) -> #self;   // '>>' operator.
  fn shl(self, right: Right) -> #self;   // '<<' operator.
  fn xor(self, right: Right) -> #self;   //  '^' operator.
  fn or(self, right: Right) -> #self;   //  '|' operator.
  fn and(self, right: Right) -> #self;   //  '&' operator.
}

trait PartialEq!<Right> {
  fn eq(self, right: Right) -> bool;
  fn neq(self, right: Right) -> bool;
}

trait Eq {
  fn eq(self, right: #self) -> bool;
  fn neq(self, right: #self) -> bool;
}

enum Ordering {
  Less = -1,
  Equal = 0,
  Greater = 1
}

trait PartialOrd!<Right> where Right: PartialEq!<#self> {
  fn partial_cmp(self, right: Right) -> Option!<Ordering>;

  fn lt(self, right: Right) -> bool {
    ordering_opt := self.partial_cmp(right);
    if ordering_opt is Option!<Ordering>::None {
      return false;
    }
    ordering := ordering_opt.unwrap();
    return ordering == Ordering::Less;
  }

  fn gt(self, right: Right) -> bool {
    ordering_opt := self.partial_cmp(right);
    if ordering_opt is Option!<Ordering>::None {
      return false;
    }
    ordering := ordering_opt.unwrap();
    return ordering == Ordering::Greater;
  }

  fn lte(self, right: Right) -> bool {
    ordering_opt := self.partial_cmp(right);
    if ordering_opt is Option!<Ordering>::None {
      return false;
    }
    ordering := ordering_opt.unwrap();
    return ordering == Ordering::Less || ordering == Ordering::Equal;
  }

  fn gte(self, right: Right) -> bool {
    ordering_opt := self.partial_cmp(right);
    if ordering_opt is Option!<Ordering>::None {
      return false;
    }
    ordering := ordering_opt.unwrap();
    return ordering == Ordering::Greater || ordering == Ordering::Equal;
  }
}

/// ! Fix repro 114, then we can use this trait binding.
trait Ord /* where #self: Eq & PartialOrd!<#self> */ {
  fn cmp(self, other: #self) -> Ordering;

  fn max(self, other: #self) -> #self {
    if self > other {
      return self;
    }
    return other;
  }

  fn min(self, other: #self) -> #self {
    if self < other {
      return self;
    }
    return other;
  }

  fn clamp(self, min: #self, max: #self) -> #self {
    return self.max(min, self.min(self, max));
  }
}

trait Subscript!<T> {
  fn subscript(*const self, index: u64) -> *const T;
  fn subscript_mut(*mut self, index: u64) -> *mut T;
}

trait Deinit {
  fn deinit(*mut self);
}


// just a free function version for those who might prefer a C like 'free' style api.
fn deinit!<T>(t: T) where T: Deinit {
  t.deinit();
}

trait Hash {
  fn hash(self) -> u64;
}

trait AsSlice!<T> {
  fn as_slice(self, range: Range) -> Slice!<T>;
}

trait AsCharSlice {
  fn as_char_slice(self) -> Slice!<u32>;
}

trait AsByteSlice {
  fn as_byte_slice(self) -> Slice!<u8>;
}