// equivalent to an explicit cast operator overload in C++,
// allow an object to be constructed from another.
// Except it's not done via casting, just a call.
trait From!<T> {
  // construct a self _type from T.
  fn from(v: T) -> Self;
}

// A deep clone, versus assignment always being a shallow clone in Ela. (think C memory semantics)
trait Clone {
  // get a deep clone of self.
  fn clone(self) -> Self;
}

// Construct from an InitList!<V>. This is never done automatically/implicitly, as of now.
trait Init!<V> {
  fn init(init: InitList!<V>) -> Self;
}

// Binary arithmetic operator overloads.
trait Arithmetic!<Right> {
  fn add(self, right: Right) -> Self;       // '+' operator.
  fn sub(self, right: Right) -> Self;       // '-' operator.
  fn mul(self, right: Right) -> Self;       // '*' operator.
  fn div(self, right: Right) -> Self;       // '/' operator.
  fn modulo(self, right: Right) -> Self;    // '%' operator.
}

// Binary bitwise operator overloading.
trait Bitwise!<Right> {
  fn shr(self, right: Right) -> Self;   // '>>' operator.
  fn shl(self, right: Right) -> Self;   // '<<' operator.
  fn xor(self, right: Right) -> Self;   //  '^' operator.
  fn or(self, right: Right) -> Self;   //  '|' operator.
  fn and(self, right: Right) -> Self;   //  '&' operator.
}

trait PartialEq!<Right> {
  fn eq(self, right: Self) -> bool;
  fn neq(self, right: Self) -> bool {
    return !self.eq(right);
  }
}

trait Eq where Self: PartialEq!<Self> {}

enum Ordering {
  Less = -1,
  Equal = 0,
  Greater = 1
}

trait PartialOrd!<Right> where Right: PartialEq!<Self> {
  fn cmp(self, right: Right) -> Option!<Ordering>;

  fn lt(self, right: Right) -> bool {
    ordering_opt := self.cmp(right);
    if ordering_opt is Option!<Ordering>::None {
      return false;
    }
    ordering := ordering_opt.unwrap();
    return ordering == Ordering::Less;
  }

  fn gt(self, right: Right) -> bool {
    ordering_opt := self.cmp(right);
    if ordering_opt is Option!<Ordering>::None {
      return false;
    }
    ordering := ordering_opt.unwrap();
    return ordering == Ordering::Greater;
  }

  fn lte(self, right: Right) -> bool {
    ordering_opt := self.cmp(right);
    if ordering_opt is Option!<Ordering>::None {
      return false;
    }
    ordering := ordering_opt.unwrap();
    return ordering == Ordering::Less || ordering == Ordering::Equal;
  }

  fn gte(self, right: Right) -> bool {
    ordering_opt := self.cmp(right);
    if ordering_opt is Option!<Ordering>::None {
      return false;
    }
    ordering := ordering_opt.unwrap();
    return ordering == Ordering::Greater || ordering == Ordering::Equal;
  }
}

trait Ord where Self: Eq & PartialOrd!<Self> {
  fn max(self, other: Self) -> Self {
    if self > other {
      return self;
    }
    return other;
  }
  fn min(self, other: Self) -> Self {
    if self < other {
      return self;
    }
    return other;
  }

  fn clamp(self, min: Self, max: Self) -> Self {
    return self.max(min).min(max);
  }
}

trait Index!<T> {
  fn index(*const self, index: u64) -> *const T;
  fn index_mut(*mut self, index: u64) -> *mut T;
}

/*  
  Pretty much equivalent to an explicitly called destructor in C++, or a Drop trait in Rust.
  often paired with defer blocks, to emulate a nice 'RAII' _type behaviour.

  recursive is defaulted to true. we set a precedent that this is the expected behaviour when calling destroy in most cases;
  every subobject that needs to be freed, will be.

  if you pass false, say to a List!<T>, where T implements Destroy,
  the destroy function will not call destroy on the objects in the list.
*/
trait Destroy {
  // TODO: do we wanna remove the recursive thing, 
  // and have a different destroy type for collections?
  // it's redundant in like 99% of cases, and the compiler
  // bypasses mutability checks for any method called 'destroy()'
  // regardless of the signature or the trait it comes from.
  fn destroy(*mut self, recursive: bool = true);
}

trait Hash {
  fn hash(self) -> u64;
}

trait AsSlice!<T> {
  fn as_slice(self) -> [T];

  fn subslice(self, range: Range) -> [T] {
    return self.as_slice().slice(range);
  }
}