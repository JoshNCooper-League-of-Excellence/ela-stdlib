// Obviously LIBC is only available when not in a freestanding environment.

// TODO: add a bunch more libc functions as needed.
// this is very limited to what i've done in the language so far and a ton is missing.
#ifndef FREESTANDING {
  #foreign system :: fn(cmd: u8*) -> s32;

  #foreign free :: fn(ptr: void*) -> void;
  #foreign malloc :: fn(nbytes: u64) -> void*;
  #foreign calloc :: fn(num: u64, size: u64) -> void*;
  #foreign realloc :: fn(ptr: void*, size: u64) -> void*;

  #foreign printf :: fn(format: u8*, ...) -> s32;
  #foreign exit :: fn(code: s32);

  #foreign scanf :: fn(format: u8*, ...) -> s32;
  #foreign getchar :: fn() -> s32;

  #foreign sleep :: fn(seconds: s32);
  #foreign usleep :: fn(c: s32);

  #foreign snprintf :: fn(buffer: u8*, buffer_size: u64, format: u8*, ...) -> s32;
  #foreign sprintf :: fn(buffer: u8*, format: u8*, ...) -> s32;
  
  #foreign strdup :: fn(s: u8*) -> u8*;
  #foreign strndup :: fn(s: u8*, n: u64) -> u8*;
  #foreign strerror :: fn(errnum: s32) -> u8*;
  #foreign strtok :: fn(s: u8*, delim: u8*) -> u8*;
  #foreign strcat :: fn(dest: u8*, src: u8*) -> u8*;
  #foreign strncat :: fn(dest: u8*, src: u8*, n: u64) -> u8*;

  #foreign strtol :: fn(s: u8*, endptr: u8***, base: s32) -> s64;
  #foreign strtoul :: fn(s: u8*, endptr: u8***, base: s32) -> u64;
  #foreign strtod :: fn(s: u8*, endptr: u8***) -> f64;

  #foreign atoi :: fn(v: u8*) -> s32;
  #foreign atof :: fn(v: u8*) -> f64;

  // TODO: try this again?
  // When I implement this myself, we get a `std::bad_alloc` in my nvidia driver.
  // I'm pretty sure the implementation was correct, but, whatever.
  #foreign memmove :: fn(dest: void*, src: void*, nbytes: s64) -> s32;
  #foreign memcpy :: fn(dest: void*, src: void*, n: u64) -> void*;
  #foreign memset :: fn(dest: void*, c: s32, n: u64) -> void*;
  #foreign strncmp :: fn(s: u8*, str2: u8*, len: s32) -> s32;
  #foreign strcmp :: fn(str1: u8*, str2: u8*) -> s32;
  #foreign strlen :: fn(string: u8*) -> u32;
}

isalnum :: fn(c: s32) -> s32 {
  return ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) as s32;
}

isalpha :: fn(c: s32) -> s32 {
  return ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) as s32;
}

isspace :: fn(c: s32) -> s32 {
  return (c == ' ' || c == '\t' || c == '\n' || c == '\v' || c == '\f' || c == '\r') as s32;
}

isdigit :: fn(c: s32) -> s32 {
  return (c >= '0' && c <= '9') as s32;
}

islower :: fn(c: s32) -> s32 {
  return (c >= 'a' && c <= 'z') as s32;
}

isupper :: fn(c: s32) -> s32 {
  return (c >= 'A' && c <= 'Z') as s32;
}

isprint :: fn(c: s32) -> s32 {
  return (c >= 32 && c < 127) as s32;
}

ispunct :: fn(c: s32) -> s32 {
  return ((c >= '!' && c <= '/') || (c >= ':' && c <= '@') || (c >= '[' && c <= '`') || (c >= '{' && c <= '~')) as s32;
}
