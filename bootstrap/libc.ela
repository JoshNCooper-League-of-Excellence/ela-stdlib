// Obviously, LIBC is only available when not in a freestanding environment.
// TODO: add a bunch more libc functions as needed.
// this is very limited to what i've done in the language so far and a ton is missing.

#ifndef FREESTANDING {
  module std {
    module c {
      struct FILE;
      extern {
        fn system(cmd: *const u8) -> s32;

        fn free(ptr: *const void) -> void;
        fn malloc(nbytes: u64) -> *mut void;
        fn calloc(num: u64, size: u64) -> *mut void;
        fn realloc(ptr: *const void, size: u64) -> *mut void;

        // printf family
        fn printf(format: *const u8, ...) -> s32;
        fn vprintf(format: *const u8, args: va_list) -> s32;

        fn fprintf(stream: *mut FILE, format: *const u8, ...) -> s32;
        fn vfprintf(stream: *mut FILE, format: *const u8, args: va_list) -> s32;

        fn dprintf(fd: s32, format: *const u8, ...) -> s32;
        fn vdprintf(fd: s32, format: *const u8, args: va_list) -> s32;

        fn sprintf(buffer: *mut u8, format: *const u8, ...) -> s32;
        fn vsprintf(buffer: *mut u8, format: *const u8, args: va_list) -> s32;

        fn snprintf(buffer: *mut u8, buffer_size: u64, format: *const u8, ...) -> s32;
        fn vsnprintf(buffer: *mut u8, buffer_size: u64, format: *const u8, args: va_list) -> s32;

        fn asprintf(ptr: *mut *mut u8, format: *const u8, ...) -> s32;
        fn vasprintf(ptr: *mut *mut u8, format: *const u8, args: va_list) -> s32;

        // scanf family
        fn scanf(format: *const u8, ...) -> s32;
        fn vscanf(format: *const u8, args: va_list) -> s32;

        fn fscanf(stream: *mut FILE, format: *const u8, ...) -> s32;
        fn vfscanf(stream: *mut FILE, format: *const u8, args: va_list) -> s32;

        fn sscanf(buffer: *const u8, format: *const u8, ...) -> s32;
        fn vsscanf(buffer: *const u8, format: *const u8, args: va_list) -> s32;

        
        fn exit(code: s32);

        fn getchar() -> s32;

        fn sleep(seconds: u32);
        fn usleep(c: u32);

        fn strdup(s: *const u8) -> *mut u8;
        fn strndup(s: *const u8, n: u64) -> *mut u8;
        fn strerror(errnum: s32) -> *mut u8;

        fn strtok(s: *const u8, delim: *const u8) -> *mut u8;
        fn strcat(dest: *const u8, src: *const u8) -> *mut u8;
        fn strncat(dest: *const u8, src: *const u8, n: u64) -> *mut u8;

        fn atoi(v: *const u8) -> s32;
        fn atof(v: *const u8) -> f64;

        fn memmove(dest: *const void, src: *const void, nbytes: s64) -> s32;
        fn memcpy(dest: *const void, src: *const void, n: u64) -> *mut void;
        fn memset(dest: *const void, c: s32, n: u64) -> *mut void;
        fn memcmp(ptr1: *const void, ptr2: *const void, n: u64) -> s32;

        fn strncmp(s: *const u8, str2: *const u8, len: s32) -> s32;
        fn strcmp(str1: *const u8, str2: *const u8) -> s32;
        fn strlen(string: *const u8) -> u32;

        fn isalnum(c: s32) -> s32;
        fn isalpha(c: s32) -> s32;
        fn isspace(c: s32) -> s32;
        fn isdigit(c: s32) -> s32;
        fn islower(c: s32) -> s32;
        fn isupper(c: s32) -> s32;
        fn isprint(c: s32) -> s32;
        fn ispunct(c: s32) -> s32;
        fn isxdigit(c: s32) -> s32;
        fn iscntrl(c: s32) -> s32;
        fn isgraph(c: s32) -> s32;
        fn tolower(c: s32) -> s32;
        fn toupper(c: s32) -> s32;
      }
    }

    fn system(cmd: str) -> s32 {
      return c::system(cmd.data);
    }

    fn free(ptr: *const void) -> void {
      return c::free(ptr);
    }

    fn malloc!<T>() -> *mut T {
      return c::malloc(sizeof(T));
    }

    fn calloc!<T>(num: u64) -> *mut T {
      return c::calloc(num, sizeof(T));
    }

    fn realloc!<T>(ptr: *const T, n: u64) -> *mut T {
      return c::realloc(ptr, n * sizeof(T));
    }

    @[no_return]
    fn exit(code: s32) {
      return c::exit(code);
    }

    @[inline]
    fn printf!<T>(format: str, arg: T) -> s32 {
      where T: IsTuple {
        return c::printf(format.data, ...arg);
      } else {
        return c::printf(format.data, arg);
      }
    }

    @[inline]
    fn puts!<MsgT>(message: MsgT) where MsgT: AsSlice!<u8> {
      ptr, _ := message.as_slice();
      std::c::puts(message);
    }
    
    @[inline]
    fn fprintf!<T>(stream: *mut c::FILE, format: str, arg: T) -> s32 {
      where T: IsTuple {
        return c::fprintf(stream, format.data, ...arg);
      } else {
        return c::fprintf(stream, format.data, arg);
      }
    }

    @[inline]
    fn dprintf!<T>(fd: s32, format: str, arg: T) -> s32 {
      where T: IsTuple {
        return c::dprintf(fd, format.data, ...arg);
      } else {
        return c::dprintf(fd, format.data, arg);
      }
    }

    @[inline]
    fn sprintf!<T>(buffer: *mut u8, format: str, arg: T) -> s32 {
      where T: IsTuple {
        return c::sprintf(buffer, format.data, ...arg);
      } else {
        return c::sprintf(buffer, format.data, arg);
      }
    }

    @[inline]
    fn asprintf!<T>(format: str, allocator: dyn Allocator, arg: T) -> String {
      where T: IsTuple {
        length := c::snprintf(null, 0, format.data, ...arg);
      } else {
        length := c::snprintf(null, 0, format.data, arg);
      }
      if length < 0 {
        return .{};
      }

      buffer: *mut u8 = allocator.allocate((length + 1) * sizeof(u8));
      
      if buffer == null {
        return .{};
      }

      where T: IsTuple {
        c::snprintf(buffer, length + 1, format.data, arg);
      } else {
        c::snprintf(buffer, length + 1, format.data, ...arg);
      }

      return String.{
        data: buffer,
        length: length,
        allocator: allocator,
      };
    }

    @[inline]
    fn scanf!<T>(format: str, arg: T) -> s32 {
      where T: IsTuple {
      c::scanf(format.data, arg);
      } else {
      return c::scanf(format.data, ...arg);
      }
    }

    @[inline]
    fn fscanf!<T>(stream: *mut c::FILE, format: str, arg: T) -> s32 {
      where T: IsTuple {
      c::fscanf(stream, format.data, arg);
      } else {
      return c::fscanf(stream, format.data, ...arg);
      }
    }

    @[inline]
    fn sscanf!<T>(buffer: str, format: str, arg: T) -> s32 {
      where T: IsTuple {
      c::sscanf(buffer.data, format.data, arg);
      } else {
      return c::sscanf(buffer.data, format.data, ...arg);
      }
    }
  }
}
