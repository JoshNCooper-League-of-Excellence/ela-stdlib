impl StringUtils for str {}

impl str {
  fn to_string!<Alloc>(self, allocator: Alloc) -> String where Alloc: Allocator | dyn Allocator {
    return .{
      data: allocator.copy(self.data, sizeof(u8), self.length),
      length: self.length,
    };
  }

  fn from_ptr(ptr: *u8, mut length: s32 = -1) -> Self {
    if length < 0 {
      length = std::c::strlen(ptr);
    }
    return .{
      data: ptr,
      length: length as u64
    };
  }
}

impl Index!<u8> for str {
  fn index(*const self, idx: u64) -> *const u8 {
    return &const self.data![idx];
  }
  fn index_mut(*mut self, idx: u64) -> *mut u8 {
    return &mut self.data![idx];
  }
}

impl str {
  fn slice(*const self, range: Range) -> [u8] {
    start, end := (range.begin, range.end);
    length := end - start;

    if start < 0 || length < 0 || start + length > self.length {
      return .{};
    }
    
    return .{
      data: self.data + start,
      length: length,
    };
  }
}

// This iterator is over the bytes.
impl Iterable for str { 
  fn iter(*const self) -> Iter!<u8> {
    return .{
      ptr: self.data as *mut u8,
      end: self.data + self.length,
    }
  }
  fn iter_mut(*mut self) -> IterMut!<u8> {
    return .{
      ptr: self.data as *mut u8,
      end: (self.data + self.length),
    }
  }
}

impl PartialEq!<str> for str {
  fn eq(self, other: Self) -> bool {
    if self.length != other.length then return false;
    for idx in 0..self.length {
      if self[idx] != other[idx] then return false;
    }
    return true;
  }
}

impl Hash for str {
	fn hash(self) -> u64 {
		mut hash : u64 = 0xCBF29CE484222325;
		for byte in self {
			hash ^= byte;
			hash *= 0x100000001B3;
		}
		return hash;
	}
}

impl AsSlice!<u8> for str {
  fn as_slice(self) -> [u8] {
    return .{
      data: self.data,
      length: self.length
    }
  }
}
