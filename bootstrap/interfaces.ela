

// Run a cleanup procedure implicitly when an object goes out of scope.
// Absolutely equivalent to a C++ Destructor.
// This could be called explicitly on pointers, but it's not reccomended.
// Drop        :: interface {
//   drop      :: fn(*mut self);
// }

// equivalent to an explicit cast operator overload in C++,
// allow an object to be constructed from another.
From        :: interface!<T> {
  // construct a self type from T.
  from :: fn(v: T) -> #self;
}

// A deep clone, versus assignment always being a shallow clone in Ela.
Clone       :: interface {
  // get a deep clone of self.
  clone     :: fn(self) -> #self;
}

Init :: interface!<V> {
  init :: fn(init: InitList!<V>) -> #self;
}

// Binary arithmetic operator overloads.
Arithmetic :: interface!<Right> {
  add       :: fn(self, right: Right) -> #self;   // '+' operator.
  sub       :: fn(self, right: Right) -> #self;   // '-' operator.
  mul       :: fn(self, right: Right) -> #self;   // '*' operator.
  div       :: fn(self, right: Right) -> #self;   // '/' operator.
  modulo    :: fn(self, right: Right) -> #self;   // '%' operator.
}

// Binary bitwise operator overloading.
Bitwise :: interface!<Right> {
  shr       :: fn(self, right: Right) -> #self;   // '>>' operator.
  shl       :: fn(self, right: Right) -> #self;   // '<<' operator.
  xor       :: fn(self, right: Right) -> #self;   //  '^' operator.
  or        :: fn(self, right: Right) -> #self;   //  '|' operator.
  and       :: fn(self, right: Right) -> #self;   //  '&' operator.
}

// TODO:  We should tidy up operator overloads, where we can automatically use + as += etc.
Eq :: interface {
  eq :: fn(self, right: #self) -> bool;
  neq :: fn(self, right: #self) -> bool;
}

Compare :: interface!<Right> {
  lt  :: fn(self, right: Right) -> bool;  // '<' operator.
  gt  :: fn(self, right: Right) -> bool;  // '>' operator.

  lte :: fn(self, right: Right) -> bool;  // '<=' operator.
  gte :: fn(self, right: Right) -> bool;  // '>=' operator.
}

Subscript :: interface!<T> {
  subscript :: fn(*const self, index: u64) -> *const T;
  subscript_mut :: fn(*mut self, index: u64) -> *mut T;
}

Allocator :: interface {
  allocate :: fn(*mut self, size: u64) -> *mut void;
  free :: fn(*mut self, ptr: *mut void);
  allocate_array :: fn(*mut self, size: u64, n: u64) -> *mut void;
  resize :: fn(*mut self, ptr: *const void, element_size: u64, new_size: u64) -> *mut void;
  copy :: fn(*mut self, ptr: *const void, element_size: u64, n: u64) -> *mut void;
}

Deinit :: interface {
  // Albeit strange, this is declared const because you do not want to have to declare things like
  // a local String as mutable just because you release it.
  // it's counter intuitive, because we actually do modify it, but it's just a QOL thing.
  deinit :: fn(*mut self);
}
// just a free function version for those who might prefer a C like 'free' style api.
deinit :: fn!<T>(t: *const T) where T: Deinit {
  t.deinit();
}

Hash :: interface {
  hash :: fn(self) -> u64;
}

AsSlice :: interface!<T> {
  as_slice :: fn(self, range: Range) -> Slice!<T>;
}

AsCharSlice :: interface {
  as_char_slice :: fn(self) -> Slice!<u32>;
}

AsByteSlice :: interface {
  as_byte_slice :: fn(self) -> Slice!<u8>;
}

