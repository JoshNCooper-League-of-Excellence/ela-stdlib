
HASH_INITIAL_VALUE: u64 = 0xCBF29CE484222325;
HASH_FACTOR:        u64 = 0x100000001B3;

/* 
  A few implementations of hash functions for basic numerical types.
*/
impl Hash for s8 {
  fn hash(self) -> u64 {
    mut hash := HASH_INITIAL_VALUE;
    hash ^= self;
    hash *= HASH_FACTOR;
    return hash;
  }
}

impl Hash for s16 {
  fn hash(self) -> u64 {
    mut hash := HASH_INITIAL_VALUE;
    hash ^= self;
    hash *= HASH_FACTOR;
    return hash;
  }
}

impl Hash for s32 {
  fn hash(self) -> u64 {
    mut hash := HASH_INITIAL_VALUE;
    hash ^= self;
    hash *= HASH_FACTOR;
    return hash;
  }
}

impl Hash for s64 {
  fn hash(self) -> u64 {
    mut hash := HASH_INITIAL_VALUE;
    hash ^= self;
    hash *= HASH_FACTOR;
    return hash;
  }
}

impl Hash for u8 {
  fn hash(self) -> u64 {
    mut hash := HASH_INITIAL_VALUE;
    hash ^= self;
    hash *= HASH_FACTOR;
    return hash;
  }
}

impl Hash for u16 {
  fn hash(self) -> u64 {
    mut hash := HASH_INITIAL_VALUE;
    hash ^= self;
    hash *= HASH_FACTOR;
    return hash;
  }
}

impl Hash for u32 {
  fn hash(self) -> u64 {
    mut hash := HASH_INITIAL_VALUE;
    hash ^= self;
    hash *= HASH_FACTOR;
    return hash;
  }
}

impl Hash for u64 {
  fn hash(self) -> u64 {
    mut hash := HASH_INITIAL_VALUE;
    hash ^= self;
    hash *= HASH_FACTOR;
    return hash;
  }
}

impl Hash for f32 {
  fn hash(self) -> u64 {
    mut hash := HASH_INITIAL_VALUE;
    hash ^= self as u32;
    hash *= HASH_FACTOR;
    return hash;
  }
}

impl Hash for f64 {
  fn hash(self) -> u64 {
    mut hash := HASH_INITIAL_VALUE;
    hash ^= self as u32;
    hash *= HASH_FACTOR;
    return hash;
  }
}


