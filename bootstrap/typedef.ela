
type char :: u32; // this represents a single UTF-8 scalar.

type c_str :: *const u8;

struct Type;

// this is used by many foundational types so it has to be defined first.
trait Allocator {
  fn allocate(*mut self, size: u64) -> *mut void;
  fn free(*mut self, ptr: *mut void);
  fn allocate_array(*mut self, size: u64, n: u64) -> *mut void;
  fn resize(*mut self, ptr: *const void, element_size: u64, new_size: u64) -> *mut void;
  fn copy(*mut self, ptr: *const void, element_size: u64, n: u64) -> *mut void;
  fn destroy(*mut self);
}

// This is a string literal _type. "..." will return this _type.
// It's meant to be an immutable constant string.

// to get a 'u8*' literal, use `"..."c` the little `c` postfix.                              ^
struct str {
  data: c_str,
  length:  u64,
}

// This is basically just a List!<u8>
// but it has some particularly special methods for dealing with strings,
// so it gets it's own distinct _type.
struct String {
  data: *mut u8,
  length: u64,
  capacity: u64,
  allocator: dyn Allocator,
}

// This is what is produced when you do
// .[0, 1, 2, 3]
// it is stack allocated and does not need to be freed, nor
// should it ever be held on to.
struct InitList!<V> {
  data:   *const V,
  length: u64,
}

// A collection of items.
struct List!<V> {
  data:     *mut V,
  length:   u64,
  capacity: u64,
  allocator: dyn Allocator,
}

// A semi-_type-erased pointer that carries the RTTI (Runtime _type information)
// with it for a way to do "duck typing" in a way.
struct any {
  ptr:  *mut void,
  _type: *const Type
};

// A non-owning immutable fat pointer. This should just be a view into a pointer, that tracks length.
// very useful for efficiently passing arrays of data to functions for quick usage with a known (temporary)lifetime,
// iterating over subarrays, etc.
struct Slice!<V> {
  data:  *const V,
  length: u64,
}

// Same as above but mutable, for cheaply modifying subsets of data within ranges of memory.
struct SliceMut!<V> {
  data:  *mut V,
  length: u64,
}

choice Result!<_Ok, _Err> {
  Ok(_Ok),
  Err(_Err),
}

choice Option!<T> {
  None,
  Some(T),
}