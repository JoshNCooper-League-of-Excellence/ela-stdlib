type char :: u32; // this represents a single UTF-8 scalar.
type c_str :: *const u8;

struct Type; // forward declare reflection type.

/*  
  Pretty much equivalent to an explicitly called destructor in C++, or a Drop trait in Rust.
  often paired with defer blocks, to emulate a nice 'RAII' _type behaviour.

  recursive is defaulted to true. we set a precedent that this is the expected behaviour when calling destroy in most cases;
  every subobject that needs to be freed, will be.

  if you pass false, say to a List!<T>, where T implements Destroy,
  the destroy function will not call destroy on the objects in the list.
*/

@[compiler_feature(Destroy)]
trait Destroy {
  // TODO: do we wanna remove the recursive thing, 
  // and have a different destroy type for collections?
  // it's redundant in like 99% of cases, and the compiler
  // bypasses mutability checks for any method called 'destroy()'
  // regardless of the signature or the trait it comes from.
  // it is a little annoying to type recursive: bool = false/true or whatever,
  // but you _do_ get to choose how your method defaults, which is cool.
  fn destroy(*mut self, recursive: bool = true);
}

// this is used by many foundational types so it has to be defined first.
trait Allocator: Destroy {
  fn allocate(*mut self, size: u64) -> *mut void;
  fn free(*mut self, ptr: *mut void);
  fn allocate_array(*mut self, size: u64, n: u64) -> *mut void;
  fn resize(*mut self, ptr: *const void, element_size: u64, new_size: u64) -> *mut void;
  fn copy(*mut self, ptr: *const void, element_size: u64, n: u64) -> *mut void;
  fn strcpy(*mut self, ptr: *const u8, n: u64) -> *mut u8  {
    buf: *mut u8 = self.copy(ptr, sizeof(u8), n+1);
    buf![n] = '\0';
    return buf;
  }
}

// NOTE: to get a 'u8*' literal, use `"..."c` `c` postfix, example:
// "Hello, World!"c <- *u8
// "Hello, World!"  <- str

// This is a string literal _type. "..." will return this _type.
// It's meant to be an immutable constant string.
@[compiler_feature(str)]
struct str {
  data: c_str,
  length:  u64,
}

// This is basically just a List!<u8>
// but it has some particularly special methods for dealing with strings,
// so it gets it's own distinct type.
@[compiler_feature(String)]
struct String {
  data: *mut u8,
  length: u64,
  capacity: u64,
  allocator: dyn Allocator,
}

// This is what is produced when you do
// .[0, 1, 2, 3]
// it is stack allocated and does not need to be freed, nor
// should it ever be held on to.
@[compiler_feature(InitList)]
struct InitList!<V> {
  data:   *const V,
  length: u64,
}

// A collection of items.
struct List!<V> {
  data:     *mut V,
  length:   u64,
  capacity: u64,
  allocator: dyn Allocator,
}

// A non-owning immutable fat pointer. This should just be a view into a pointer, that tracks length.
// very useful for efficiently passing arrays of data to functions for quick usage with a known (temporary)lifetime,
// iterating over subarrays, etc.
@[compiler_feature(Slice)]
struct Slice!<V> {
  data:  *const V,
  length: u64,
}

// Same as above but mutable, for cheaply modifying subsets of data within ranges of memory.
@[compiler_feature(SliceMut)]
struct SliceMut!<V> {
  data:  *mut V,
  length: u64,
}

// A semi-_type-erased pointer that carries the RTTI (Runtime _type information)
// with it for a way to do "duck typing" in a way.
struct any {
  ptr:  *mut void,
  _type: *const Type
};

choice Result!<_Ok, _Err> {
  Ok(_Ok),
  Err(_Err),
}

@[compiler_feature(Option)]
choice Option!<T> {
  None,
  Some(T),
}

// A type that never holds any value.
choice Infallible {}