/*
  a generic iterator, can be used for 'for' loops, such as
  `for i in <my_object> {}`
  where my_object implements either Iterable!<T> (which just indicates we can be converted into an iterator)
  or my_object implements Iterator!<> where it: an iterator itself.
*/
@[compiler_feature(Iterator)]
trait Iterator!<V> {
  fn next(*mut self) -> Option!<V>;
}

fn find_first_of!<I>(iterator: I, closure: *mut void, finder: fn(*mut void, I::V) -> bool) -> Option!<I::V> where I: Iterator!<I::V>  {
  for v in iterator {
    if finder(closure, v) {
      return Some(v);
    }
  }
  return None();
}

/* 
  A basic iterator, can be used as a general purpose way to iterate over
  collections that are implemented as contiguous chunks of memory, and 
  a pointer just needs to be incremented until an end point to fully traverse it.
*/
struct Iter!<V> {
  // Pointer to the current element in the collection.
  // Of course, this has to be mutable because we use pointer arithmetic
  // to advance the iterator.
  ptr: *mut V,  
  end: *const V,  // Pointer to the end of the collection.
}

impl!<V> Iter!<V> {
  fn peek(*const self) -> Option!<V> {
    if self.ptr != self.end {
      return Option!<V>::Some(*self.ptr);
    }
    return Option!<V>::None;
  }
}

/* 
  a mutable version of Iter!<>, where it returns a pointer to each element, instead of dereferencing it.
*/
struct IterMut!<V> {
  ptr: *mut V,  
  end: *const V,  // Pointer to the end of the collection.
}

impl!<V> Iterator!<V> for Iter!<V> {
  type Option :: Option!<V>;
  // Advances the iterator to the next element in the collection.
  @[inline]
  fn next(*mut self) -> Option {
    if self.ptr >= self.end {
      return Option::None;
    }
    value := Option::Some(*self.ptr);
    self.ptr++;
    return value;
  }
}

impl!<V> Iterator!<*mut V> for IterMut!<V> {
  type Option :: Option!<*mut V>;
  // Advances the iterator to the next element in the collection.
  fn next(*mut self) -> Option {
    if self.ptr >= self.end {
      return Option::None;
    }
    value := Option::Some(self.ptr);
    self.ptr++;
    return value;
  }
}

struct Enumerate!<V, I> where I: Iterator!<V> {
  idx: u64,
  iterator: I,
}

impl!<T> Iterator!<T> {
  // ! This causes infinite recursion, where this should actually be allowed.
  // ! I am not sure if it's even possible without out of order compilation
  // ! but this is too nice of a feature to leave out.
  // fn enumerate(self) -> Enumerate!<T, Self> {
  //   return .{ iterator: self, idx: 0 };
  // }
}

/*
  TODO: we need deeper generic comparisons in trait returns,
  we should be able to return Enumerate!<T, Iterator!<T>>

  where:
    - enumerate is a Enumerate!<...> is a concrete _type,
    - T is a concrete _type
    - Iterator!<T> is a trait -- not concrete. but we resolve this to be a trait bounds / constraint.

  for now, we'll just use Iter!<T> because it's overwhelmingly common.
*/
trait Enumerable!<T> {
  @[inline]
  fn enumerate(self) -> Enumerate!<T, Iter!<T>>;

  @[inline]
  fn enumerate_mut(*mut self) -> Enumerate!<*mut T, IterMut!<T>>;
}

/* 
  Iterable is a generic trait that represents a collection that can be iterated over.
  It defines a single method, iter, which returns an iterator for the collection.
*/
@[compiler_feature(Iterable)]
trait Iterable {
  // Returns an iterator for the collection.
  fn iter(*const self) -> Iterator;
  fn iter_mut(*mut self) -> Iterator;
}

impl!<V, I> Iterator!<(u64, V)> for Enumerate!<V, I> {
  fn next(*mut self) -> Option!<(u64, V)> {
    index := self.idx;
    self.idx++;
    next := self.iterator.next();
    
    if next is Option!<V>::Some(v) {
      return Option!<(u64, V)>::Some((index, v));
    } else {
      return Option!<(u64, V)>::None;
    }
  }
}

impl!<V> Iter!<V> {
   // advances the iterator by param(count) elements and returns
  // a slice into that memory, only if the iterator has at least param(count) iterations or elements left.
  fn take(*mut self, count: s64) -> Option!<[V]> {
    if self.ptr + count > self.end {
      return Option!<[V]>::None;
    }
    
    slice: [V] = .{
      data: self.ptr,
      length: count
    };

    self.ptr += count;

    return Option!<[V]>::Some(slice);
  }
}