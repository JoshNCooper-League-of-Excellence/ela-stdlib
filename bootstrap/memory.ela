#ifndef FREESTANDING {
  struct LibcAllocator {}
  impl Destroy for LibcAllocator {
    fn destroy(*mut self, recursive: bool = false) {}
  }
  impl Allocator for LibcAllocator {
    fn allocate(*mut self, size: u64) -> *mut void {
      return std::c::malloc(size);
    }
    fn free(*mut self, ptr: *mut void) {
      std::c::free(ptr);
    }
    fn resize(*mut self, ptr: *const void, element_size: u64, new_size: u64) -> *mut void {
      return std::c::realloc(ptr, element_size * new_size);
    }
    fn allocate_array(*mut self, size: u64, n: u64) -> *mut void {
      return std::c::calloc(size, n);
    }
    fn copy(*mut self, ptr: *const void, element_size: u64, n: u64) -> *mut void {
      newptr := self.allocate_array(element_size, n);
      std::c::memcpy(newptr, ptr, n * element_size);
      return newptr;
    }
  }
  impl LibcAllocator {
    fn get() -> Self {
      #static self: LibcAllocator;
      return self;
    }
  }

  struct TrackingAllocator {
    pointers: *mut *mut void,
    length: u64,
    capacity: u64,
  }

  impl TrackingAllocator {

    fn try_report_leaks(*self) {
      for i in 0..self.length {
        std::c::printf("[TrackingAllocator]: leak at index(%d), pointer(%p)"c, i, self.pointers![i]);
      }
    }

    fn push_pointer(*mut self, ptr: *mut void) {
      if self.length + 1 > self.capacity {
        if self.capacity == 0 then self.capacity = 4;
        self.capacity *= 2;
        self.pointers = std::c::realloc(self.pointers, sizeof(*const void) * self.capacity);
      }
      self.pointers![self.length] = ptr;
      self.length += 1;
    }

    fn contains_pointer(self, ptr: *mut void) -> bool {
      for i in 0..self.length {
        if self.pointers![i] == ptr {
          return true;
        }
      }
      return false;
    }

    fn remove_pointer(*mut self, ptr: *const void) {
      for i in 0..self.length {
        if self.pointers![i] == ptr {
          std::c::memmove(self.pointers + i, self.pointers + i + 1, sizeof(*const void) * (self.length - i - 1));
          self.length -= 1;
          break;
        }
      }
    }
  }
  impl Destroy for TrackingAllocator {
    fn destroy(*mut self, recursive: bool = false) {
      while self.length > 0 {
        std::c::free(self.pointers![self.length - 1]);
        self.length -= 1;
      }
      std::c::free(self.pointers);
      self.pointers = null;
      self.capacity = 0;
    }
  }
  impl Allocator for TrackingAllocator {
    fn allocate(*mut self, size: u64) -> *mut void {
      ptr := std::c::malloc(size);
      self.push_pointer(ptr);
      return ptr;
    }

    fn free(*mut self, ptr: *mut void) {
      self.remove_pointer(ptr);
      std::c::free(ptr);
    }

    fn allocate_array(*mut self, size: u64, n: u64) -> *mut void {
      ptr := std::c::calloc(size, n);
      self.push_pointer(ptr);
      return ptr;
    }

    fn resize(*mut self, ptr: *const void, element_size: u64, new_size: u64) -> *mut void {
      self.remove_pointer(ptr);
      pointer := std::c::realloc(ptr, element_size * new_size);
      self.push_pointer(pointer);
      return pointer;
    }

    fn copy(*mut self, ptr: *const void, element_size: u64, n: u64) -> *mut void {
      new_ptr := self.allocate_array(element_size, n);
      std::c::memcpy(new_ptr, ptr, n * element_size);
      return new_ptr;
    }
  }
}

/* 
  TODO:
    explore how we could make this (the global allocator system) thread safe.
    It relies heavily on pointers/function pointers, which i highly doubt are just thread safe.
*/
#ifndef FREESTANDING {
  mut global_LibcAllocator: LibcAllocator;
}
mut global_dyn_LibcAllocator: dyn Allocator;
mut global_allocator: dyn Allocator;

impl dyn Allocator {
  fn has_instance(self) -> bool => self.instance != null;
}

fn set_global_allocator(allocator: dyn Allocator) {
  global_allocator = allocator;
}

#ifndef FREESTANDING {
  fn get_global_allocator() -> dyn Allocator {
    /* 
      We have to initialize the global data here conditionally because we don't have
      global static initializers.

      Also, if this ever gets invalidated, (a user carelessly setting this to null)
      we just rectify it -- many container types such as List!<T> and String rely heavily
      on this global allocator, and we can't have it in an invalid state.

      Of course that's not guaranteed protection, but it's a measure.

      An alternative would be beginning every program with 'set_global_allocator()' 
      which would just be annoying
    */

    // check .instance here to see if this even points to anything.
    if !global_allocator.has_instance() {

      // we have to setup the dynof here because of static initializer limitations.
      if !global_dyn_LibcAllocator.has_instance() {
        global_dyn_LibcAllocator = dynof(&mut global_LibcAllocator, Allocator);
      }

      global_allocator = global_dyn_LibcAllocator;
    }
    return global_allocator;
  }

} else {
  // If you're freestanding, it's totally up to you to set the global allocators up.
  fn get_global_allocator() -> dyn Allocator {
    return global_allocator;
  }
}


struct DefaultContext {
  allocator: dyn Allocator,
}

impl Context for DefaultContext {
  fn get_allocator(*self) -> dyn Allocator {
    return get_global_allocator();
  }
}
