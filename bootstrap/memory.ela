// This is a 'dynamic' because we don't support dynamic dispatch traits yet.
// This is soon to come, but we want to model our standard library around it too,
// so this is a nice placeholder.

/// * We do support dyn trait objects now. We just need to convert this.
struct Dyn_Allocator {
  instance:         *mut void,
  p_allocate:       fn * (*mut void, u64) -> *mut void,
  p_free:           fn * (*mut void, *const void),
  p_allocate_array: fn * (*mut void, u64, u64) -> *mut void,
  p_resize:         fn * (*mut void, *const void, u64, u64) -> *mut void,
  p_copy:           fn * (*mut void, *const void, u64, u64) -> *mut void,
  p_deinit:         fn * (*mut void),
}

impl Dyn_Allocator {
  fn new!<T>(t: *mut T) -> #self where T: Allocator {
    return .{
      instance: t,
      p_allocate:       &mut T::allocate,
      p_free:           &mut T::free,
      p_allocate_array: &mut T::allocate_array,
      p_resize:         &mut T::resize,
      p_copy:           &mut T::copy,
      p_deinit:         &mut T::deinit,
    };
  }
}

impl Dyn_Allocator {
  fn new_ptr!<T>(*mut self, value: T) -> *mut T {
    mut mem : *mut T = self.allocate(sizeof(T));
    *mem = value;
    return mem;
  }

  fn allocate(*mut self, size: u64) -> *mut void {
    p_allocate := self.p_allocate;
    return p_allocate(self.instance, size);
  }

  fn free(*mut self, ptr: *mut void) {
    p_free := self.p_free;
    p_free(self.instance, ptr);
  }

  fn allocate_array(*mut self, size: u64, n: u64) -> *mut void {
    p_allocate_array := self.p_allocate_array;
    return p_allocate_array(self.instance, size, n);
  }

  fn resize(*mut self, ptr: *const void, element_size: u64, new_size: u64) -> *mut void {
    p_resize := self.p_resize;
    return p_resize(self.instance, ptr, element_size, new_size);
  }

  fn copy(*mut self, ptr: *const void, element_size: u64, n: u64) -> *mut void {
    p_copy := self.p_copy;
    return p_copy(self.instance, ptr, element_size, n);
  }

  fn deinit(*mut self) {
    p_deinit := self.p_deinit;
    p_deinit(self.instance);
  }
}

#ifndef FREESTANDING {
  struct Libc_Allocator {}
  impl Allocator for Libc_Allocator {
    fn allocate(*mut self, size: u64) -> *mut void {
      return malloc(size);
    }
    fn free(*mut self, ptr: *mut void) {
      free(ptr);
    }
    fn resize(*mut self, ptr: *const void, element_size: u64, new_size: u64) -> *mut void {
      return realloc(ptr, element_size * new_size);
    }
    fn allocate_array(*mut self, size: u64, n: u64) -> *mut void {
      return calloc(size, n);
    }
    fn copy(*mut self, ptr: *const void, element_size: u64, n: u64) -> *mut void {
      newptr := self.allocate_array(element_size, n);
      memcpy(newptr, ptr, n * element_size);
      return newptr;
    }
    fn deinit(*mut self) {}
  }
  impl Libc_Allocator {
    fn get() -> #self {
      #static self: #self;
      return self;
    }
  }

  struct Tracking_Allocator {
    pointers: *mut *mut void,
    length: u64,
    capacity: u64,
  }
  impl Tracking_Allocator {

    fn push_pointer(*mut self, ptr: *mut void) {
      if self.length + 1 > self.capacity {
        if self.capacity == 0 then self.capacity = 4;
        self.capacity *= 2;
        self.pointers = realloc(self.pointers, sizeof(*const void) * self.capacity);
      }
      self.pointers[self.length] = ptr;
      self.length += 1;
    }

    fn contains_pointer(self, ptr: *mut void) -> bool {
      for i in 0..self.length {
        if self.pointers[i] == ptr {
          return true;
        }
      }
      return false;
    }

    fn remove_pointer(*mut self, ptr: *const void) {
      for i in 0..self.length {
        if self.pointers[i] == ptr {
          memmove(self.pointers + i, self.pointers + i + 1, sizeof(*const void) * (self.length - i - 1));
          self.length -= 1;
          break;
        }
      }
    }
  }
  impl Allocator for Tracking_Allocator {
    fn deinit(*mut self) {
      while self.length > 0 {
        free(self.pointers[self.length - 1]);
        self.length -= 1;
      }
      free(self.pointers);
      self.pointers = null;
      self.capacity = 0;
    }

    fn allocate(*mut self, size: u64) -> *mut void {
      ptr := malloc(size);
      self.push_pointer(ptr);
      return ptr;
    }

    fn free(*mut self, ptr: *mut void) {
      self.remove_pointer(ptr);
      free(ptr);
    }

    fn allocate_array(*mut self, size: u64, n: u64) -> *mut void {
      ptr := calloc(size, n);
      self.push_pointer(ptr);
      return ptr;
    }

    fn resize(*mut self, ptr: *const void, element_size: u64, new_size: u64) -> *mut void {
      self.remove_pointer(ptr);
      pointer := realloc(ptr, element_size * new_size);
      self.push_pointer(pointer);
      return pointer;
    }

    fn copy(*mut self, ptr: *const void, element_size: u64, n: u64) -> *mut void {
      new_ptr := self.allocate_array(element_size, n);
      memcpy(new_ptr, ptr, n * element_size);
      return new_ptr;
    }
  }
}


#ifndef FREESTANDING {
  // TODO: make this less stupid.
  // you can also overwrite this if you want, just be sure to free the old one.
  fn get_default_allocator() -> *mut Dyn_Allocator {
    #static mut allocator: Libc_Allocator;
    #static mut dynamic: *mut Dyn_Allocator = null;
    if dynamic == null {
      dynamic = new(Dyn_Allocator::new(&mut allocator));
    }
    return dynamic;
  }
}
