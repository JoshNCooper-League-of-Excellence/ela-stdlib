
impl!<T> Iterable for InitList!<T> {
  @[inline]
  fn iter(*const self) -> Iter!<T> {
    return .{
      ptr: self.data as *mut T,
      end: self.data + self.length,
    }
  }
  @[inline]
  fn iter_mut(*mut self) -> IterMut!<T> {
    return .{
      ptr: self.data as *mut T,
      end: self.data + self.length,
    }
  }
}

impl!<T> Enumerable!<T> for InitList!<T> {
  fn enumerate(self) -> Enumerate!<T, Iter!<T>> {
    return .{
      idx: 0,
      iterator: self.iter(),
    };
  }
  fn enumerate_mut(*mut self) -> Enumerate!<*mut T, IterMut!<T>> {
    return .{
      idx: 0,
      iterator: self.iter_mut(),
    };
  }
}

impl!<T> AsSlice!<T> for InitList!<T> {
  fn as_slice(self) -> [T] {
    return .{
      data: self.data,
      length: self.length,
    }
  }
}