

// ! TODO: 
  // fix the bug where this doesn't fricken work.
  // emit_symbol tries to emit it as if the functions belong ot StringUtils where 
  // we need to do like String$slice not StringUtils$slice

trait StringUtils {
  fn is_empty(self) -> bool => self.length == 0;

  fn empty() -> Self {
    return .{};
  }

  fn front(self) -> Option!<u8> {
    if self.length == 0 then return None();
    return Some(self.data![0]);
  }

  fn back(self) -> Option!<u8> {
    if self.length == 0 then return None();
    return Some(self.data![self.length - 1]);
  }

  fn starts_with!<Prefix>(self, prefix: Prefix) -> bool where Prefix: AsSlice!<u8> {
    data, length := prefix.as_slice();
    if self.length < length then return false;

    for i in 0..length {
      if self.data![i] != data![i] 
        then return false;
    }

    return true;
  }
  
  fn ends_with!<Suffix>(self, suffix: Suffix) -> bool where Suffix: AsSlice!<u8> {
    data, length := suffix.as_slice();
    if self.length < length then return false;
    for i in 0..length {
      if self.data![self.length - length + i] != data![i] then return false;
    }
    return true;
  }

  fn is_empty_or_whitespace(self) -> bool {
    for i in 0..self.length {
      ch := self.data![i];
      if ch != ' ' {
        return false;
      }
    }
    return true;
  }

  fn contains!<TString>(self, search: TString) -> bool where TString: AsSlice!<u8> {
    self_data, self_len := self.as_slice();
    search_data, search_len := search.as_slice();
  
    if search_len == 0 || self_len < search_len {
      return false;
    }
    
    for i in 0..(self_len - search_len + 1) {
      mut found := true;
      for j in 0..search_len {
        if self_data[i + j] != search_data[j] {
          found = false;
          break;
        }
      }
      if found {
        return true;
      }
    }
    return false;
  }
}