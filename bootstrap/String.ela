impl StringUtils for String {}

#ifndef FREESTANDING {
  impl String {
    @[inline]
    fn get_allocator_if_needed(*mut self) {
      if !self.allocator.has_instance() {
        self.allocator = get_global_allocator();
      }
    }  
  }

  impl String {
    fn replace!<Old, Replacement>(*mut self, old_arg: Old, replacement_arg: Replacement) -> String
      where Old: AsSlice!<u8>,
            Replacement: AsSlice!<u8> {
      old := old_arg.as_slice();
      replacement := replacement_arg.as_slice();

      self.get_allocator_if_needed();

      mut result : String;
      for i in 0..self.length {
        if strncmp(self.data + i, old.data, old.length as s32) == 0 {
          result.data = self.allocator.resize(result.data, result.length + replacement.length + 1);
          std::c::memcpy(result.data + result.length, replacement.data, replacement.length);
          result.length += replacement.length;
          i += old.length - 1;
        } else {
          result.data = self.allocator.resize(result.data, result.length + 1 + 1);
          result.data![result.length] = self.data![i];
          result.length++;
        }
      }
      result.data![result.length] = 0;
      return result;
    }

    fn from!<T>(data: T) -> Self
      where T: AsSlice!<u8> {
      slice := data.as_slice();

      if slice.is_empty() {
        return .{};
      }
      
      return .{
        allocator: get_global_allocator(),
        data: get_global_allocator().copy(slice.data, sizeof(u8), slice.length),
        capacity: slice.length,
        length: slice.length,
      };
    }

    fn from_ptr(data: c_str) -> Self {
      length := std::c::strlen(data);
      return .{
        allocator: get_global_allocator(),
        data: get_global_allocator().copy(data, sizeof(u8), length),
        capacity: length,
        length: length,
      };
    }

    fn append!<T>(*mut self, other: T) where T: AsSlice!<u8> {
      slice := other.as_slice();
      if self.capacity == 0 then self.capacity = 256 / 3;

      if self.length + slice.length >= self.capacity 
        then self.resize(self.capacity * 3 + slice.length);
      
      self.get_allocator_if_needed();
      std::c::memcpy(self.data + self.length, slice.data, slice.length);

      self.length += slice.length;
      self.data![self.length] = '\0';
    }

    fn append_then_free!<T>(*mut self, mut other: T) where T: AsSlice!<u8> & Destroy {
      self.append(other);
      other.destroy();
    }
  }

  /*
    These are the 'List' like functions for dynamic strings.
  */
  impl String {
    fn resize(*mut self, new_size: u64) {
      if new_size < self.length then self.length = new_size;
      self.capacity = new_size;

      self.get_allocator_if_needed();

      self.data = self.allocator.resize(self.data, sizeof(u8), new_size + 1);
      self.data![self.length] = 0;
    }

    fn push(*mut self, ch: u8) {
      if self.capacity == 0 then self.capacity = 256 / 3;
      if !self.data || self.length + 1 >= self.capacity {
        self.resize(self.capacity * 3 + 1);
      }
      self.data![self.length] = ch;
      self.length++;
      self.data![self.length] = '\0';
    }

    fn pop(*mut self) -> u8 {
      if self.length == 0 then return '\0' as u8;
      ch := self.data![--self.length];
      self.data![self.length] = '\0';
      return ch;
    }

    fn pop_front(*mut self) -> u8 {
      if self.length == 0 then return '\0' as u8;
      ch := self.data![0];
      std::c::memmove(self.data, self.data + 1, self.length - 1);
      self.length--;
      self.data![self.length] = '\0';
      return ch;
    }

    fn push_front(*mut self, ch: u8) {
      if self.capacity == 0 then self.capacity = 256 / 3;
      if self.length + 1 >= self.capacity {
        self.resize(self.capacity * 3);
      }
      std::c::memmove(self.data + 1, self.data, self.length);
      self.data![0] = ch;
      self.length++;
      self.data![self.length] = '\0';
    }

    fn insert_at(*mut self, index: u64, ch: u8) {
      if index > self.length 
        then return;

      if self.capacity == 0 
        then self.capacity = 256 / 3;

      if !self.data || self.length + 1 >= self.capacity 
        then self.resize(self.capacity * 3);
      
      std::c::memmove(self.data + index + 1, self.data + index, self.length - index);
      self.data![index] = ch;
      self.length++;
      self.data![self.length] = '\0';
    }

    fn insert_substr!<Substring>(*mut self, index: u64, substr: Substring) where Substring: AsSlice!<u8> {
      slice := substr.as_slice();
      if index > self.length then return;
      if self.capacity == 0 then self.capacity = 256 / 3;
      if self.length + slice.length >= self.capacity {
        self.resize(self.capacity * 3 + slice.length);
      }
      std::c::memmove(self.data + index + slice.length, self.data + index, self.length - index);
      std::c::memcpy(self.data + index, slice.data, slice.length);
      self.length += slice.length;
      self.data![self.length] = '\0';
    }

    fn substr(self, start: u64, mut length: u64) -> String {
      if start >= self.length then return .{};

      if start + length > self.length 
        then length = self.length - start;

      return .{
        data: self.allocator.copy(self.data + start, sizeof(u8), length),
        capacity: length,
        length: length,
      };
    }

    fn split!<SeperatorT>(self, seperator: SeperatorT) -> List!<String> {
      mut out: List!<String>;
      using views := self.split_view(seperator);
      for v in views {
        out.push(String::from(v));
      }
      return out;
    }

    fn join!<SepT>(strings: [String], separator: SepT) -> String 
      where SepT: AsSlice!<u8> 
    {
      sep := separator.as_slice();
      mut result: String;
      for i in 0..strings.length {
        result.append(strings[i]);
        if i + 1 < strings.length {
          result.append(sep);
        }
      }
      return result;
    }

    // Split view is kind of a misnomer, we still allocate in this function.
    fn split_view!<SeperatorT>(self, seperator: SeperatorT) -> List!<[u8]> {
      mut result: List!<[u8]>;
      mut start: s32 = 0;
      mut i: s32 = 0;

      mut sep: [u8];

      where SeperatorT: AsSlice!<u8> {
        sep = seperator.as_slice();
      } else where SeperatorT: u8 | u32 {
        mut one: [u8; 1];
        one[0] = seperator as u8;
        sep = .{ data: one.data, length: 1 };
      }

      if sep.length == 0 {
        result.push(self.slice(0..(self.length as s32)));
        return result;
      }

      while i < (self.length as s32) {
        if i + (sep.length as s32) <= (self.length as s32) &&
           std::c::memcmp(self.data + i, sep.data, sep.length as s32) == 0 {
          // push range begin..end (end is i)
          result.push(self.slice(start..i));
          start = i + (sep.length as s32);
          i = start;
        } else {
          i += 1;
        }
      }

      if start <= (self.length as s32) {
        result.push(self.slice(start..(self.length as s32)));
      }

      return result;
    }

    fn erase_at(*mut self, index: u64) {
      if index >= self.length then return;
      std::c::memmove(self.data + index, self.data + index + 1, self.length - index - 1);
      self.length--;
      self.data![self.length] = '\0';
    }
  }
}

impl Clone for String {
  fn clone(self) -> Self {
    mut allocator := self.allocator;
    if !allocator.has_instance() {
      allocator = get_global_allocator();
    }
    return .{
      data: allocator.copy(self.data, sizeof(u8), self.length),
      length: self.length,
      capacity: self.capacity,
      allocator: allocator,
    };
  }
}

impl Destroy for String {
  fn destroy(*mut self, recursive: bool = true) {
    self.get_allocator_if_needed();
    self.allocator.free(self.data);
    self.data = null;
    self.capacity = 0;
    self.length = 0;
  }
}

impl Index!<u8> for String {
  fn index(*const self, idx: u64) -> *const u8 {
    return &const self.data![idx];
  }
  fn index_mut(*mut self, idx: u64) -> *mut u8 {
    return &mut self.data![idx];
  }
}

impl String {
  // this is just a view of the current string, we still own the memory in the 'str'
  fn as_str(self) -> str {
    return .{
      data: self.data,
      length: self.length,
    }
  }

  fn slice(self, range: Range) -> [u8] {
    return .{
      data: self.data + range.begin,
      length: range.end - range.begin,
    }
  }

  fn slice_mut(self, range: Range) -> SliceMut!<u8> {
    return .{
      data: (self.data + range.begin) as *mut u8,
      length: range.end - range.begin,
    }
  }

  fn eq_str(self, s: str) -> bool {
    return self.as_str() == s;
  }
}

// This has to be here because it depends on a function above
impl str {
  fn eq_string(self, s: String) -> bool {
    return self == s.as_str();
  }
}

impl PartialEq!<String> for String {
  fn eq(self, other: Self) -> bool {
    if self.length != other.length then return false;
    for idx in 0..self.length {
      if self[idx] != other[idx] then return false;
    }
    return true;
  }
}

impl Iterable for String {
  fn iter(*const self) -> Iter!<u8> {
    return .{
      ptr: self.data,
      end: self.data + self.length,
    }
  }
  fn iter_mut(*mut self) -> IterMut!<u8> {
    return .{
      ptr: self.data,
      end: self.data + self.length,
    }
  }
}

impl AsSlice!<u8> for String {
  fn as_slice(self) -> [u8] {
    return .{
      data: self.data,
      length: self.length
    }
  }
}

impl Hash for String {
  fn hash(self) -> u64 {
    return self.as_str().hash();
  }
}
