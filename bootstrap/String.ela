impl String {
  slice :: fn(self, range: Range) -> Slice!<u8> {
    return .{
      data: self.data + range.begin,
      length: range.end - range.begin,
    }
  }
  slice_mut :: fn(self, range: Range) -> SliceMut!<u8> {
    return .{
      data: self.data + range.begin,
      length: range.end - range.begin,
    }
  }
}

#ifndef FREESTANDING {
  impl String {
    replace :: fn!<Old, Replacement>(*mut self, old_arg: Old, replacement_arg: Replacement) -> String
      where Old: AsByteSlice,
            Replacement: AsByteSlice
    {
      old := old_arg.as_byte_slice();
      replacement := replacement_arg.as_byte_slice();
      

      mut result : String = .{};
      for i in 0..self.length {
        if strncmp(self.data + i, old.data, old.length as s32) == 0 {
          result.data = realloc(result.data, result.length + replacement.length + 1);
          memcpy(result.data + result.length, replacement.data, replacement.length);
          result.length += replacement.length;
          i += old.length - 1;
        } else {
          result.data = realloc(result.data, result.length + 1 + 1);
          result.data[result.length] = self.data[i];
          result.length++;
        }
      }
      result.data[result.length] = 0;
      return result;
    }

    from :: fn!<T>(data: T) -> #self
    where T: AsByteSlice {
      slice := data.as_byte_slice();
      return .{
        data: strdup(slice.data),
        capacity: slice.length,
        length: slice.length,
      };
    }

    from_ptr :: fn(data: c_str) -> #self {
      length := strlen(data);
      return .{
        data: strdup(data),
        capacity: length,
        length: length,
      };
    }

  }

  /*
    These are the 'List' like functions for dynamic strings.
  */
  impl String {
    resize :: fn(*mut self, new_size: u64) {
      if new_size < self.length then self.length = new_size;
      self.capacity = new_size;

      if self.allocator == null {
        self.allocator = get_default_allocator();
      }

      self.data = self.allocator.resize(self.data, sizeof(u8), new_size + 1);
      self.data[self.length] = 0;
    }

    push :: fn(*mut self, ch: u8) {
      if self.capacity == 0 then self.capacity = 256 / 3;
      if self.length + 1 >= self.capacity {
        self.resize(self.capacity * 3 + 1);
      }
      self.data[self.length] = ch;
      self.length++;
      self.data[self.length] = '\0';
    }

    pop :: fn(*mut self) -> u8 {
      if self.length == 0 then return '\0' as u8;
      ch := self.data[--self.length];
      self.data[self.length] = '\0';
      return ch;
    }

    pop_front :: fn(*mut self) -> u8 {
      if self.length == 0 then return '\0' as u8;
      ch := self.data[0];
      memmove(self.data, self.data + 1, self.length - 1);
      self.length--;
      self.data[self.length] = '\0';
      return ch;
    }

    push_front :: fn(*mut self, ch: u8) {
      if self.capacity == 0 then self.capacity = 256 / 3;
      if self.length + 1 >= self.capacity {
      self.resize(self.capacity * 3);
      }
      memmove(self.data + 1, self.data, self.length);
      self.data[0] = ch;
      self.length++;
      self.data[self.length] = '\0';
    }

    insert_at :: fn(*mut self, index: u64, ch: u8) {
      if index > self.length 
        then return;

      if self.capacity == 0 
        then self.capacity = 256 / 3;

      if !self.data || self.length + 1 >= self.capacity 
        then self.resize(self.capacity * 3);
      
      memmove(self.data + index + 1, self.data + index, self.length - index);
      self.data[index] = ch;
      self.length++;
      self.data[self.length] = '\0';
    }

    insert_substr :: fn!<Substring>(*mut self, index: u64, substr: Substring) where Substring: AsByteSlice {
      slice := substr.as_byte_slice();
      if index > self.length then return;
      if self.capacity == 0 then self.capacity = 256 / 3;
      if self.length + slice.length >= self.capacity {
        self.resize(self.capacity * 3 + slice.length);
      }
      memmove(self.data + index + slice.length, self.data + index, self.length - index);
      memcpy(self.data + index, slice.data, slice.length);
      self.length += slice.length;
      self.data[self.length] = '\0';
    }

    substr :: fn(self, start: u64, mut length: u64) -> String {
      if start >= self.length then return .{};

      if start + length > self.length then 
        length = self.length - start;
      return .{
        data: strndup(self.data + start, length),
        capacity: length,
        length: length,
      };
    }

    split :: fn!<Substring>(self, delimiter: Substring) -> List!<String> where Substring: AsByteSlice {
      slice := delimiter.as_byte_slice();

      mut result: List!<String>;
      mut start: u64;

      for i in 0..self.length {
        if i + slice.length <= self.length && memcmp(self.data + i, slice.data, slice.length) == 0 {
          result.push(self.substr(start, i - start));
          start = i + slice.length;
          i += slice.length - 1;
        }
      }
      result.push(self.substr(start, self.length - start));
      return result;
    }

    split_view :: fn!<Substring>(self, delimiter: Substring) -> List!<Slice!<u8>> where Substring: AsByteSlice {
      slice := delimiter.as_byte_slice();

      mut result: List!<Slice!<u8>>;
      mut start: s32;

      for i in 0..self.length {
        if i + slice.length <= self.length && memcmp(self.data + i, slice.data, slice.length) == 0 {
          result.push(self.slice(start..i - start));
          start = i + slice.length;
          i += slice.length - 1;
        }
      }

      result.push(self.slice(start..self.length - start));
      return result;
    }

    erase_at :: fn(*mut self, index: u64) {
      if index >= self.length then return;
      memmove(self.data + index, self.data + index + 1, self.length - index - 1);
      self.length--;
      self.data[self.length] = '\0';
    }

    is_empty_or_whitespace :: fn(self) -> bool {
      for i in 0..self.length {
        ch := self.data[i];
        if !isspace(ch) {
          return false;
        }
      }
      return true;
    }
  }

  impl Clone for String {
    clone :: fn(self) -> #self {
      return .{
        data: strdup(self.data),
        length: self.length,
        capacity: self.capacity,
      };
    }
  }

  impl Deinit for String {
    deinit :: fn(*mut self) {
      free(self.data);
      self.data = null;
      self.capacity = 0;
      self.length = 0;
    }
  }

  impl String {
    starts_with :: fn(self, prefix: c_str) -> bool {
      prefix_len := strlen(prefix);
      if self.length < prefix_len then return false;
      for i in 0..prefix_len {
        if self.data[i] != prefix[i] then return false;
      }
      return true;
    }

    ends_with :: fn(self, suffix: c_str) -> bool {
      suffix_len := strlen(suffix);
      if self.length < suffix_len then return false;
      for i in 0..suffix_len {
        if self.data[self.length - suffix_len + i] != suffix[i] then return false;
      }
      return true;
    }
  }
}

impl Subscript!<u8> for String {
  subscript :: fn(*const self, idx: u64) -> *const u8 {
    return &const self.data[idx];
  }
  subscript_mut :: fn(*mut self, idx: u64) -> *mut u8 {
    return &mut self.data[idx];
  }
}

impl String {
  // THIS IS JUST A VIEW OF THE CURRENT STRING, PERFORM A CLONE ON THE STR TO GET AN OWNED COPY.
  as_str :: fn(self) -> str {
    return .{
      data: self.data,
      length: self.length,
    }
  }

  is_empty :: fn(self) -> bool => self.length == 0;

  empty :: fn() -> #self {
    return .{};
  }

  front :: fn(self) -> u8 {
    if self.length == 0 then return '\0' as u8;
    return self.data[0];
  }

  back :: fn(self) -> u8 {
    if self.length == 0 then return '\0' as u8;
    return self.data[self.length - 1];
  }
}

impl Eq for String {
  eq :: fn(self, other: #self) -> bool {
    if self.length != other.length then return false;
    for idx in 0..self.length {
      if self[idx] != other[idx] then return false;
    }
    return true;
  }
  neq :: fn(self, other: #self) -> bool {
    return !self.eq(other);
  }
}

impl Iterable for String {
  iter :: fn(*const self) -> Iter!<u8> {
    return .{
      ptr: self.data,
      end: self.data + self.length,
    }
  }
  iter_mut :: fn(*mut self) -> Iter!<u8> {
    return .{
      ptr: self.data,
      end: self.data + self.length,
    }
  }
}

impl AsCharSlice for String {
  as_char_slice :: fn(self) -> Slice!<u32> {
    return .{
      data: self.data,
      length: self.length / 4, // we do this because we're reinterpreting a c_str as a u32* which effectively packs it and quarters the "length"
    }
  }
}

impl AsByteSlice for String {
  as_byte_slice :: fn(self) -> Slice!<u8> {
    return .{
      data: self.data,
      length: self.length
    }
  }
}

impl Hash for String {
  hash :: fn(self) -> u64 {
    return self.as_str().hash();
  }
}
