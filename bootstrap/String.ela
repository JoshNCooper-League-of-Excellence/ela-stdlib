
#ifndef FREESTANDING {
  
  impl String {
    replace :: fn(*mut self, old: c_str, replacement: c_str) -> String {
      old_len := strlen(old);
      new_len := strlen(replacement);
      mut result : String = .{};
      for i in 0..self.length {
        if strncmp(self.data + i, old, old_len) == 0 {
          result.data = realloc(result.data, result.length + new_len + 1);
          memcpy(result.data + result.length, replacement, new_len);
          result.length += new_len;
          i += old_len - 1;
        } else {
          result.data = realloc(result.data, result.length + 1 + 1);
          result.data[result.length] = self.data[i];
          result.length++;
        }
      }
      result.data[result.length] = 0;
      return result;
    }
    
    from :: fn!<T>(data: T) -> #self 
    where T is As_Byte_Slice {
      slice := data.as_byte_slice();
      return .{
        data: strdup(slice.data),
        capacity: slice.length,
        length: slice.length,
      };
    }
    
    from_ptr :: fn(data: c_str) -> #self {
      length := strlen(data);
      return .{
        data: strdup(data),
        capacity: length,
        length: length,
      };
    }

  }


  /* 
    These are the 'List' like functions for dynamic strings.
  */
  impl String {
    resize :: fn(*mut self, new_size: u64) {
      if new_size < self.length then self.length = new_size;
      self.capacity = new_size;
      self.data = realloc(self.data, new_size * sizeof(u8) + 1);
      self.data[self.length] = 0; // Maintain null terminator
    }
    
    push :: fn(*mut self, ch: u8) {
      if self.capacity == 0 then self.capacity = 256 / 3;
      if self.length + 1 >= self.capacity {
      self.resize(self.capacity * 3 + 1);
      }
      self.data[self.length] = ch;
      self.length++;
      self.data[self.length] = '\0';
    }

    pop :: fn(*mut self) -> u8 {
      if self.length == 0 then return '\0' as u8;
      ch := self.data[--self.length];
      self.data[self.length] = '\0';
      return ch;
    }

    pop_front :: fn(*mut self) -> u8 {
      if self.length == 0 then return '\0' as u8;
      ch := self.data[0];
      memmove(self.data, self.data + 1, self.length - 1);
      self.length--;
      self.data[self.length] = '\0';
      return ch;
    }

    push_front :: fn(*mut self, ch: u8) {
      if self.capacity == 0 then self.capacity = 256 / 3;
      if self.length + 1 >= self.capacity {
      self.resize(self.capacity * 3);
      }
      memmove(self.data + 1, self.data, self.length);
      self.data[0] = ch;
      self.length++;
      self.data[self.length] = '\0'; // Maintain null terminator
    }
  }

  impl Deinit for String {
    deinit :: fn(*const self) {
      free(self.data);
    }
  }
    
  impl String {
    starts_with :: fn(*mut self, prefix: c_str) -> bool {
      prefix_len := strlen(prefix);
      if self.length < prefix_len then return false;
      for i in 0..prefix_len {
        if self.data[i] != prefix[i] then return false;
      }
      return true;
    }
    
    ends_with :: fn(*mut self, suffix: c_str) -> bool {
      suffix_len := strlen(suffix);
      if self.length < suffix_len then return false;
      for i in 0..suffix_len {
        if self.data[self.length - suffix_len + i] != suffix[i] then return false;
      }
      return true;
    }

  }
}

impl Subscript!<u8> for String {
  subscript :: fn(*const self, idx: u64) -> *const u8 {
    return &const self.data[idx];
  }
  subscript_mut :: fn(*mut self, idx: u64) -> *mut u8 {
    return &mut self.data[idx];
  }
}
impl String {
  // THIS IS JUST A VIEW OF THE CURRENT STRING, PERFORM A CLONE ON THE STR TO GET AN OWNED COPY.
  as_str :: fn(self) -> str {
    return .{
      data: self.data,
      length: self.length,
    }
  }

  is_empty :: fn(self) -> bool => self.length == 0;

  empty :: fn() -> #self {
    return .{};
  }

  front :: fn(*mut self) -> u8 {
    if self.length == 0 then return '\0' as u8;
    return self.data[0];
  }

  back :: fn(*mut self) -> u8 {
    if self.length == 0 then return '\0' as u8;
    return self.data[self.length - 1];
  }
}

impl Eq for String {
  eq :: fn(self, other: #self) -> bool {
    if self.length != other.length then return false;
    for idx in 0..self.length {
      if self[idx] != other[idx] then return false;
    }
    return true;
  }
  neq :: fn(self, other: #self) -> bool {
    return !self.eq(other);
  }
}

impl Iterable!<u8> for String { 
  iter :: fn(*const self) -> Iter!<u8> {
    return .{
      ptr: self.data,
      end: self.data + self.length,
    }
  }
  iter_mut :: fn(*mut self) -> Iter!<*mut u8> {
    return .{
      ptr: self.data,
      end: self.data + self.length,
    }
  }
}

impl As_Char_Slice for String {
  as_char_slice :: fn(self) -> Slice!<u32> {
    return .{
      data: self.data,
      length: self.length / 4, // we do this because we're reinterpreting a c_str as a u32* which effectively packs it and quarters the "length"
    }
  }
}

impl As_Byte_Slice for String {
  as_byte_slice :: fn(self) -> Slice!<u8> {
    return .{
      data: self.data,
      length: self.length
    }
  }
}
