
// TODO: add reverse ranges?

RangeBase :: struct!<V> where V: Eq | IsNumeric {
  begin: V,
  end:   V,
}


// default range for most things.
alias Range :: RangeBase!<s32>;


impl!<T> RangeBase!<T> {
  contains :: fn(self, value: T) -> bool {
    return self.begin <= value && self.end >= value;
  }
}

RangeIter :: struct!<V> where V: Eq | IsNumeric | IsPointer {
  begin: V,
  end:   V,
  idx:   V,
}

RangeIterMut :: struct!<V> where V: Eq| IsNumeric | IsPointer {
  begin: V,
  idx:   V,
  end:   V,
}

impl!<V> Iterator!<V> for RangeIter!<V>  {
  alias Option :: Option!<V>;
  next :: fn(*mut self) -> Option {
    if self.idx == self.end
      then return Option::None();

    value := Option::Some(self.idx);

    if self.begin > self.end {
      self.idx--;
    } else {
      self.idx++;
    }

    return value;
  }
}

impl!<V> Iterator!<*mut V> for RangeIterMut!<V>  {
  alias Option :: Option!<*mut V>;
  next :: fn(*mut self) -> Option {
    if self.idx == self.end
      then return Option::None();

    value := Option::Some(&mut self.idx);

    if self.begin > self.end {
      self.idx--;
    } else {
      self.idx++;
    }

    return value;
  }
}

impl!<V> Iterable for RangeBase!<V> {
  iter :: fn(*const self) -> RangeIter!<V> {
    return .{
      begin: self.begin,
      idx:   self.begin,
      end:   self.end,
    };
  }

  iter_mut :: fn(*mut self) -> RangeIterMut!<V> {
    return .{
      begin: self.begin,
      idx:  self.begin,
      end:  self.end,
    };
  }
}

impl!<V> Eq for RangeBase!<V> {
  eq :: fn(self, right: #self) -> bool {
    return self.begin == right.begin && self.end == right.end;
  }
  neq :: fn(self, right: #self) -> bool {
    return self.begin != right.begin || self.end != right.end;
  }
}
