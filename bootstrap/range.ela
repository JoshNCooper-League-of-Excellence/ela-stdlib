
// TODO: add reverse ranges?

struct RangeBase!<V> where V: Eq | IsNumeric {
  begin: V,
  end:   V,
}


// default range for most things.
type Range :: RangeBase!<s32>;


impl!<T> RangeBase!<T> {
  fn contains(self, value: T) -> bool {
    return self.begin <= value && self.end >= value;
  }
}

struct RangeIter!<V> where V: Eq | IsNumeric | IsPointer {
  begin: V,
  end:   V,
  idx:   V,
}

struct RangeIterMut!<V> where V: Eq| IsNumeric | IsPointer {
  begin: V,
  idx:   V,
  end:   V,
}

impl!<V> Iterator!<V> for RangeIter!<V>  {
  fn next(*mut self) -> Option!<V> {
    if self.idx == self.end
      then return Option!<V>::None;

    value := Option!<V>::Some(self.idx);

    if self.begin > self.end {
      self.idx--;
    } else {
      self.idx++;
    }

    return value;
  }
}

impl!<V> Iterator!<*mut V> for RangeIterMut!<V>  {
  type Option :: Option!<*mut V>;
  fn next(*mut self) -> Option {
    if self.idx == self.end
      then return Option::None;

    value := Option::Some(&mut self.idx);

    if self.begin > self.end {
      self.idx--;
    } else {
      self.idx++;
    }

    return value;
  }
}

impl!<V> Iterable for RangeBase!<V> {
  fn iter(*const self) -> RangeIter!<V> {
    return .{
      begin: self.begin,
      idx:   self.begin,
      end:   self.end,
    };
  }

  fn iter_mut(*mut self) -> RangeIterMut!<V> {
    return .{
      begin: self.begin,
      idx:  self.begin,
      end:  self.end,
    };
  }
}

impl!<V> PartialEq!<RangeBase!<V>> for RangeBase!<V> {
  fn eq(self, right: Self) -> bool {
    return self.begin == right.begin && self.end == right.end;
  }
  fn neq(self, right: Self) -> bool {
    return self.begin != right.begin || self.end != right.end;
  }
}
