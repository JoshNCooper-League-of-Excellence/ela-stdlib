// forward declare panic.
panic :: fn(msg: str);
impl!<_Some> Option!<_Some> {
  is_some :: fn(self) -> bool {
    return self.has_value;
  }

  is_none :: fn(self) -> bool {
    return !self.has_value;
  }

  unwrap :: fn(self) -> _Some {
    if self.has_value {
      return self.s;
    } else {
      default: _Some;
      panic("unwrapped a 'none' option");
      return default;
    }
  }

  Some :: fn(v: _Some) -> #self {
    return .{
      s: v,
      has_value: true
    };
  }
  None :: fn() -> #self {
    return .{
      has_value: false
    }
  }
}
