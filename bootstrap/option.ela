
// forward declare panic.
panic :: fn(msg: str);

impl!<_Some> Option!<_Some> {
  is_some :: fn(self) -> bool {
    if self is Option!<_Some>::Some {
      return true;
    }
    return false;
  }

  is_none :: fn(self) -> bool {
    return !self.is_some();
  }

  unwrap :: fn(self) -> _Some {
    if self is Option!<_Some>::Some(v) {
      return v;
    }
    
    panic("unwrapped a 'none' option");

    default: _Some;
    return default;
  }

  or_else :: fn(self, fallback: _Some) -> _Some {
    if self is Option!<_Some>::Some(v) {
      return v;
    } else {
      return fallback;
    }
  }
}

/* 
  TODO:
  replace these with something like this:
  * alias!<T> Some!<T> :: Option!<T>;
*/

/* 
  This can be inferred, but 
  This only works with an expected type, such as an argument, 
  typed declaration, etc.
*/
@[inline]
Some :: fn!<T>(t: T) -> Option!<T> {
  return Option!<T>::Some(t);
}

// This can be inferred, but 
// This only works with an expected type, such as an argument, 
// typed declaration, etc.
@[inline]
None :: fn!<T>() -> T {
  return T::None;
}