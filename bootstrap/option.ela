
// forward declare panic.
fn panic(msg: str);

impl!<_Some> Option!<_Some> {
  fn is_some(self) -> bool {
    if self is Option!<_Some>::Some {
      return true;
    }
    return false;
  }

  fn is_none(self) -> bool {
    return !self.is_some();
  }

  fn unwrap(self) -> _Some {
    switch is self { 
      Option!<_Some>::Some(v): {
        return v;
      }
      else: {
        panic("unwrapped a 'none' option");
      }
    }

    // TODO! We should have better control flow analysis to where this is not neccesary.
    // ! We need some kind of @[unreachable/!/no_return]
    // ! or a fn () -> ! {...} like rust. this may be easier to analyze.
    default: _Some;
    return default;
  }

  fn or_else(self, fallback: _Some) -> _Some {
    if self is Option!<_Some>::Some(v) {
      return v;
    } else {
      return fallback;
    }
  }

  fn expect(self, func: fn * ()) -> _Some {
    if self.is_none() {
      func();
      default: _Some;
      return default;
    }
    return self.unwrap();
  }
}

/* 
  TODO:
  replace these with something like this:
  * alias!<T> Some!<T> :: Option!<T>;
*/

/* 
  This can be inferred, but 
  This only works with an expected type, such as an argument, 
  typed declaration, etc.
*/
@[inline]
fn Some!<T>(t: T) -> Option!<T> {
  return Option!<T>::Some(t);
}

// This can be inferred, but 
// This only works with an expected type, such as an argument, 
// typed declaration, etc.
@[inline]
fn None!<T>() -> T {
  return T::None;
}