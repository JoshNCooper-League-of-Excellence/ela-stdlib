
@[compiler_feature(Field)]
struct Field {
  name: str,
  _type: *const Type,
  size: u64,
  offset: u64,
  enum_value: s64,   // this is only relevant to children of enum types.   TODO: make Option!<s64>
  discriminant: u32, // This is only relevant to children of choice types. TODO: make Option!<u32>
};

@[compiler_feature(Method)]
struct Method {
  name: str,
  pointer: *mut void,
}

@[compiler_feature(Type)]
struct Type {
  id: s32,                                                          // the integer ID used to identify this _type.
  name: str,
  size: u64,                                                        // sizeof(T)
  flags: u64,                                                       // defined in reflection.ela and emit.cpp, the values of the flags.
  element_type: *const Type,                                        // the _type this _type has a pointer to, is an array of, etc.
  fields: [Field],                                                  // get a slice of struct fields, enum variants.
  traits: [*const Type],                                            // a slice of implemented traits.
  generic_args: [*const Type],                                      // a slice of the generic arguments.
  methods: [Method],                                                // a slice of method function pointers,
};

impl Field {
  fn set!<T, T1>(*const self, target: *mut T, data: T1) {
    for i in 0..sizeof(T1) {
      *((target as *mut u8) + self.offset + i) = *(((&const data) as *const u8) + i);
    }
  }

  fn get!<T>(*const self, source: *const T) -> *mut u8 {
    return source as *mut u8 + self.offset;
  }

  fn as_any(*const self, source: *const u8) -> any {
    return any.{
      ptr: self.get!<u8>(source),
      _type: self._type
    };
  }
}

impl Type {
  fn get_field!<Path>(*const self, name: Path) -> *const Field where Path: AsSlice!<u8> {
    slice := name.as_slice();
    for i in 0..self.fields.length {
      field := &mut self.fields[i];
      string : str = .{data: slice.data, length:  slice.length};
      if field.name == string {
        return field;
      }
    }
    return null;
  }

  fn offset(*const self, member: str) -> u64 {
    for field in self.fields {
      if field.name == member  {
        return field.offset;
      }
    }
    return -1;
  }
}

#flags enum TypeFlags {
  INTEGER,
  FLOAT,
  BOOL,
  STRUCT,
  CHOICE,
  ENUM,
  TUPLE,
  ARRAY,
  FUNCTION,
  POINTER,
  SIGNED,
  UNSIGNED,
  TRAIT,
  DYN,
  UNION,
  FLAGS_ENUM,
}

impl Type  {
  fn is_trait(*const self) -> bool {
    return self.flags & TypeFlags::TRAIT != 0;
  }
  fn is_signed(*const self) -> bool {
    return self.flags & TypeFlags::SIGNED != 0;
  }
  fn is_unsigned(*const self) -> bool {
    return self.flags & TypeFlags::UNSIGNED != 0;
  }
  fn has_no_extension(*const self) -> bool {
    return self.flags & TypeFlags::POINTER == 0 &&
          self.flags & TypeFlags::ARRAY == 0;
  }
  fn is_array(*const self) -> bool {
    return self.flags & TypeFlags::ARRAY != 0;
  }
  fn is_scalar(*const self) -> bool {
    return self.has_no_extension() &&
          (self.flags & TypeFlags::INTEGER != 0 ||
            self.flags & TypeFlags::FLOAT != 0   ||
            self.flags & TypeFlags::BOOL != 0);
  }
  fn is_struct(*const self) -> bool {
    return self.flags & TypeFlags::STRUCT != 0;
  }
  fn is_enum(*const self) -> bool {
    return self.flags & TypeFlags::ENUM != 0;
  }
  fn is_integral(*const self) -> bool {
    return self.flags & TypeFlags::INTEGER != 0;
  }
  fn is_float(*const self) -> bool {
    return self.flags & TypeFlags::FLOAT != 0;
  }
  fn is_bool(*const self) -> bool {
    return self.flags & TypeFlags::BOOL != 0;
  }
  fn is_tuple(*const self) -> bool {
    return self.flags & TypeFlags::TUPLE != 0;
  }
  fn is_function(*const self) -> bool {
    return self.flags & TypeFlags::FUNCTION != 0;
  }
  fn is_pointer(*const self) -> bool {
    return self.flags & TypeFlags::POINTER != 0;
  }
  fn is_choice(*const self) -> bool {
    return self.flags & TypeFlags::CHOICE != 0;
  }
  fn is_union(*const self) -> bool {
    return self.flags & TypeFlags::UNION != 0;
  }
  fn is_flags_enum(*const self) -> bool {
    return self.flags & TypeFlags::FLAGS_ENUM != 0;
  }
}

impl any {
  fn from!<T>(t: *mut T) -> Self {
    return .{
      ptr: t,
      _type: typeof(T),
    }
  }

  // return the pointer behind this any, or if the _type isn't matched,
  // return null.
  fn cast!<T>(*const self) -> *mut T {
    if !_type then _type = typeof(T);
    if _type != self._type then return null;
    return self.ptr as *mut T;
  }

  // an unchecked version of the 'cast' method.
  // this will return junk data, or worse, if you pass in the wrong _type to cast to.
  // use cast anywhere you can, it's much more _type safe.
  fn unwrap!<T>(*const self) -> T {
    return *(self.ptr as *const T);
  }
}

struct ElementIter {
  ptr: *mut u8,
  end: *const u8,
  element_type: *const Type,
}

impl ElementIter {

  // TODO: let's make this a default method for any iterator.
  fn count(*self) -> u64 {
    mut p := self.ptr;
    mut ct: u64 = 0;
    while (*p) {
      p = p + self.element_type.size;
      ct++;
    }
    return ct;
  }
}

impl Iterator!<any> for ElementIter {
  // Advances the iterator to the next element in the collection.
  fn next(*mut self) -> Option!<any> {
    if self.ptr >= self.end {
      return None();
    }
    value := Some(any.{ptr: self.ptr, _type: self.element_type});
    self.ptr += self.element_type.size;
    return value;
  }
}

impl Type {
  fn elements(self, ptr: *const u8) -> ElementIter {
    if self.name.starts_with("List") {
      length_field := find_first_of(self.fields.iter(), null,
        fn (_: *mut void, field: Field) -> bool {
          return field.name.eq("length");
        }
      ).expect(fn() {
        panic("unable to find length field in list type.");
      });

      data_field := find_first_of(self.fields.iter(), null,
        fn (_: *mut void, field: Field) -> bool {
          return field.name.eq("data");
        }
      ).expect(fn() {
        panic("unable to find data field in list type.");
      });

      length := *(length_field.get(ptr) as *const u64);
      data   := *(data_field.get(ptr) as *const *const u8);

      element_type := self.generic_args[0];

      if element_type == null {
        panic("Cannot obtain element iterator -- 'element_type' aka self.generic_args[0] was null. This is a compiler bug");
      }

      end := data + length * element_type.size;
      return .{ptr: data as *mut u8, end: end, element_type: element_type};
    }

    return .{
      ptr: ptr as *mut u8,
      end: ptr + self.size,
      element_type: self.element_type,
    };
  }
}

struct TupleElementIter {
  ptr: *mut u8,
  element_index: u64,
  tuple_type: *const Type,
}

impl Iterator!<any> for TupleElementIter {
  fn next(*mut self) -> Option!<any> {
    if self.element_index >= self.tuple_type.fields.length {
      return None();
    }
    field := self.tuple_type.fields[self.element_index];

    element_type := field._type;
    offset := self.tuple_type.offset(field.name);
    value : any = .{
      ptr: self.ptr + offset,
      _type: element_type
    };
    self.element_index++;
    return Some(value);
  }
}

impl Type {
  fn tuple_elements(*const self, instance: *mut u8) -> TupleElementIter {
    return .{
      ptr: instance,
      element_index: 0,
      tuple_type: self,
    }
  }
}

impl Type {
  fn implements(*const self, trait_name: str) -> bool {
    for _trait in self.traits {
      if _trait.name == trait_name {
        return true;
      }
    }
    return false;
  }
}
