fn panic(msg: str);

#ifndef FREESTANDING {
  impl!<T> List!<T> {
    @[inline]
    fn get_allocator_if_needed(*mut self) {
      if !self.allocator.has_instance() 
        then self.allocator = get_global_allocator();
    }

    @[inline]
    fn clear(*mut self) {
      self.get_allocator_if_needed();
      self.allocator.free(self.data);
      self.capacity = 0;
      self.data = null;
      self.length = 0;
    }

    /*  
      Is the list empty. 
    */
    @[inline]
    fn is_empty(self) -> bool => self.length == 0;

    /* 
      Copy out a sub array. use as_slice if you want a borrowed, un-owning view into the array at a specific range.
    */
    fn subarray(self, range: Range) -> Self {
      len := range.end - range.begin;
      new_data := self.allocator.allocate_array(sizeof(T), len);
      std::c::memcpy(new_data, self.data + range.begin, sizeof(T) * len);
      return .{
        data: new_data,
        length: len,
        capacity: len,
      }
    }
    
    /* 
      You should probably not call this function, and you do not need to for normal push operations.
      In the case you want to shrink your array, you can pass in array.length or whatever you want to shrink to,
      and this will set your length appropriately.
      you can also 'reserve' memory by calling this, with a large value which will force allocate that much but not fill the array.
      use 'initialize' if you want to fill the array up to that size. 
    */
    @[inline]
    fn resize(*mut self, new_capacity: u64) {
      // Truncating.
      if new_capacity < self.capacity && new_capacity < self.length {
        self.length = new_capacity; 
      }
      self.capacity = new_capacity;
      self.get_allocator_if_needed();
      self.data = self.allocator.resize(self.data, sizeof(T), self.capacity);
    }
    
    /* 
      Initalize the array to a specific length, and zero initialize the data.
      useful to create a dynamic of at least num_to_fill length, and have all the elements be valid data.
      Do not use this on an array that is already full of your data, unless you want to zero it out and reset to 
      a specific new size. 
    */
    @[inline]
    fn initialize(*mut self, num_to_fill: u64) {
      self.resize(num_to_fill);
      std::c::memset(self.data, 0, sizeof(T) * self.capacity);
      self.length = num_to_fill;
    }
    
    /* 
      push an element to the array. this will, of course, expand the array if needed.
    */
    @[inline]
    fn push(*mut self, v: T) {
      if self.length + 1 >= self.capacity {
        if self.capacity == 0 then self.capacity = 4;
        self.resize(self.capacity * 2);
      }
      self.data![self.length] = v;
      self.length++;
    }
    
    /* 
      pop an element from the back of the array. this will never deallocate.
    */
    @[inline]
    fn pop(*mut self) -> T {
      value := self.data![self.length - 1];
      self.length -= 1;
      return value;
    }
    
    /*
      push an element to the front of the array. again, of course, this will expand the array and allocate if needed.
    */
    @[inline]
    fn push_front(*mut self, v: T) {
      if self.length + 1 >= self.capacity {
        if self.capacity == 0 {
          self.capacity = 4;
        }
        self.resize(self.capacity * 2);
      }
  
      // Shift elements to the right to make space at the front
      std::c::memmove(self.data + 1, self.data, sizeof(T) * self.length);
  
      // Insert the new value at the front
      self.data![0] = v;
      self.length++;
    }

    /* 
      pop an element from the front of the array. again, this will never de-allocate the old memory it used.
    */
    @[inline]
    fn pop_front(*mut self) -> T {
      value := self.data![0];
      std::c::memmove(self.data, self.data + 1, sizeof(T) * (self.length - 1));
      self.length -= 1;
      return value;
    }
  }

  impl!<T> Clone for List!<T> {
    /* 
      clone the entire array, duplicating all of the memory and copying all of the data into the new array.
    */
    @[inline]
    fn clone(self) -> Self {
      new_data := self.allocator.allocate_array(sizeof(T), self.capacity);
      std::c::memcpy(new_data, self.data, sizeof(T) * self.length);
      return .{
        data: new_data,
        length: self.length,
        capacity: self.capacity,
      }
    } 
  }

  impl!<T> Init!<T> for List!<T> {
    /* 
      construct the list from an initializer list. 
      This is sure to change, but for now, you do have to do the obnoxious:
        `my_list := List!<s32>::init(.[0,1,2,3])`
      or whatever you need.
      
      of course, this allocates. it will default to using the global allocator.
      When we have optional parameters, this will be much more intuitive.
    */
    @[inline]
    fn init(init: InitList!<T>) -> Self {
      mut self: Self;
      self.resize(init.length);
      std::c::memcpy(self.data, init.data, sizeof(T) * init.length);
      self.length = init.length;
      return self;
    }
  }
}

impl!<T> Iterable for List!<T> {
  /*
    Get an iterator to the list.
    the 
      `for .. in ...` 
    syntax will automatically fetch this when you do
      `for v in list`
    but you can also use it manually, such as:
      `for v in list.iter().reverse()` 
    or whatever.

    of course, this is always a view into the list, and holding on to this outside of the 
    guaranteed lifetime of the List!<T> is inherently unsafe.
  */
  @[inline]
  fn iter(*const self) -> Iter!<T> {
    return .{
      ptr: self.data,
      end: (self.data + self.length) as *const T,
    }
  }

  /* 
    Get a mutable iterator.
  */
  @[inline]
  fn iter_mut(*mut self) -> IterMut!<T> {
    return .{
      ptr: self.data,
      end: self.data + self.length,
    }
  }
}

impl!<T> Destroy for List!<T> {

  /* 
    This does not actually destroy any of members in the list. 
    it just empties the list by freeing the memory used to store the elements.
  */
  @[inline]
  fn destroy(*mut self, recursive: bool = true) {
    where T: Destroy {
      if recursive {
        for v in *self {
          v.destroy();
        }
      }
    }
    self.get_allocator_if_needed();
    self.allocator.free(self.data);
    self.data = null;
    self.length = 0;
    self.capacity = 0;
  }
}

impl!<T> Index!<T> for List!<T> {
  fn index(*const self, idx: u64) -> *const T {
    return &const self.data![idx];
  }
  fn index_mut(*mut self, idx: u64) -> *mut T {
    return &mut self.data![idx];
  }
}

impl!<T> List!<T> {
  type OrderingPredicate :: fn(*T, *T) -> bool;

  /*
    Remove an element at a specific index from the list.
    This doesn't deallocate the old memory.
  */
  fn remove_at(*mut self, index: u64) -> bool {
    if index >= self.length {
      return false;
    }

    fn memmove(list: *mut List!<T>, index: u64) {
      if (list.data + index) < (list.data + index + 1) {
        for i in 0..(list.length - index - 1) {
          list.data![index + i] = list.data![index + i + 1];
        }
      } else {
        for i in (list.length - index - 2)..-1 {
          list.data![index + i] = list.data![index + i + 1];
        }
      }
    }
    
    memmove(self, index);

    self.length -= 1;
    return true;
  }
  
  fn find_first_of(self, finder: fn(*T) -> bool) -> *const T {
    for idx in 0..self.length {
      if finder(&const self.data![idx]) {
        return &const self.data![idx];
      }
    }
    return null;
  }
}

impl!<T> List!<T> {
  @[inline]
  fn new(allocator: dyn Allocator) -> List!<T> {
    return .{ 
      allocator: allocator,
    };
  }
  @[inline]
  fn back(self) -> Option!<T> {
    if self.length > 0 {
      return Some(self.data![self.length-1]);
    }
    return None();
  }
  @[inline]
  fn front(self) -> Option!<T> {
    if self.length > 0 {
      return Some(self.data![0]);
    }
    return None();
  }
  @[inline]
  fn back_mut(*mut self) -> Option!<*mut T> {
    if self.length > 0 {
      return Some(&mut self.data![self.length-1]);
    }
    return None();
  }
  @[inline]
  fn front_mut(*mut self) -> Option!<*mut T> {
    if self.length > 0 {
      return Some(&mut self.data![0]);
    }
    return None();
  }
  @[inline]
  fn filter(*const self, filter: fn(*const T) -> bool) -> Self {
    mut list: Self;
    for value in *self {
      if filter(&const value) {
        where T: Clone {
          list.push(value.clone());
        } else {
          list.push(value);
        }
      }
    }
    return list;
  }
}

impl!<T> Enumerable!<T> for List!<T> {
  fn enumerate(self) -> Enumerate!<T, Iter!<T>> {
    return .{
      idx: 0,
      iterator: self.iter(),
    };
  }
  fn enumerate_mut(*mut self) -> Enumerate!<*mut T, IterMut!<T>> {
    return .{
      idx: 0,
      iterator: self.iter_mut(),
    };
  }
}

impl!<T> AsSlice!<T> for List!<T> {
  fn as_slice(self) -> [T] {
    return [T].{
      data: self.data,
      length: self.length
    };
  }
}

#ifndef FREESTANDING {

  impl!<T> List!<T>  {
    type OrderingPredicate :: fn(*const T) -> u32;
    /* 
      return a new list with the order specified by the predicate.
    */
    fn sort(*mut self, predicate: OrderingPredicate) {
      if self.is_empty() {
        return;
      }

      mut swapped: bool;
      mut n := self.length;
      while {
        mut swapped := false;
        for i in 0..(n - 1) {
          a := predicate(&const (*self)[i]);
          b := predicate(&const (*self)[i + 1]);

          if b > a {
            temp := self![i];
            self![i] = self![i + 1];
            self![i + 1] = temp;
            swapped = true;
          }
        }
        if !swapped then break;
        --n;
      }
    }

    type Comparator :: fn(T, T) -> bool;
    /* 
      Check if the list contains an item. This uses the `a == b` operator, so this is only valid
      on scalars (integers, floats, etc), pointers, and types that implement Eq (self == self)

      Right now we don't have a good way to check if a _type is a pointer with an trait and a where constraint, 
      so we can't really put a _type constraint on this function yet. in the future!
    */
    @[inline]
    fn contains(self, seek: T, comparator: Comparator) -> bool {
      for idx in 0..self.length {
        if comparator(self.data![idx], seek) {
          return true;
        }
      }
      return false;
    }

    /* 
      erase the first element from the list that == value;
      this doesn't deallocate the old memory.
    */
    @[inline]
    fn remove(*mut self, seek: T, comparator: Comparator) -> bool {
      for idx in 0..self.length {
        if comparator(self.data![idx], seek) {
          std::c::memmove(self.data + idx, self.data + idx + 1, sizeof(T) * (self.length - idx - 1));
          self.length -= 1;
          return true;
        }
      }
      return false;
    }
  }
}
