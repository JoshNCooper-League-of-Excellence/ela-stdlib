panic :: fn(msg: str);

#ifndef FREESTANDING {
  impl!<T> T[] {

    clear :: fn(*mut self) {
      free(self.data);
      self.capacity = 0;
      self.data = null;
      self.length = 0;
    }

    /*  
      Is the list empty. 
    */
    is_empty :: fn(self) -> bool => self.length == 0;

    /* 
      Copy out a sub array. use as_slice if you want a borrowed, un-owning view into the array at a specific range.
    */
    subarray :: fn(self, range: Range) -> #self {
      len := range.end - range.begin;
      new_data := malloc(sizeof(T) * len);
      memcpy(new_data, self.data + range.begin, sizeof(T) * len);
      return .{
        data: new_data,
        length: len,
        capacity: len,
      }
    }
    
    /* 
      You should probably not call this function, and you do not need to for normal push operations.
      In the case you want to shrink your array, you can pass in array.length or whatever you want to shrink to,
      and this will set your length appropriately.
      you can also 'reserve' memory by calling this, with a large value which will force allocate that much but not fill the array.
      use 'initialize' if you want to fill the array up to that size. 
    */
    resize :: fn(*mut self, new_capacity: u64) {
      // Truncating.
      if new_capacity < self.capacity && new_capacity < self.length {
        self.length = new_capacity; 
      }
      self.capacity = new_capacity;
      self.data = realloc(self.data, sizeof(T) * self.capacity);
    }
    
    /* 
      Initalize the array to a specific length, and zero initialize the data.
      useful to create a dynamic of at least num_to_fill length, and have all the elements be valid data.
      Do not use this on an array that is already full of your data, unless you want to zero it out and reset to 
      a specific new size. 
    */
    initialize :: fn(*mut self, num_to_fill: u64) {
      self.resize(num_to_fill);
      memset(self.data, 0, sizeof(T) * self.capacity);
      self.length = num_to_fill;
    }
    
    /* 
      push an element to the array. this will, of course, expand the array if needed.
    */
    push :: fn(*mut self, v: T) {
      if self.length + 1 >= self.capacity {
        if self.capacity == 0 then self.capacity = 4;
        self.resize(self.capacity * 2);
      }
      self.data[self.length] = v;
      self.length++;
    }
    
    /* 
      pop an element from the back of the array. this will never deallocate.
    */
    pop :: fn(*mut self) -> T {
      value := self.data[self.length - 1];
      self.length -= 1;
      return value;
    }
    
    /*
      push an element to the front of the array. again, of course, this will expand the array and allocate if needed.
    */
    push_front :: fn(*mut self, v: T) {
      if self.length + 1 >= self.capacity {

      if self.capacity == 0 then self.capacity = 4;
        self.resize(self.capacity * 2);
      }

      memmove(self.data + 1, self.data, sizeof(T) * self.length);

      self.data[0] = v;
      self.length++;
    }

    /* 
      pop an element from the front of the array. again, this will never de-allocate the old memory it used.
    */
    pop_front :: fn(*mut self) -> T {
      value := self.data[0];
      memmove(self.data, self.data + 1, sizeof(T) * (self.length - 1));
      self.length -= 1;
      return value;
    }
  }

  impl!<T> Deinit for T[] {

    /* 
      This does not actually deinit any of members in the list. 
      it just empties the list by freeing the memory used to store the elements.
    */
    deinit :: fn(*mut self) {
      free(self.data);
      self.data = null;
      self.length = 0;
      self.capacity = 0;
    }
  }

  impl!<T> Clone for T[] {
    /* 
      clone the entire array, duplicating all of the memory and copying all of the data into the new array.
    */
    clone :: fn(self) -> #self {
      new_data := malloc(sizeof(T) * self.capacity);
      memcpy(new_data, self.data, sizeof(T) * self.length);
      return .{
        data: new_data,
        length: self.length,
        capacity: self.capacity,
      }
    } 
  }

  impl!<T> Init!<T> for T[] {
    /* 
      construct the list from an initializer list. 
      This is sure to change, but for now, you do have to do the obnoxious:
        `my_list := s32[]::init(.[0,1,2,3])`
      or whatever you need.

      of course, this allocates.
    */
    init :: fn(init: InitList!<T>) -> #self {
      mut self: #self;
      self.resize(init.length);
      memcpy(self.data, init.data, sizeof(T) * init.length);
      self.length = init.length;
      return self;
    }
  }

  impl!<T> T[]  {
    alias Comparator :: fn*(T, T) -> bool;
    /* 
      Check if the list contains an item. This uses the `a == b` operator, so this is only valid
      on scalars (integers, floats, etc), pointers, and types that implement Eq (self == self)

      Right now we don't have a good way to check if a type is a pointer with an interface and a where constraint, 
      so we can't really put a type constraint on this function yet. in the future!
    */
    contains :: fn(self, seek: T, comparator: Comparator) -> bool {
      for idx in 0..self.length {
        if comparator(self.data[idx], seek) {
          return true;
        }
      }
      return false;
    }

    /* 
      erase the first element from the list that == value;
      this doesn't deallocate the old memory.
    */
    remove :: fn(*mut self, seek: T, comparator: Comparator) -> bool {
      for idx in 0..self.length {
        if comparator(self.data[idx], seek) {
          memmove(self.data + idx, self.data + idx + 1, sizeof(T) * (self.length - idx - 1));
          self.length -= 1;
          return true;
        }
      }
      return false;
    }
  }
}

impl!<T> Iterable for T[] {
  /*
    Get an iterator to the list.
    the 
      `for .. in ...` 
    syntax will automatically fetch this when you do
      `for v in list`
    but you can also use it manually, such as:
      `for v in list.iter().reverse()` 
    or whatever.

    of course, this is always a view into the list, and holding on to this outside of the 
    guaranteed lifetime of the T[] is inherently unsafe.
  */
  @[inline]
  iter :: fn(*const self) -> Iter!<T> {
    return .{
      ptr: self.data,
      end: (self.data + self.length) as *const T,
    }
  }

  /* 
    Get a mutable iterator.
  */
  @[inline]
  iter_mut :: fn(*mut self) -> IterMut!<T> {
    return .{
      ptr: self.data,
      end: self.data + self.length,
    }
  }
}

impl!<T> Subscript!<T> for T[] {
  subscript :: fn(*const self, idx: u64) -> *const T {
    return &const self.data[idx];
  }
  subscript_mut :: fn(*mut self, idx: u64) -> *mut T {
    return &mut self.data[idx];
  }
}

impl!<T> AsSlice!<T> for T[] {
  /* 
    Take a `slice` or a view into the array, without taking any ownership of the memory we are viewing into.
  */
  as_slice :: fn(self, range: Range) -> Slice!<T> {
    return .{
      data: self.data + range.begin,
      length: range.end - range.begin,
    }
  }
}

#ifndef FREESTANDING {
  impl!<T> T[] {
    alias Ordering_Predicate :: fn * (*const T, *const T) -> bool;

    /* 
      return a new list with the order specified by the predicate.
    */
    order_by :: fn(self, predicate: Ordering_Predicate) -> T[] {
      mut new_list := self.clone();
      for i in 0..new_list.length {
        for j in (i+1)..new_list.length {
          if predicate(&const new_list.data[i], &const new_list.data[j]) {
            temp := new_list.data[i];
            new_list.data[i] = new_list[j];
            new_list.data[j] = temp;
          }
        }
      }
      return new_list;
    }

    // /*
    //   Find the first occurrence of an element in the list that matches the given value.
    //   Returns the index of the element if found, otherwise returns -1.
    // */
    // find :: fn(self, value: T) -> s64 {
    //   for idx in 0..self.length {
    //     if self.data[idx] == value {
    //       return idx as s64;
    //     }
    //   }
    //   return -1;
    // }

    /*
      Remove an element at a specific index from the list.
      This doesn't deallocate the old memory.
    */
    remove_at :: fn(*mut self, index: u64) -> bool {
      if index >= self.length {
        return false;
      }
      memmove(self.data + index, self.data + index + 1, sizeof(T) * (self.length - index - 1));
      self.length -= 1;
      return true;
    }


    find_first_of :: fn(self, finder: fn*(*const T) -> bool) -> *const T {
      for idx in 0..self.length {
        if finder(&const self.data[idx]) {
          return &const self.data[idx];
        }
      }
      return null;
    }
  }
}