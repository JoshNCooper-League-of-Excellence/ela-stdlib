Field :: struct {
  name: c_string,
  type: *const Type,
  size: u64,
  offset: u64,
  enum_value: s64,
};

Type :: struct {
  id: s32,                                                   // the integer ID used to identify this type.
  name: c_string,                                                 // the type's name.
  size: u64,                                                 // sizeof(T)
  flags: u64,                                                // defined in reflection.ela and emit.cpp, the values of the flags.
  fields: Field[],                                           // get a list of struct fields, enum variants.
  elements: fn*(*const u8) -> Element[],                           // get a list of the Elements, which can be used to reflect on arrays.
  element_type: *const Type,                                       // the type this type has a pointer to, is an array of, etc.
};

Element :: struct {
  data: *mut u8,
  type: *const Type,
};

#ifndef FREESTANDING {
  impl Field {
    set :: fn!<T, T1>(*mut self, target: *mut T, data: T1) {
      memcpy((target as *mut u8) + self.offset, (&const data) as *const u8, sizeof(T1));
    }
    get :: fn!<T>(*mut self, source: *const T) -> *mut u8 {
      return ((source) as *mut u8) + self.offset;
    }
  }

  _type_info: *const Type[];

  impl Type {
    get_field :: fn(*mut self, name: c_string) -> *mut Field {
      for *field in self.fields {
        if strcmp(field.name, name) == 0 {
          return field;
        }
      }
      return null;
    }
    
    offset :: fn(*mut self, member: str) -> u64 {
      for field in self.fields {
        if strncmp(field.name, member.data, member.length as s32) == 0  {
          return field.offset;
        }
      }
      return -1;
  }
  }
}

#flags TypeFlags :: enum {
  INTEGER,
  FLOAT,
  BOOL,
  STRING,
  STRUCT,
  TAGGED_UNION,
  ENUM,
  TUPLE,
  ARRAY,
  FUNCTION,
  POINTER,
  SIGNED,
  UNSIGNED,
}

impl Type  {
  is_signed :: fn(*mut self) -> bool {
    return self.flags & TypeFlags::SIGNED != 0;
  }

  is_unsigned :: fn(*mut self) -> bool {
    return self.flags & TypeFlags::UNSIGNED != 0;
  }

  has_no_extension :: fn(*mut self) -> bool {
    return self.flags & TypeFlags::POINTER == 0 &&
          self.flags & TypeFlags::ARRAY == 0;
  }

  is_array :: fn(*mut self) -> bool {
    return self.flags & TypeFlags::ARRAY != 0;
  }

  is_string :: fn(*mut self) -> bool {
    return self.flags & TypeFlags::STRING != 0;
  }

  is_scalar :: fn(*mut self) -> bool {
    return Type::has_no_extension(self) &&
          (self.flags & TypeFlags::INTEGER != 0 ||
            self.flags & TypeFlags::FLOAT != 0   ||
            self.flags & TypeFlags::BOOL != 0    ||
            self.flags & TypeFlags::STRING != 0);
  }

  is_struct :: fn(*mut self) -> bool {
    return self.flags & TypeFlags::STRUCT != 0;
  }

  is_enum :: fn(*mut self) -> bool {
    return self.flags & TypeFlags::ENUM != 0;
  }

  is_integral :: fn(*mut self) -> bool {
    return self.flags & TypeFlags::INTEGER != 0;
  }

  is_float :: fn(*mut self) -> bool {
    return self.flags & TypeFlags::FLOAT != 0;
  }

  is_bool :: fn(*mut self) -> bool {
    return self.flags & TypeFlags::BOOL != 0;
  }

  is_tuple :: fn(*mut self) -> bool {
    return self.flags & TypeFlags::TUPLE != 0;
  }

  is_function :: fn(*mut self) -> bool {
    return self.flags & TypeFlags::FUNCTION != 0;
  }

  is_pointer :: fn(*mut self) -> bool {
    return self.flags & TypeFlags::POINTER != 0;
  }
}

impl any {
  from :: fn!<T>(t: *mut T) -> #self {
    return .{
      ptr: t,
      type: typeof(T),
    }
  }

  // return the pointer behind this any, or if the type isn't matched,
  // return null.
  cast :: fn!<T>(*mut self) -> *mut T {
    if !type then type = typeof(T);
    if type != self.type then return null;
    return self.ptr as *mut T;
  }

  // an unchecked version of the 'cast' method.
  // this will return junk data, or worse, if you pass in the wrong type to cast to.
  // use cast anywhere you can, it's much more type safe.
  unwrap :: fn!<T>(*mut self) -> T {
    return *(self.ptr as *const T);
  }
}

#ifndef FREESTANDING {
  impl any {
    new :: fn!<T, Alloc>(t: T, alloc: Alloc) -> #self where Alloc is Allocator {
      ptr : *mut T = alloc.allocate(sizeof(T));
      *ptr = t;
      return .{
        ptr: ptr,
        type: typeof(T),
      }
    }
  }
  impl Deinit for any {
      // this should only be used for an any created with any::new()
    // clearly because it memcpy's it into place.
    deinit :: fn(*mut self) {
      free(self.ptr);
    }
  }
}
