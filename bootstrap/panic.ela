type Panic_Handler :: fn(str, *mut void);

mut panic_user_arg: *mut void;

#ifndef FREESTANDING {
  import signal;
  mut panic_handler: Panic_Handler = fn(msg: str, arg_ignored: *mut void) {
    std::c::printf("panic(): %s\n"c, msg.data);
    signal::print_backtrace();
    std::c::exit(1);
  };
} else {
  mut panic_handler: Panic_Handler;
}

fn set_panic_handler(handler: Panic_Handler) -> Panic_Handler {
  old := panic_handler;
  panic_handler = handler;
  if panic_handler == old || panic_handler != handler {
    std::c::printf("failed to set panic handler\n"c);
  }
  return old;
}

fn set_panic_user_arg(arg: *mut void) -> *mut void {
  old := panic_user_arg;
  panic_user_arg = arg;
  return old;
}


@[no_return]
fn panic(msg: str) {
  panic_handler(msg, panic_user_arg);
}