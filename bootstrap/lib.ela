// all of your basic types.
#include "typedef.ela";
// many more basic types, mainly interfaces.
#include "interfaces.ela";
// Option!<T>
#include "option.ela";
// Result!<Ok, Err>
#include "result.ela";
// Iterator<T> and Iterable<T>
#include "iter.ela";
// impls for numeric types, mostly marker interfaces.
#include "numeric.ela"; 
// RangeBase!<T> and Range, Range_s32... etc.
#include "range.ela";
// a few libc functions that are used in most programs.
#include "libc.ela";
// dynamic interface for allocator.
#include "memory.ela";
// List<T> aka T[].
#include "list.ela";
// Slice!<T> and SliceMut!<T>, views over memory.
#include "slice.ela";
// str, the default type of a string literal.
#include "str.ela";
// String, heap allocated string.
#include "String.ela";
// generic utilities for reflection
#include "reflection.ela";
// basic hashing functions implemented for numerical and string types.
#include "hash.ela";


#ifndef FREESTANDING {
  assert :: fn(message: str, condition: bool) {
    if !condition {
      printf("\033[1;31massertion failed\033[0m: \033[1;34m\"%s\"\033[0m\n"c, message.data);
      exit(1);
    }
  }

  assert_eq :: fn!<T>(message: str, a: T, b: T) where T: IsNumeric | Eq {
    if a != b {
      // TODO: we should have a better way to do this.
      // I don't want to import format here, probably should just have an 'assert' library.
      printf("\033[1;34mnumerical condition\033[0m :: \033[1;31m%d\033[0m == \033[1;31m%d\033[0m\n"c, a, b);
      printf("\033[1;31massertion failed\033[0m: \033[1;34m\"%s\"\033[0m\n"c, message.data);
      exit(1);
    }
  }

  assert_neq :: fn!<T>(message: str, a: T, b: T) where T: IsNumeric | Eq {
    if a == b {
      // TODO: we should have a better way to do this.
      // I don't want to import format here, probably should just have an 'assert' library.
      printf("numerical condition :: \033[1;31m%d\033[0m==\033[1;31m%d\033[0m\n"c, a, b);
      printf("\033[1;31massertion failed\033[0m: \033[1;34m\"%s\"\033[0m\n"c, message.data);
      exit(1);
    }
  }
}

alias Panic_Handler :: fn *(str);

mut panic_handler: Panic_Handler;

set_panic_handler :: fn(handler: Panic_Handler) {
  panic_handler = handler;
}

panic :: fn(msg: str) {
  if !panic_handler {
    #ifndef FREESTANDING {
      panic_handler = fn(msg: str) {
        printf("panic(): %s\n"c, msg.data);
        exit(1);
      };
    } else {
      panic_handler = fn(msg: str) {
        // idk, segfault on panic?
        n : *mut s32 = null;
        *n = 10;
      }
    }
  }
  panic_handler(msg);
}

Env :: struct {
  args_slice: Slice!<str>,
};
impl Env {
  current :: fn() -> *mut #self {
    #static mut self: #self;
    return &mut self;
  }

  /* 
    The args are passed by the C runtime,
    and never need to be deallocated. Nor should they be
    mutated.
  */
  args :: fn() -> Slice!<str> {
    return #self::current().args_slice;
  }
  
  initialize :: fn(argc: s32, argv: *const c_str) {
    self := #self::current();
    mut data : *mut str = malloc(argc * sizeof(str));
    
    for i in 0..argc {
      data[i] = .{
        data: argv[i],
        length: strlen(argv[i]),
      };
    }

    self.args_slice = .{
      data: data,
      length: argc,
    };
  }
}

impl AsCharSlice for u32 {
  as_char_slice :: fn(self) -> Slice!<u32> {
    #static mut chars : char[2] = .[
      '\0', '\0'
    ];
    chars[0] = self;
    return .{
      data: chars,
      length: 1,
    }
  }
}

impl AsByteSlice for u32 {
  as_byte_slice :: fn(self) -> Slice!<u8> {
    #static mut chars : u8[2] = .[
      '\0', '\0'
    ];
    chars[0] = self;
    return .{
      data: chars,
      length: 1,
    }
  }
}

#ifndef FREESTANDING {
  /* 
    a way to allocate while also providing an initialize value.
    useful for doing things like 

    v: Vec3* = new(.{
      x: 0.0,
      y: 250.0,
      z: 3000.0
    });

    instead of 

    v: Vec3* = malloc(sizeof(Vec3));
    *v = .{
      x: 0.0,
      y: 250.0,
      z: 3000.0
    };
  */
  new :: fn!<T>(initial_value: T) -> *mut T {
    ptr: *mut T = malloc(sizeof(T));
    *ptr = initial_value;
    return ptr;
  }
}


