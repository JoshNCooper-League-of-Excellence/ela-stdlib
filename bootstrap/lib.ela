// flags enum utils. such as Flags trait, a default impl for simple flag manipulation methods.
#include "flags.ela";
// all of your basic types.
#include "typedef.ela"
// many more basic types, mainly traits.
#include "traits.ela";
// Option!<T>
#include "option.ela";
// Result!<Ok, Err>
#include "result.ela";
// Iterator<T> and Iterable<T>
#include "iter.ela";
// impls for numeric types, mostly marker traits.
#include "numeric.ela"; 
// RangeBase!<T> and Range, Range_s32... etc.
#include "range.ela";
// a few libc functions that are used in most programs.
#include "libc.ela";
// dynamic trait for allocator.
#include "memory.ela";
// List!<T>
#include "list.ela";
// Iterators and such for InitList!<T>
#include "init_list.ela";
// [T] and SliceMut!<T>, views over memory.
#include "slice.ela";
// utils that both string types use, avoiding some redundancy
#include "stringutils.ela";
// str, the default _type of a string literal.
#include "str.ela";
// String, heap allocated string.
#include "String.ela";
// generic utilities for reflection
#include "reflection.ela";
// basic hashing functions implemented for numerical and string types.
#include "hash.ela";
// char utils
#include "char.ela";

type Panic_Handler :: fn(str);

#ifndef FREESTANDING {
  mut panic_handler: Panic_Handler = fn(msg: str) {
    std::c::printf("panic(): %s\n"c, msg.data);
    std::c::exit(1);
  };
} else {
  mut panic_handler: Panic_Handler;
}

fn set_panic_handler(handler: Panic_Handler) {
  panic_handler = handler;
}

@[no_return]
fn panic(msg: str) {
  panic_handler(msg);
}

struct Env {
  args_slice: [str],
};

impl Env {
  fn current() -> *mut Self {
    #static mut self: Self;
    return &mut self;
  }

  /* 
    The args are passed by the C runtime,
    and never need to be deallocated. Nor should they be
    mutated.
  */
  fn args() -> [str] {
    return Env::current().args_slice;
  }
  
  fn env_strlen(s: *const u8) -> u32 {
    mut i := 0;
    while *s {
      ++i;
      ++s;
    }
    return i;
  }

  fn initialize(argc: s32, argv: *const c_str) {
    self := Env::current();

    #ifndef FREESTANDING {
      mut data : *mut str = std::c::malloc(argc * sizeof(str));
    } else {
      #static mut data : [str; 48]; // This is just a hack. idk what a reasonable value to put here is.
    }
    

    for i in 0..argc {
      data![i] = .{
        data: argv![i],
        length: Env::env_strlen(argv![i]),
      };
    }

    self.args_slice = .{
      data: data,
      length: argc,
    };
  }
}

impl AsSlice!<u8> for u32 {
  fn as_slice(self) -> [u8] {
    #static mut chars : [u8; 2] = .[
      '\0', '\0'
    ];
    chars[0] = self;
    return .{
      data: chars,
      length: 1,
    }
  }
}

#ifndef FREESTANDING {
  /* 
    a way to allocate while also providing an initialize value.
    useful for doing things like 

    v: Vec3* = new(.{
      x: 0.0,
      y: 250.0,
      z: 3000.0
    });

    instead of 

    v: Vec3* = malloc(sizeof(Vec3));
    *v = .{
      x: 0.0,
      y: 250.0,
      z: 3000.0
    };
  */
  fn new!<T>(initial_value: T) -> *mut T {
    ptr: *mut T = get_global_allocator().allocate(sizeof(T));
    *ptr = initial_value;
    return ptr;
  }
}


fn default!<T>() -> T {
  return .{};
}

// COMPILER IMPLEMENTED TRAITS FOR PATTERN MATCHING TYPES
/* 

? Most of these are just type descriptors, and are completely self explanatory by name.
  * trait IsFnPtr {}
  * trait IsFn {}
  * trait IsTuple {}
  * trait IsStruct {}
  * trait IsEnum {}
  * trait IsChoice {}
  * trait IsDyn {}
  * trait IsUnion {}
  * trait IsArray {}
  * trait IsPointer {}
  * trait IsMutPointer {}
  * trait IsConstPointer {}
  * trait IsSlice {}
  * trait IsSliceMut {}


? These are special traits, that arent as self explanatory.
  * trait Blittable {}

   - Blittable types are those which contain no pointers or references, or any subtypes that aren't blittable.
     Meaning they can be memcpy'd into a block of memory with no special handling.

   An example of a blittable type:
    struct T {
      x: s32,
      y: s32,
      z: s32,
      f: [f32; 100]             <- Ok.
      g: AnotherBlittableType   <- Ok.
    }

    note: 
      fixed arrays are not considered a pointer since the instantiated struct has to allocate all of the memory required to store it.
      subtypes don't disqualify the parent as long as the subtype is also blittable.

   An example of a _non_ blittable type:
    struct T {
      x: s32,
      y: *s32,            <- pointer disqualifies
      list: List!<s32>    <- contains a pointer, disqualified.
    }

    The most common use cases for checking against Blittable are probably
     - binary serialization, 
     - interop into managed environments,
     - copying buffers of data into a new owned buffer, etc.
*/
