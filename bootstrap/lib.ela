#include "typedef.ela"
#include "interfaces.ela";
#include "numeric.ela"; // impls for numeric types.
#include "range.ela";
#include "libc.ela";

#include "list.ela";
#include "slice.ela";

#include "str.ela";
#include "String.ela";
#include "reflection.ela";
#include "option.ela";
#include "result.ela";

#ifndef FREESTANDING {
  assert :: fn(message: str, condition: bool) {
    if !condition {
      printf("assertion failed: %s\n"c, message.data);
      exit(1);
    }
  }

  assert_eq :: fn!<T>(message: str, a: T, b: T) where T is Is_Numeric | Eq {
    if a != b {
      printf("assertion failed: %s\n"c, message.data);
      exit(1);
    }
  }

  assert_neq :: fn!<T>(message: str, a: T, b: T) where T is Is_Numeric | Eq {
    if a == b {
      printf("assertion failed: %s\n"c, message.data);
      exit(1);
    }
  }
}

alias Panic_Handler :: fn *(str);

panic_handler: Panic_Handler;

set_panic_handler :: fn(handler: Panic_Handler) {
  panic_handler = handler;
}

panic :: fn(msg: str) {
  if !panic_handler {
    #ifndef FREESTANDING {
      panic_handler = fn(msg: str) {
        printf("panic(): %s\n"c, msg.data);
        exit(1);
      };
    } else {
      panic_handler = fn(msg: str) {
        // idk, segfault on panic?
        n : s32 * = null;
        *n = 10;
      }
    }
  }
  panic_handler(msg);
}

#ifdef FREESTANDING  {
  Env :: struct {
    m_args: str*,
    length: u64,
  };
  impl Env {
    current :: fn() -> #self* {
      #static self: #self;
      return &self;
    }
    args :: fn(self*) -> (str*, u64) {
      return (self.m_args, self.length);
    }
    initialize :: fn(argc: s32, argv: str*) {
      self := #self::current();
      self.m_args = argv;
      self.length = argc;
    }
  }
} else {
  Env :: struct {
    m_args: str[],
  };
  impl Env {
    current :: fn() -> #self* {
      #static self: #self;
      return &self;
    }
    args :: fn() -> str[] {
      return #self::current().m_args.clone();
    }
    initialize :: fn(argc: s32, argv: str*) {
      self := #self::current();
      for i in 0..argc {
        self.m_args.push(argv[i]);
      }
    }
  }
}

impl As_Char_Slice for u32 {
  as_char_slice :: fn(self) -> Slice!<u32> {
    #static chars : char[2] = .[
      '\0', '\0'
    ];
    chars[0] = self;
    return .{
      data: chars,
      length: 1,
    }
  }
}

impl As_Byte_Slice for u32 {
  as_byte_slice :: fn(self) -> Slice!<u8> {
    #static chars : u8[2] = .[
      '\0', '\0'
    ];
    chars[0] = self;
    return .{
      data: chars,
      length: 1,
    }
  }
}

#ifndef FREESTANDING {
  /* 
    a way to allocate while also providing an initialize value.
    useful for doing things like 

    v: Vec3* = new(.{
      x: 0.0,
      y: 250.0,
      z: 3000.0
    });

    instead of 

    v: Vec3* = malloc(sizeof(Vec3));
    *v = .{
      x: 0.0,
      y: 250.0,
      z: 3000.0
    };
  */

  new :: fn!<T>(initial_value: T) -> T* {
    ptr: T* = malloc(sizeof(T));
    *ptr = initial_value;
    return ptr;
  }
}

Indexed_Enumerator :: struct!<Value_Type> {
  slice: Slice!<Value_Type>,
  index: u32,
}

impl!<Value_Type> Enumerator!<(u32, Value_Type)> for Indexed_Enumerator!<Value_Type> {
  current :: fn(self) -> (u32, Value_Type) {
    return (self.index, self.slice.data[self.index]);
  }
  done :: fn(self) -> bool {
    return self.index >= self.slice.length;
  }
  next :: fn(self*) -> void { 
    self.index++;
  }
}

impl!<Value_Type> Value_Type[] {
  indexed :: fn(self*) -> Indexed_Enumerator!<Value_Type> {
    return .{
      index: 0,
      slice: .{
        data: self.data,
        length: self.length
      },
    };
  }
}
