// flags enum utils. such as Flags trait, a default impl for simple flag manipulation methods.
#include "flags.ela";
// all of your basic types.
#include "typedef.ela"
// many more basic types, mainly traits.
#include "traits.ela";
// Option!<T>
#include "option.ela";
// Result!<Ok, Err>
#include "result.ela";
// Iterator<T> and Iterable<T>
#include "iter.ela";
// impls for numeric types, mostly marker traits.
#include "numeric.ela"; 
// RangeBase!<T> and Range, Range_s32... etc.
#include "range.ela";
// a few libc functions that are used in most programs.
#include "libc.ela";
// dynamic trait for allocator.
#include "memory.ela";
// List!<T>
#include "list.ela";
// Iterators and such for InitList!<T>
#include "init_list.ela";
// [T] and SliceMut!<T>, views over memory.
#include "slice.ela";
// utils that both string types use, avoiding some redundancy
#include "stringutils.ela";
// str, the default _type of a string literal.
#include "str.ela";
// String, heap allocated string.
#include "String.ela";
// generic utilities for reflection
#include "reflection.ela";
// basic hashing functions implemented for numerical and string types.
#include "hash.ela";
// char utils
#include "char.ela";


#ifndef FREESTANDING {
  fn assert(message: str, condition: bool) {
    if !condition {
      std::c::printf("\033[1;31massertion failed\033[0m: \033[1;34m\"%s\"\033[0m\n"c, message.data);
      std::c::exit(1);
    }
  }

  fn assert_eq!<T>(message: str, a: T, b: T) where T: IsNumeric | Eq {
    if a != b {
      // TODO: we should have a better way to do this.
      // I don't want to import format here, probably should just have an 'assert' library.
      std::c::printf("\033[1;34mnumerical condition\033[0m :: \033[1;31m%d\033[0m == \033[1;31m%d\033[0m\n"c, a, b);
      std::c::printf("\033[1;31massertion failed\033[0m: \033[1;34m\"%s\"\033[0m\n"c, message.data);
      std::c::exit(1);
    }
  }

  fn assert_neq!<T>(message: str, a: T, b: T) where T: IsNumeric | Eq {
    if a == b {
      // TODO: we should have a better way to do this.
      // I don't want to import format here, probably should just have an 'assert' library.
      std::c::printf("numerical condition :: \033[1;31m%d\033[0m==\033[1;31m%d\033[0m\n"c, a, b);
      std::c::printf("\033[1;31massertion failed\033[0m: \033[1;34m\"%s\"\033[0m\n"c, message.data);
      std::c::exit(1);
    }
  }
}

type Panic_Handler :: fn(str);


#ifndef FREESTANDING {
  mut panic_handler: Panic_Handler = fn(msg: str) {
    std::c::printf("panic(): %s\n"c, msg.data);
    std::c::exit(1);
  };
} else {
  mut panic_handler: Panic_Handler;
}

fn set_panic_handler(handler: Panic_Handler) {
  panic_handler = handler;
}

@[no_return]
fn panic(msg: str) {
  panic_handler(msg);
}

struct Env {
  args_slice: [str],
};
impl Env {
  fn current() -> *mut Self {
    #static mut self: Self;
    return &mut self;
  }

  /* 
    The args are passed by the C runtime,
    and never need to be deallocated. Nor should they be
    mutated.
  */
  fn args() -> [str] {
    return Env::current().args_slice;
  }
  
  fn env_strlen(s: *const u8) -> u32 {
    mut i := 0;
    while *s {
      ++i;
      ++s;
    }
    return i;
  }

  fn initialize(argc: s32, argv: *const c_str) {
    self := Env::current();

    #ifndef FREESTANDING {
      mut data : *mut str = std::c::malloc(argc * sizeof(str));
    } else {
      #static mut data : str[48]; // This is just a hack. idk what a reasonable value to put here is.
    }
    

    for i in 0..argc {
      data![i] = .{
        data: argv![i],
        length: Env::env_strlen(argv![i]),
      };
    }

    self.args_slice = .{
      data: data,
      length: argc,
    };
  }
}

impl AsSlice!<u8> for u32 {
  fn as_slice(self) -> [u8] {
    #static mut chars : [u8; 2] = .[
      '\0', '\0'
    ];
    chars[0] = self;
    return .{
      data: chars,
      length: 1,
    }
  }
}

#ifndef FREESTANDING {
  /* 
    a way to allocate while also providing an initialize value.
    useful for doing things like 

    v: Vec3* = new(.{
      x: 0.0,
      y: 250.0,
      z: 3000.0
    });

    instead of 

    v: Vec3* = malloc(sizeof(Vec3));
    *v = .{
      x: 0.0,
      y: 250.0,
      z: 3000.0
    };
  */
  fn new!<T>(initial_value: T) -> *mut T {
    ptr: *mut T = get_global_allocator().allocate(sizeof(T));
    *ptr = initial_value;
    return ptr;
  }
}


fn default!<T>() -> T {
  return .{};
}
