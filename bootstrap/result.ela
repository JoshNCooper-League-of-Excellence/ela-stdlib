
impl!<_Ok, _Err> Result!<_Ok, _Err> {
  fn unwrap(self) -> _Ok {
    if self is Result!<_Ok, _Err>::Ok(ok) {
      return ok;
    }
    panic("called 'unwrap' on an Err result");
    default: _Ok;
    return default;
  }

  fn expect(self, handler: fn(_Err)) -> _Ok {
    if self is Result!<_Ok, _Err>::Err(err) {
      handler(err);
      panic("unwrapped a 'Err' result.");
    } 
    return self.unwrap();
  }

  fn is_ok(self) -> bool {
    if self is Result!<_Ok, _Err>::Ok {
      return true;
    }
    return false;
  }

  fn is_err(self) -> bool {
    if self is Result!<_Ok, _Err>::Err {
      return true;
    }
    return false;
  }

  // we can use this to propagate the error/ok into a new result _type,
  // to create a hierarchy
  // for example
  /* 
      fn getter(..) -> Result!<(), String> ... // this function returns a Result that has a String for an error.

      fn other(..) -> Result!<s32, String> ... // this also returns a result that has a string for an error, but
      they don't match. so,

      in other:

      fn other(..) -> Result!<s32, String> {
        result := getter();

        if result.is_err() {
          return result.propagate(); // this coerces the Result!<(), String> into Result!<s32, String>
        }

      }
  */
  fn propagate!<NewErrorT>(self) -> NewErrorT {
    if self is Result!<_Ok, _Err>::Err(err) {
      return NewErrorT::Err(err);
    }
    default: NewErrorT;
    return default;
  }

  // this does the same thing as propagate, but it just does it for the ok.
  // I don't know good names for these, so obviously suggestions are welcome
  fn coerce!<NewOkT>(self) -> NewOkT {
    if self is Result!<_Ok, _Err>::Err(err) {
      return NewErrorT::Ok(err);
    }
    default: NewErrorT;
    return default;
  }
}

impl!<_Ok, _Err> Destroy for Result!<_Ok, _Err> {
  fn destroy(*mut self, recursive: bool = false) {
    where _Ok: Destroy {
      if self is Result!<_Ok, _Err>::Ok(ok) {
        ok.destroy(recursive);
      }
    }
    where _Err: Destroy {
      if self is Result!<_Ok, _Err>::Err(err) {
        err.destroy(recursive);
      }
    }
  }
}