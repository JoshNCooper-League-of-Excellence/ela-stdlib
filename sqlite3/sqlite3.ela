/*
  These bindings were auto generated by 'ela-bindings-generator', from 'main.c' at 2025-07-07 11:15:32. 
*/

#c_flags " -lsqlite3 "

sqlite3_version: *mut u8;
extern fn sqlite3_libversion() -> *u8;
extern fn sqlite3_sourceid() -> *u8;
extern fn sqlite3_libversion_number() -> s32;
extern fn sqlite3_compileoption_used(zOptName: *u8) -> s32;
extern fn sqlite3_compileoption_get(N: s32) -> *u8;
extern fn sqlite3_threadsafe() -> s32;

struct sqlite3_snapshot {
  hidden: [u8; 48],
};
struct sqlite3 {}
struct sqlite3_rtree_geometry {}
struct sqlite3_rtree_query_info {}
type sqlite3_rtree_dbl :: f64;
struct Fts5ExtensionApi {}
struct Fts5Context {}
struct Fts5PhraseIter {}
struct Fts5Tokenizer {}
struct fts5_tokenizer_v2 {}
struct fts5_tokenizer {}
struct fts5_api {}
struct sqlite3_file {}
struct sqlite3_io_methods {}
struct sqlite3_mem_methods {}
struct sqlite3_mutex {}
struct sqlite3_api_routines {}
struct sqlite3_vfs {}
type sqlite3_syscall_ptr :: fn() -> void;
type sqlite3_callback :: fn(*mut void, s32, *mut *mut u8, *mut *mut u8) -> s32;
struct sqlite3_stmt {}
struct sqlite3_value {}
struct sqlite3_context {}
type sqlite3_destructor_type :: fn(*mut void) -> void;
sqlite3_temp_directory: *mut u8;
sqlite3_data_directory: *mut u8;
struct sqlite3_vtab {}
struct sqlite3_index_info {}
struct sqlite3_vtab_cursor {}
struct sqlite3_module {}
struct sqlite3_index_aint {
  iColumn: s32,
  op: u8,
  usable: u8,
  iTermOffset: s32,
};
struct sqlite3_index_orderby {
  iColumn: s32,
  desc: u8,
};
struct sqlite3_index_aint_usage {
  argvIndex: s32,
  omit: u8,
};
struct sqlite3_blob {}
struct sqlite3_mutex_methods {}
struct sqlite3_str {}
struct sqlite3_pcache {}
struct sqlite3_pcache_page {}
struct sqlite3_pcache_methods2 {}
struct sqlite3_pcache_methods {}
struct sqlite3_backup {}
type fts5_extension_function :: fn(*Fts5ExtensionApi, *mut Fts5Context, *mut sqlite3_context, s32, *mut *mut sqlite3_value) -> void;


extern fn sqlite3_close(param0: *mut sqlite3) -> s32;
extern fn sqlite3_close_v2(param0: *mut sqlite3) -> s32;
extern fn sqlite3_exec(param0: *mut sqlite3, sql: *u8, callback: fn(*mut void, s32, *mut *mut u8, *mut *mut u8) -> s32, param3: *mut void, errmsg: *mut *mut u8) -> s32;
extern fn sqlite3_initialize() -> s32;
extern fn sqlite3_shutdown() -> s32;
extern fn sqlite3_os_init() -> s32;
extern fn sqlite3_os_end() -> s32;
extern fn sqlite3_config(param0: s32) -> s32;
extern fn sqlite3_db_config(param0: *mut sqlite3, op: s32) -> s32;
extern fn sqlite3_extended_result_codes(param0: *mut sqlite3, onoff: s32) -> s32;
extern fn sqlite3_last_insert_rowid(param0: *mut sqlite3) -> s64;
extern fn sqlite3_set_last_insert_rowid(param0: *mut sqlite3, param1: s64) -> void;
extern fn sqlite3_changes(param0: *mut sqlite3) -> s32;
extern fn sqlite3_changes64(param0: *mut sqlite3) -> s64;
extern fn sqlite3_total_changes(param0: *mut sqlite3) -> s32;
extern fn sqlite3_total_changes64(param0: *mut sqlite3) -> s64;
extern fn sqlite3_interrupt(param0: *mut sqlite3) -> void;
extern fn sqlite3_is_interrupted(param0: *mut sqlite3) -> s32;
extern fn sqlite3_complete(sql: *u8) -> s32;
extern fn sqlite3_complete16(sql: *void) -> s32;
extern fn sqlite3_busy_handler(param0: *mut sqlite3, param1: fn(*mut void, s32) -> s32, param2: *mut void) -> s32;
extern fn sqlite3_busy_timeout(param0: *mut sqlite3, ms: s32) -> s32;
extern fn sqlite3_get_table(db: *mut sqlite3, zSql: *u8, pazResult: *mut *mut *mut u8, pnRow: *mut s32, pnColumn: *mut s32, pzErrmsg: *mut *mut u8) -> s32;
extern fn sqlite3_free_table(result: *mut *mut u8) -> void;
extern fn sqlite3_mprintf(param0: *u8) -> *mut u8;
extern fn sqlite3_vmprintf(param0: *u8, param1: va_list) -> *mut u8;
extern fn sqlite3_snprintf(param0: s32, param1: *mut u8, param2: *u8) -> *mut u8;
extern fn sqlite3_vsnprintf(param0: s32, param1: *mut u8, param2: *u8, param3: va_list) -> *mut u8;
extern fn sqlite3_malloc(param0: s32) -> *mut void;
extern fn sqlite3_malloc64(param0: u64) -> *mut void;
extern fn sqlite3_realloc(param0: *mut void, param1: s32) -> *mut void;
extern fn sqlite3_realloc64(param0: *mut void, param1: u64) -> *mut void;
extern fn sqlite3_free(param0: *mut void) -> void;
extern fn sqlite3_msize(param0: *mut void) -> u64;
extern fn sqlite3_memory_used() -> s64;
extern fn sqlite3_memory_highwater(resetFlag: s32) -> s64;
extern fn sqlite3_randomness(N: s32, P: *mut void) -> void;
extern fn sqlite3_set_authorizer(param0: *mut sqlite3, xAuth: fn(*mut void, s32, *u8, *u8, *u8, *u8) -> s32, pUserData: *mut void) -> s32;
extern fn sqlite3_trace(param0: *mut sqlite3, xTrace: fn(*mut void, *u8) -> void, param2: *mut void) -> *mut void;
extern fn sqlite3_profile(param0: *mut sqlite3, xProfile: fn(*mut void, *u8, u64) -> void, param2: *mut void) -> *mut void;
extern fn sqlite3_trace_v2(param0: *mut sqlite3, uMask: u32, xCallback: fn(u32, *mut void, *mut void, *mut void) -> s32, pCtx: *mut void) -> s32;
extern fn sqlite3_progress_handler(param0: *mut sqlite3, param1: s32, param2: fn(*mut void) -> s32, param3: *mut void) -> void;
extern fn sqlite3_open(filename: *u8, ppDb: *mut *mut sqlite3) -> s32;
extern fn sqlite3_open16(filename: *void, ppDb: *mut *mut sqlite3) -> s32;
extern fn sqlite3_open_v2(filename: *u8, ppDb: *mut *mut sqlite3, flags: s32, zVfs: *u8) -> s32;
extern fn sqlite3_uri_parameter(z: c_str, zParam: *u8) -> *u8;
extern fn sqlite3_uri_boolean(z: c_str, zParam: *u8, bDefault: s32) -> s32;
extern fn sqlite3_uri_int64(param0: c_str, param1: *u8, param2: s64) -> s64;
extern fn sqlite3_uri_key(z: c_str, N: s32) -> *u8;
extern fn c_str_database(param0: c_str) -> *u8;
extern fn c_str_journal(param0: c_str) -> *u8;
extern fn c_str_wal(param0: c_str) -> *u8;
extern fn sqlite3_database_file_object(param0: *u8) -> *mut sqlite3_file;
extern fn sqlite3_create_filename(zDatabase: *u8, zJournal: *u8, zWal: *u8, nParam: s32, azParam: *mut *u8) -> c_str;
extern fn sqlite3_free_filename(param0: c_str) -> void;
extern fn sqlite3_errcode(db: *mut sqlite3) -> s32;
extern fn sqlite3_extended_errcode(db: *mut sqlite3) -> s32;
extern fn sqlite3_errmsg(param0: *mut sqlite3) -> *u8;
extern fn sqlite3_errmsg16(param0: *mut sqlite3) -> *void;
extern fn sqlite3_errstr(param0: s32) -> *u8;
extern fn sqlite3_error_offset(db: *mut sqlite3) -> s32;

extern fn sqlite3_limit(param0: *mut sqlite3, id: s32, newVal: s32) -> s32;
extern fn sqlite3_prepare(db: *mut sqlite3, zSql: *u8, nByte: s32, ppStmt: *mut *mut sqlite3_stmt, pzTail: *mut *u8) -> s32;
extern fn sqlite3_prepare_v2(db: *mut sqlite3, zSql: *u8, nByte: s32, ppStmt: *mut *mut sqlite3_stmt, pzTail: *mut *u8) -> s32;
extern fn sqlite3_prepare_v3(db: *mut sqlite3, zSql: *u8, nByte: s32, prepFlags: u32, ppStmt: *mut *mut sqlite3_stmt, pzTail: *mut *u8) -> s32;
extern fn sqlite3_prepare16(db: *mut sqlite3, zSql: *void, nByte: s32, ppStmt: *mut *mut sqlite3_stmt, pzTail: *mut *void) -> s32;
extern fn sqlite3_prepare16_v2(db: *mut sqlite3, zSql: *void, nByte: s32, ppStmt: *mut *mut sqlite3_stmt, pzTail: *mut *void) -> s32;
extern fn sqlite3_prepare16_v3(db: *mut sqlite3, zSql: *void, nByte: s32, prepFlags: u32, ppStmt: *mut *mut sqlite3_stmt, pzTail: *mut *void) -> s32;
extern fn sqlite3_sql(pStmt: *mut sqlite3_stmt) -> *u8;
extern fn sqlite3_expanded_sql(pStmt: *mut sqlite3_stmt) -> *mut u8;
extern fn sqlite3_stmt_readonly(pStmt: *mut sqlite3_stmt) -> s32;
extern fn sqlite3_stmt_isexplain(pStmt: *mut sqlite3_stmt) -> s32;
extern fn sqlite3_stmt_explain(pStmt: *mut sqlite3_stmt, eMode: s32) -> s32;
extern fn sqlite3_stmt_busy(param0: *mut sqlite3_stmt) -> s32;

extern fn sqlite3_bind_blob(param0: *mut sqlite3_stmt, param1: s32, param2: *void, n: s32, param4: fn(*mut void) -> void) -> s32;
extern fn sqlite3_bind_blob64(param0: *mut sqlite3_stmt, param1: s32, param2: *void, param3: u64, param4: fn(*mut void) -> void) -> s32;
extern fn sqlite3_bind_double(param0: *mut sqlite3_stmt, param1: s32, param2: f64) -> s32;
extern fn sqlite3_bind_int(param0: *mut sqlite3_stmt, param1: s32, param2: s32) -> s32;
extern fn sqlite3_bind_int64(param0: *mut sqlite3_stmt, param1: s32, param2: s64) -> s32;
extern fn sqlite3_bind_null(param0: *mut sqlite3_stmt, param1: s32) -> s32;

// Destructor (param4) is not actually a u64, see the comments at `const TRANSIENT: u64 = 0;` for explanation
extern fn sqlite3_bind_text(param0: *mut sqlite3_stmt, param1: s32, param2: *u8, param3: s32, param4: u64) -> s32;

extern fn sqlite3_bind_text16(param0: *mut sqlite3_stmt, param1: s32, param2: *void, param3: s32, param4: fn(*mut void) -> void) -> s32;
extern fn sqlite3_bind_text64(param0: *mut sqlite3_stmt, param1: s32, param2: *u8, param3: u64, param4: fn(*mut void) -> void, encoding: u8) -> s32;
extern fn sqlite3_bind_value(param0: *mut sqlite3_stmt, param1: s32, param2: *sqlite3_value) -> s32;
extern fn sqlite3_bind_pointer(param0: *mut sqlite3_stmt, param1: s32, param2: *mut void, param3: *u8, param4: fn(*mut void) -> void) -> s32;
extern fn sqlite3_bind_zeroblob(param0: *mut sqlite3_stmt, param1: s32, n: s32) -> s32;
extern fn sqlite3_bind_zeroblob64(param0: *mut sqlite3_stmt, param1: s32, param2: u64) -> s32;
extern fn sqlite3_bind_parameter_count(param0: *mut sqlite3_stmt) -> s32;
extern fn sqlite3_bind_parameter_name(param0: *mut sqlite3_stmt, param1: s32) -> *u8;
extern fn sqlite3_bind_parameter_index(param0: *mut sqlite3_stmt, zName: *u8) -> s32;
extern fn sqlite3_clear_bindings(param0: *mut sqlite3_stmt) -> s32;
extern fn sqlite3_column_count(pStmt: *mut sqlite3_stmt) -> s32;
extern fn sqlite3_column_name(param0: *mut sqlite3_stmt, N: s32) -> *u8;
extern fn sqlite3_column_name16(param0: *mut sqlite3_stmt, N: s32) -> *void;
extern fn sqlite3_column_database_name(param0: *mut sqlite3_stmt, param1: s32) -> *u8;
extern fn sqlite3_column_database_name16(param0: *mut sqlite3_stmt, param1: s32) -> *void;
extern fn sqlite3_column_table_name(param0: *mut sqlite3_stmt, param1: s32) -> *u8;
extern fn sqlite3_column_table_name16(param0: *mut sqlite3_stmt, param1: s32) -> *void;
extern fn sqlite3_column_origin_name(param0: *mut sqlite3_stmt, param1: s32) -> *u8;
extern fn sqlite3_column_origin_name16(param0: *mut sqlite3_stmt, param1: s32) -> *void;
extern fn sqlite3_column_decltype(param0: *mut sqlite3_stmt, param1: s32) -> *u8;
extern fn sqlite3_column_decltype16(param0: *mut sqlite3_stmt, param1: s32) -> *void;
extern fn sqlite3_step(param0: *mut sqlite3_stmt) -> s32;
extern fn sqlite3_data_count(pStmt: *mut sqlite3_stmt) -> s32;
extern fn sqlite3_column_blob(param0: *mut sqlite3_stmt, iCol: s32) -> *void;
extern fn sqlite3_column_double(param0: *mut sqlite3_stmt, iCol: s32) -> f64;
extern fn sqlite3_column_int(param0: *mut sqlite3_stmt, iCol: s32) -> s32;
extern fn sqlite3_column_int64(param0: *mut sqlite3_stmt, iCol: s32) -> s64;
extern fn sqlite3_column_text(param0: *mut sqlite3_stmt, iCol: s32) -> *u8;
extern fn sqlite3_column_text16(param0: *mut sqlite3_stmt, iCol: s32) -> *void;
extern fn sqlite3_column_value(param0: *mut sqlite3_stmt, iCol: s32) -> *mut sqlite3_value;
extern fn sqlite3_column_bytes(param0: *mut sqlite3_stmt, iCol: s32) -> s32;
extern fn sqlite3_column_bytes16(param0: *mut sqlite3_stmt, iCol: s32) -> s32;
extern fn sqlite3_column_type(param0: *mut sqlite3_stmt, iCol: s32) -> s32;
extern fn sqlite3_finalize(pStmt: *mut sqlite3_stmt) -> s32;
extern fn sqlite3_reset(pStmt: *mut sqlite3_stmt) -> s32;
extern fn sqlite3_create_function(db: *mut sqlite3, zFunctionName: *u8, nArg: s32, eTextRep: s32, pApp: *mut void, xFunc: fn(*mut sqlite3_context, s32, *mut *mut sqlite3_value) -> void, xStep: fn(*mut sqlite3_context, s32, *mut *mut sqlite3_value) -> void, xFinal: fn(*mut sqlite3_context) -> void) -> s32;
extern fn sqlite3_create_function16(db: *mut sqlite3, zFunctionName: *void, nArg: s32, eTextRep: s32, pApp: *mut void, xFunc: fn(*mut sqlite3_context, s32, *mut *mut sqlite3_value) -> void, xStep: fn(*mut sqlite3_context, s32, *mut *mut sqlite3_value) -> void, xFinal: fn(*mut sqlite3_context) -> void) -> s32;
extern fn sqlite3_create_function_v2(db: *mut sqlite3, zFunctionName: *u8, nArg: s32, eTextRep: s32, pApp: *mut void, xFunc: fn(*mut sqlite3_context, s32, *mut *mut sqlite3_value) -> void, xStep: fn(*mut sqlite3_context, s32, *mut *mut sqlite3_value) -> void, xFinal: fn(*mut sqlite3_context) -> void, xDestroy: fn(*mut void) -> void) -> s32;
extern fn sqlite3_create_window_function(db: *mut sqlite3, zFunctionName: *u8, nArg: s32, eTextRep: s32, pApp: *mut void, xStep: fn(*mut sqlite3_context, s32, *mut *mut sqlite3_value) -> void, xFinal: fn(*mut sqlite3_context) -> void, xValue: fn(*mut sqlite3_context) -> void, xInverse: fn(*mut sqlite3_context, s32, *mut *mut sqlite3_value) -> void, xDestroy: fn(*mut void) -> void) -> s32;
extern fn sqlite3_aggregate_count(param0: *mut sqlite3_context) -> s32;
extern fn sqlite3_expired(param0: *mut sqlite3_stmt) -> s32;
extern fn sqlite3_transfer_bindings(param0: *mut sqlite3_stmt, param1: *mut sqlite3_stmt) -> s32;
extern fn sqlite3_global_recover() -> s32;
extern fn sqlite3_thread_cleanup() -> void;
extern fn sqlite3_memory_alarm(param0: fn(*mut void, s64, s32) -> void, param1: *mut void, param2: s64) -> s32;
extern fn sqlite3_value_blob(param0: *mut sqlite3_value) -> *void;
extern fn sqlite3_value_double(param0: *mut sqlite3_value) -> f64;
extern fn sqlite3_value_int(param0: *mut sqlite3_value) -> s32;
extern fn sqlite3_value_int64(param0: *mut sqlite3_value) -> s64;
extern fn sqlite3_value_pointer(param0: *mut sqlite3_value, param1: *u8) -> *mut void;
extern fn sqlite3_value_text(param0: *mut sqlite3_value) -> *u8;
extern fn sqlite3_value_text16(param0: *mut sqlite3_value) -> *void;
extern fn sqlite3_value_text16le(param0: *mut sqlite3_value) -> *void;
extern fn sqlite3_value_text16be(param0: *mut sqlite3_value) -> *void;
extern fn sqlite3_value_bytes(param0: *mut sqlite3_value) -> s32;
extern fn sqlite3_value_bytes16(param0: *mut sqlite3_value) -> s32;
extern fn sqlite3_value_type(param0: *mut sqlite3_value) -> s32;
extern fn sqlite3_value_numeric_type(param0: *mut sqlite3_value) -> s32;
extern fn sqlite3_value_nochange(param0: *mut sqlite3_value) -> s32;
extern fn sqlite3_value_frombind(param0: *mut sqlite3_value) -> s32;
extern fn sqlite3_value_encoding(param0: *mut sqlite3_value) -> s32;
extern fn sqlite3_value_subtype(param0: *mut sqlite3_value) -> u32;
extern fn sqlite3_value_dup(param0: *sqlite3_value) -> *mut sqlite3_value;
extern fn sqlite3_value_free(param0: *mut sqlite3_value) -> void;
extern fn sqlite3_aggregate_context(param0: *mut sqlite3_context, nBytes: s32) -> *mut void;
extern fn sqlite3_user_data(param0: *mut sqlite3_context) -> *mut void;
extern fn sqlite3_context_db_handle(param0: *mut sqlite3_context) -> *mut sqlite3;
extern fn sqlite3_get_auxdata(param0: *mut sqlite3_context, N: s32) -> *mut void;
extern fn sqlite3_set_auxdata(param0: *mut sqlite3_context, N: s32, param2: *mut void, param3: fn(*mut void) -> void) -> void;
extern fn sqlite3_get_clientdata(param0: *mut sqlite3, param1: *u8) -> *mut void;
extern fn sqlite3_set_clientdata(param0: *mut sqlite3, param1: *u8, param2: *mut void, param3: fn(*mut void) -> void) -> s32;

extern fn sqlite3_result_blob(param0: *mut sqlite3_context, param1: *void, param2: s32, param3: fn(*mut void) -> void) -> void;
extern fn sqlite3_result_blob64(param0: *mut sqlite3_context, param1: *void, param2: u64, param3: fn(*mut void) -> void) -> void;
extern fn sqlite3_result_double(param0: *mut sqlite3_context, param1: f64) -> void;
extern fn sqlite3_result_error(param0: *mut sqlite3_context, param1: *u8, param2: s32) -> void;
extern fn sqlite3_result_error16(param0: *mut sqlite3_context, param1: *void, param2: s32) -> void;
extern fn sqlite3_result_error_toobig(param0: *mut sqlite3_context) -> void;
extern fn sqlite3_result_error_nomem(param0: *mut sqlite3_context) -> void;
extern fn sqlite3_result_error_code(param0: *mut sqlite3_context, param1: s32) -> void;
extern fn sqlite3_result_int(param0: *mut sqlite3_context, param1: s32) -> void;
extern fn sqlite3_result_int64(param0: *mut sqlite3_context, param1: s64) -> void;
extern fn sqlite3_result_null(param0: *mut sqlite3_context) -> void;
extern fn sqlite3_result_text(param0: *mut sqlite3_context, param1: *u8, param2: s32, param3: fn(*mut void) -> void) -> void;
extern fn sqlite3_result_text64(param0: *mut sqlite3_context, param1: *u8, param2: u64, param3: fn(*mut void) -> void, encoding: u8) -> void;
extern fn sqlite3_result_text16(param0: *mut sqlite3_context, param1: *void, param2: s32, param3: fn(*mut void) -> void) -> void;
extern fn sqlite3_result_text16le(param0: *mut sqlite3_context, param1: *void, param2: s32, param3: fn(*mut void) -> void) -> void;
extern fn sqlite3_result_text16be(param0: *mut sqlite3_context, param1: *void, param2: s32, param3: fn(*mut void) -> void) -> void;
extern fn sqlite3_result_value(param0: *mut sqlite3_context, param1: *mut sqlite3_value) -> void;
extern fn sqlite3_result_pointer(param0: *mut sqlite3_context, param1: *mut void, param2: *u8, param3: fn(*mut void) -> void) -> void;
extern fn sqlite3_result_zeroblob(param0: *mut sqlite3_context, n: s32) -> void;
extern fn sqlite3_result_zeroblob64(param0: *mut sqlite3_context, n: u64) -> s32;
extern fn sqlite3_result_subtype(param0: *mut sqlite3_context, param1: u32) -> void;
extern fn sqlite3_create_collation(param0: *mut sqlite3, zName: *u8, eTextRep: s32, pArg: *mut void, xCompare: fn(*mut void, s32, *void, s32, *void) -> s32) -> s32;
extern fn sqlite3_create_collation_v2(param0: *mut sqlite3, zName: *u8, eTextRep: s32, pArg: *mut void, xCompare: fn(*mut void, s32, *void, s32, *void) -> s32, xDestroy: fn(*mut void) -> void) -> s32;
extern fn sqlite3_create_collation16(param0: *mut sqlite3, zName: *void, eTextRep: s32, pArg: *mut void, xCompare: fn(*mut void, s32, *void, s32, *void) -> s32) -> s32;
extern fn sqlite3_collation_needed(param0: *mut sqlite3, param1: *mut void, param2: fn(*mut void, *mut sqlite3, s32, *u8) -> void) -> s32;
extern fn sqlite3_collation_needed16(param0: *mut sqlite3, param1: *mut void, param2: fn(*mut void, *mut sqlite3, s32, *void) -> void) -> s32;
extern fn sqlite3_sleep(param0: s32) -> s32;

extern fn sqlite3_win32_set_directory(type_: u64, zValue: *mut void) -> s32;
extern fn sqlite3_win32_set_directory8(type_: u64, zValue: *u8) -> s32;
extern fn sqlite3_win32_set_directory16(type_: u64, zValue: *void) -> s32;
extern fn sqlite3_get_autocommit(param0: *mut sqlite3) -> s32;
extern fn sqlite3_db_handle(param0: *mut sqlite3_stmt) -> *mut sqlite3;
extern fn sqlite3_db_name(db: *mut sqlite3, N: s32) -> *u8;
extern fn sqlite3_db_filename(db: *mut sqlite3, zDbName: *u8) -> c_str;
extern fn sqlite3_db_readonly(db: *mut sqlite3, zDbName: *u8) -> s32;
extern fn sqlite3_txn_state(param0: *mut sqlite3, zSchema: *u8) -> s32;
extern fn sqlite3_next_stmt(pDb: *mut sqlite3, pStmt: *mut sqlite3_stmt) -> *mut sqlite3_stmt;
extern fn sqlite3_commit_hook(param0: *mut sqlite3, param1: fn(*mut void) -> s32, param2: *mut void) -> *mut void;
extern fn sqlite3_rollback_hook(param0: *mut sqlite3, param1: fn(*mut void) -> void, param2: *mut void) -> *mut void;
extern fn sqlite3_autovacuum_pages(db: *mut sqlite3, param1: fn(*mut void, *u8, u32, u32, u32) -> u32, param2: *mut void, param3: fn(*mut void) -> void) -> s32;
extern fn sqlite3_update_hook(param0: *mut sqlite3, param1: fn(*mut void, s32, *u8, *u8, s64) -> void, param2: *mut void) -> *mut void;
extern fn sqlite3_enable_shared_cache(param0: s32) -> s32;
extern fn sqlite3_release_memory(param0: s32) -> s32;
extern fn sqlite3_db_release_memory(param0: *mut sqlite3) -> s32;
extern fn sqlite3_soft_heap_limit64(N: s64) -> s64;
extern fn sqlite3_hard_heap_limit64(N: s64) -> s64;
extern fn sqlite3_soft_heap_limit(N: s32) -> void;
extern fn sqlite3_table_column_metadata(db: *mut sqlite3, zDbName: *u8, zTableName: *u8, zColumnName: *u8, pzDataType: *mut *u8, pzCollSeq: *mut *u8, pNotNull: *mut s32, pPrimaryKey: *mut s32, pAutoinc: *mut s32) -> s32;
extern fn sqlite3_load_extension(db: *mut sqlite3, zFile: *u8, zProc: *u8, pzErrMsg: *mut *mut u8) -> s32;
extern fn sqlite3_enable_load_extension(db: *mut sqlite3, onoff: s32) -> s32;
extern fn sqlite3_auto_extension(xEntryPoint: fn() -> void) -> s32;
extern fn sqlite3_cancel_auto_extension(xEntryPoint: fn() -> void) -> s32;
extern fn sqlite3_reset_auto_extension() -> void;

extern fn sqlite3_create_module(db: *mut sqlite3, zName: *u8, p: *sqlite3_module, pClientData: *mut void) -> s32;
extern fn sqlite3_create_module_v2(db: *mut sqlite3, zName: *u8, p: *sqlite3_module, pClientData: *mut void, xDestroy: fn(*mut void) -> void) -> s32;
extern fn sqlite3_drop_modules(db: *mut sqlite3, azKeep: *mut *u8) -> s32;
extern fn sqlite3_declare_vtab(param0: *mut sqlite3, zSQL: *u8) -> s32;
extern fn sqlite3_overload_function(param0: *mut sqlite3, zFuncName: *u8, nArg: s32) -> s32;

extern fn sqlite3_blob_open(param0: *mut sqlite3, zDb: *u8, zTable: *u8, zColumn: *u8, iRow: s64, flags: s32, ppBlob: *mut *mut sqlite3_blob) -> s32;
extern fn sqlite3_blob_reopen(param0: *mut sqlite3_blob, param1: s64) -> s32;
extern fn sqlite3_blob_close(param0: *mut sqlite3_blob) -> s32;
extern fn sqlite3_blob_bytes(param0: *mut sqlite3_blob) -> s32;
extern fn sqlite3_blob_read(param0: *mut sqlite3_blob, Z: *mut void, N: s32, iOffset: s32) -> s32;
extern fn sqlite3_blob_write(param0: *mut sqlite3_blob, z: *void, n: s32, iOffset: s32) -> s32;
extern fn sqlite3_vfs_find(zVfsName: *u8) -> *mut sqlite3_vfs;
extern fn sqlite3_vfs_register(param0: *mut sqlite3_vfs, makeDflt: s32) -> s32;
extern fn sqlite3_vfs_unregister(param0: *mut sqlite3_vfs) -> s32;
extern fn sqlite3_mutex_alloc(param0: s32) -> *mut sqlite3_mutex;
extern fn sqlite3_mutex_free(param0: *mut sqlite3_mutex) -> void;
extern fn sqlite3_mutex_enter(param0: *mut sqlite3_mutex) -> void;
extern fn sqlite3_mutex_try(param0: *mut sqlite3_mutex) -> s32;
extern fn sqlite3_mutex_leave(param0: *mut sqlite3_mutex) -> void;

extern fn sqlite3_mutex_held(param0: *mut sqlite3_mutex) -> s32;
extern fn sqlite3_mutex_notheld(param0: *mut sqlite3_mutex) -> s32;
extern fn sqlite3_db_mutex(param0: *mut sqlite3) -> *mut sqlite3_mutex;
extern fn sqlite3_file_control(param0: *mut sqlite3, zDbName: *u8, op: s32, param3: *mut void) -> s32;
extern fn sqlite3_test_control(op: s32) -> s32;
extern fn sqlite3_keyword_count() -> s32;
extern fn sqlite3_keyword_name(param0: s32, param1: *mut *u8, param2: *mut s32) -> s32;
extern fn sqlite3_keyword_check(param0: *u8, param1: s32) -> s32;

extern fn sqlite3_str_new(param0: *mut sqlite3) -> *mut sqlite3_str;
extern fn sqlite3_str_finish(param0: *mut sqlite3_str) -> *mut u8;
extern fn sqlite3_str_appendf(param0: *mut sqlite3_str, zFormat: *u8) -> void;
extern fn sqlite3_str_vappendf(param0: *mut sqlite3_str, zFormat: *u8, param2: va_list) -> void;
extern fn sqlite3_str_append(param0: *mut sqlite3_str, zIn: *u8, N: s32) -> void;
extern fn sqlite3_str_appendall(param0: *mut sqlite3_str, zIn: *u8) -> void;
extern fn sqlite3_str_appendchar(param0: *mut sqlite3_str, N: s32, C: u8) -> void;
extern fn sqlite3_str_reset(param0: *mut sqlite3_str) -> void;
extern fn sqlite3_str_errcode(param0: *mut sqlite3_str) -> s32;
extern fn sqlite3_str_length(param0: *mut sqlite3_str) -> s32;
extern fn sqlite3_str_value(param0: *mut sqlite3_str) -> *mut u8;
extern fn sqlite3_status(op: s32, pCurrent: *mut s32, pHighwater: *mut s32, resetFlag: s32) -> s32;
extern fn sqlite3_status64(op: s32, pCurrent: *mut s64, pHighwater: *mut s64, resetFlag: s32) -> s32;
extern fn sqlite3_db_status(param0: *mut sqlite3, op: s32, pCur: *mut s32, pHiwtr: *mut s32, resetFlg: s32) -> s32;
extern fn sqlite3_stmt_status(param0: *mut sqlite3_stmt, op: s32, resetFlg: s32) -> s32;

extern fn sqlite3_backup_init(pDest: *mut sqlite3, zDestName: *u8, pSource: *mut sqlite3, zSourceName: *u8) -> *mut sqlite3_backup;
extern fn sqlite3_backup_step(p: *mut sqlite3_backup, nPage: s32) -> s32;
extern fn sqlite3_backup_finish(p: *mut sqlite3_backup) -> s32;
extern fn sqlite3_backup_remaining(p: *mut sqlite3_backup) -> s32;
extern fn sqlite3_backup_pagecount(p: *mut sqlite3_backup) -> s32;
extern fn sqlite3_unlock_notify(pBlocked: *mut sqlite3, xNotify: fn(*mut *mut void, s32) -> void, pNotifyArg: *mut void) -> s32;
extern fn sqlite3_stricmp(param0: *u8, param1: *u8) -> s32;
extern fn sqlite3_strnicmp(param0: *u8, param1: *u8, param2: s32) -> s32;
extern fn sqlite3_strglob(zGlob: *u8, zStr: *u8) -> s32;
extern fn sqlite3_strlike(zGlob: *u8, zStr: *u8, cEsc: u32) -> s32;
extern fn sqlite3_log(iErrCode: s32, zFormat: *u8) -> void;
extern fn sqlite3_wal_hook(param0: *mut sqlite3, param1: fn(*mut void, *mut sqlite3, *u8, s32) -> s32, param2: *mut void) -> *mut void;
extern fn sqlite3_wal_autocheckpoint(db: *mut sqlite3, N: s32) -> s32;
extern fn sqlite3_wal_checkpoint(db: *mut sqlite3, zDb: *u8) -> s32;
extern fn sqlite3_wal_checkpoint_v2(db: *mut sqlite3, zDb: *u8, eMode: s32, pnLog: *mut s32, pnCkpt: *mut s32) -> s32;
extern fn sqlite3_vtab_config(param0: *mut sqlite3, op: s32) -> s32;
extern fn sqlite3_vtab_on_conflict(param0: *mut sqlite3) -> s32;
extern fn sqlite3_vtab_nochange(param0: *mut sqlite3_context) -> s32;
extern fn sqlite3_vtab_collation(param0: *mut sqlite3_index_info, param1: s32) -> *u8;
extern fn sqlite3_vtab_distinct(param0: *mut sqlite3_index_info) -> s32;
extern fn sqlite3_vtab_in(param0: *mut sqlite3_index_info, iCons: s32, bHandle: s32) -> s32;
extern fn sqlite3_vtab_in_first(pVal: *mut sqlite3_value, ppOut: *mut *mut sqlite3_value) -> s32;
extern fn sqlite3_vtab_in_next(pVal: *mut sqlite3_value, ppOut: *mut *mut sqlite3_value) -> s32;
extern fn sqlite3_vtab_rhs_value(param0: *mut sqlite3_index_info, param1: s32, ppVal: *mut *mut sqlite3_value) -> s32;
extern fn sqlite3_stmt_scanstatus(pStmt: *mut sqlite3_stmt, idx: s32, iScanStatusOp: s32, pOut: *mut void) -> s32;
extern fn sqlite3_stmt_scanstatus_v2(pStmt: *mut sqlite3_stmt, idx: s32, iScanStatusOp: s32, flags: s32, pOut: *mut void) -> s32;
extern fn sqlite3_stmt_scanstatus_reset(param0: *mut sqlite3_stmt) -> void;
extern fn sqlite3_db_cacheflush(param0: *mut sqlite3) -> s32;
extern fn sqlite3_system_errno(param0: *mut sqlite3) -> s32;
extern fn sqlite3_snapshot_get(db: *mut sqlite3, zSchema: *u8, ppSnapshot: *mut *mut sqlite3_snapshot) -> s32;
extern fn sqlite3_snapshot_open(db: *mut sqlite3, zSchema: *u8, pSnapshot: *mut sqlite3_snapshot) -> s32;
extern fn sqlite3_snapshot_free(param0: *mut sqlite3_snapshot) -> void;
extern fn sqlite3_snapshot_cmp(p1: *mut sqlite3_snapshot, p2: *mut sqlite3_snapshot) -> s32;
extern fn sqlite3_snapshot_recover(db: *mut sqlite3, zDb: *u8) -> s32;
extern fn sqlite3_serialize(db: *mut sqlite3, zSchema: *u8, piSize: *mut s64, mFlags: u32) -> *mut u8;
extern fn sqlite3_deserialize(db: *mut sqlite3, zSchema: *u8, pData: *mut u8, szDb: s64, szBuf: s64, mFlags: u32) -> s32;
extern fn sqlite3_rtree_geometry_callback(db: *mut sqlite3, zGeom: *u8, xGeom: fn(*mut sqlite3_rtree_geometry, s32, *mut sqlite3_rtree_dbl, *mut s32) -> s32, pContext: *mut void) -> s32;
extern fn sqlite3_rtree_query_callback(db: *mut sqlite3, zQueryFunc: *u8, xQueryFunc: fn(*mut sqlite3_rtree_query_info) -> s32, pContext: *mut void, xDestructor: fn(*mut void) -> void) -> s32;