import map::Map;

Interned :: struct!<T> where T:  Hash {
  data: *const T,
}

impl!<T> Interned!<T> {
  #static table :: fn() -> *mut Map!<u64, *const T> {
    #static mut table: Map!<u64, *const T>;
    return &mut table;
  }

  value :: fn(self) -> T {
    return *self.data;
  }

  insert_or_set :: fn(*mut self, value: T) {
    hash := value.hash();
    mut table := Interned!<T>::table();
    result := table.get(hash);

    /* 
      Already had this value, just store the existing pointer in the  
      instance.
    */
    if result.is_some() { 
      self.data = result.unwrap();
    } else {
      self.data = new(value);
      table.insert(hash, self.data);
    }
  }

  new :: fn(value: T) -> #self {
    mut self: #self;
    self.insert_or_set(value);
    return self;
  }
}

impl!<T> Eq for Interned!<T> {
  eq :: fn(self, other: #self) -> bool {
    return self.data == other.data;
  }
  neq :: fn(self, other: #self) -> bool {
    return self.data != other.data;
  }
}


impl!<T> Hash for Interned!<T> {
  hash :: fn(self) -> u64 {
    // TODO: do we want to just return the pointer as if it were a hash?
    // or do we want to rehash the value itself.
    return self.data.hash();
  }
}


import fmt::{
  Format,
  StringBuilder,
  FormatOptions
};
impl!<T> Format for Interned!<T> {
  format :: fn(*const self, builder: *mut StringBuilder, options: FormatOptions) {
    if self.data {
      builder.appendf("Interned { % }", (*self.data,), options.quoted());
    } else {
      builder.append("Interned { null }");
    }
  }
}