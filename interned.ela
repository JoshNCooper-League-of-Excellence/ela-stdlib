import map::Map;

struct Interned!<T> where T:  Hash {
  data: *const T,
}

impl!<T> Interned!<T> {
  fn table() -> *mut Map!<u64, *const T> {
    #static mut table: Map!<u64, *const T>;
    return &mut table;
  }

  fn value(self) -> T {
    return *self.data;
  }

  fn insert_or_set(*mut self, value: T) {
    hash := value.hash();
    mut table := Interned!<T>::table();
    result := table.get(hash);

    /* 
      Already had this value, just store the existing pointer in the  
      instance.
    */
    if result.is_some() { 
      self.data = result.unwrap();
    } else {
      self.data = new(value);
      table.insert(hash, self.data);
    }
  }

  fn new(value: T) -> Self {
    mut self: Self;
    self.insert_or_set(value);
    return self;
  }
}

impl!<T> PartialEq!<Interned!<T>> for Interned!<T> {
  fn eq(self, other: Self) -> bool {
    return self.data == other.data;
  }
}

impl!<T> Hash for Interned!<T> {
  fn hash(self) -> u64 {
    // TODO: do we want to just return the pointer as if it were a hash?
    // or do we want to rehash the value itself?
    return self.data.hash();
  }
}

impl!<T> AsSlice!<u8> for Interned!<T> where T: AsSlice!<u8> {
  fn as_slice(self) -> [u8] {
    return self.value().as_slice();
  }
}

import fmt::{
  Format,
  stringstream::StringStream,
  FormatOptions
};

impl!<T> Format for Interned!<T> {
  fn format(*const self, f: *mut fmt::Formatter) {
    if self.data {
      f.writer.appendf("Interned { % }", (*self.data,), f.options.quoted());
    } else {
      f.writer.append("Interned { null }");
    }
  }
}