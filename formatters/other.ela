impl Format for s32 {
  @[inline]
  format :: fn(*const self, builder: *mut StringBuilder, mut options: FormatOptions) {
    buffer: u8[32];
    len := snprintf(buffer, 32, "%d"c, *self);
    builder.append(Slice!<u8>::from(buffer, len));
    // builder.append_then_free(to_string(*self));
  }
}


impl!<T> Format for Option!<T> {
  format :: fn(*const self, builder: *mut StringBuilder, mut options: FormatOptions) {
    if options.enum_parent_name {
      old := options.quote_strings;
      options.quote_strings = false;
      builder.appendf("%::", (typeof(Option!<T>).name,), options);
      options.quote_strings = old;
    }
    if self.is_some() {
      builder.appendf("Some(%)", (self.unwrap(), ), options);
    } else {
      builder.append("None()");
    }
  }
}

impl!<_Ok, _Err> Format for Result!<_Ok, _Err> {
  format :: fn(*const self, builder: *mut StringBuilder, mut options: FormatOptions) {
    if options.enum_parent_name {
      old := options.quote_strings;
      options.quote_strings = false;
      builder.appendf("%::", (typeof(Result!<_Ok, _Err>).name,), options);
      options.quote_strings = old;
    }
    if self.is_ok() {
      builder.appendf("Ok(%)", (self.ok,), options);
    } else {
      builder.appendf("Err(%)", (self.err,), options);
    }
  }
}