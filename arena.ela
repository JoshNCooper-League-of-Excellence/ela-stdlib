#flags ArenaFlags :: enum {
  None,               // default.
  Align,              // if self flag is set, the allocator will fix alignment automatically when a misaligned allocation is found. Else it will naively allocate regardless of size.
}

// Super basic arena allocator, with a constructor that allocates a big block,
// an allocate method that returns u8*, and a destructor that frees the block.
Arena :: struct {
  ptr: u64,
  size: u64,
  memory: *mut u8,
  flags: ArenaFlags,
  alignment: u64,
  next: *mut Arena,
} 

impl Arena {
  new :: fn(size: u64, flags: ArenaFlags) -> #self {
    return .{
      size: size,
      flags: flags,
      memory: calloc(sizeof(u8), size),
      alignment: sizeof(*const void),
      next: null,
    }
  }

  alloc :: fn(*mut self, size: u64) -> *mut u8 {
    if size == 0 {
      return null;
    }

    if size > self.size {
      buffer: u8[1024];
      len := snprintf(
        buffer, 
        1024, 
        "attempted to allocate %d bytes in an arena where each chunk is maximum %d bytes. this would lead to splits in the data."c, 
        size, self.size
      );
      panic(.{ data: buffer, length: len });
    }
    
    mut aligned_ptr := self.ptr;
    if self.flags & ArenaFlags::Align != 0 {
      aligned_ptr = (self.ptr + self.alignment - 1) & ~(self.alignment - 1);
    }
    
    oom := aligned_ptr + size > self.size;
    
    if oom  {
      if !self.next {
        self.next = new(#self::new(self.size, self.flags));
      }
      return self.next.alloc(size);
    }
    
    result := self.memory + aligned_ptr;
    self.ptr += aligned_ptr + size;
    return result;
  }

}

impl Allocator for Arena {
  allocate :: fn(*mut self, size: u64) -> *mut void {
    return self.alloc(size);
  }
  free :: fn(*mut self, ptr: *mut void) {}

  allocate_array :: fn(*mut self, size: u64, n: u64) -> *mut void {
    return self.alloc(size * n);
  }

  resize :: fn(*mut self, ptr: *const void, element_size: u64, new_size: u64) -> *mut void {
    return null;
  }

  copy :: fn(*mut self, ptr: *const void, element_size: u64, n: u64) -> *mut void {
    new_ptr := self.alloc(element_size * n);
    memcpy(new_ptr, ptr, n);
    return new_ptr;

  }
  deinit :: fn(*mut self) {
    if self.next {
      self.next.deinit();
      free(self.next);
      self.next = null;
    }

    free(self.memory);

    self.memory = null;
  }
}