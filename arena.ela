
enum ArenaFlags {
  /*
    default.
  */
  None,
  /*
    if self flag is set, the allocator will fix alignment
    automatically when a misaligned allocation is found.
    Else it will naively allocate regardless of size.
  */
  Align,
}

// Super basic arena allocator, with a constructor that allocates a big block,
// an allocate method that returns u8*, and a destructor that frees the block.
struct Arena {
  ptr: u64,
  size: u64,
  memory: *mut u8,
  flags: ArenaFlags,
  alignment: u64,
  next: *mut Arena,
}

impl Arena {
  fn new(size: u64, flags: ArenaFlags) -> Self {
    return .{
      size: size,
      flags: flags,
      memory: std::c::calloc(sizeof(u8), size),
      alignment: sizeof(*const void),
      next: null,
    }
  }

  fn alloc(*mut self, size: u64) -> *mut u8 {
    if size == 0 {
      return null;
    }

    if size > self.size {
      buffer: [u8; 1024];
      len := std::c::snprintf(
        buffer,
        1024,
        "attempted to allocate %d bytes in an arena where each chunk is maximum %d bytes. this would lead to splits in the data."c,
        size, self.size
      );
      panic(str.{ data: buffer, length: len });
    }

    mut aligned_ptr := self.ptr;
    if self.flags & ArenaFlags::Align != 0 {
      aligned_ptr = (self.ptr + self.alignment - 1) & ~(self.alignment - 1);
    }

    oom := aligned_ptr + size > self.size;

    if oom  {
      if !self.next {
        self.next = new(Arena::new(self.size, self.flags));
      }
      return self.next.alloc(size);
    }

    result := self.memory + aligned_ptr;
    self.ptr = aligned_ptr + size;
    return result;
  }
}

impl Destroy for Arena {
  fn destroy(*mut self, recursive: bool = false) {
    if self.next {
      self.next.destroy();
      std::c::free(self.next);
      self.next = null;
    }
    std::c::free(self.memory);
    self.memory = null;
  }
}

impl Allocator for Arena {
  fn allocate(*mut self, size: u64) -> *mut void {
    return self.alloc(size);
  }
  fn free(*mut self, ptr: *mut void) {}
  fn allocate_array(*mut self, size: u64, n: u64) -> *mut void {
    return self.alloc(size * n);
  }
  fn resize(*mut self, ptr: *const void, element_size: u64, new_size: u64) -> *mut void {
    return null;
  }
  fn copy(*mut self, ptr: *const void, element_size: u64, n: u64) -> *mut void {
    new_ptr := self.alloc(element_size * n);
    std::c::memcpy(new_ptr, ptr, n);
    return new_ptr;

  }
}

impl Arena {
  fn emplace!<T>(*mut self, v: T = default!<T>()) -> *mut T {
    ptr : *mut T = self.allocate(sizeof(T));
    *ptr = v;
    return ptr;
  }

  fn index!<T>(*const self, index: u64) -> *mut T {
    offset := index * sizeof(T);
    mut arena := self;
    mut current_offset := offset;

    while current_offset >= arena.size {
      if !arena.next {
        return null;
      }
      current_offset -= arena.size;
      arena = arena.next;
    }

    return (arena.memory + current_offset) as *mut T;
  }

  fn index_of!<T>(*const self, p: *T) -> Option!<u64> {
    mut arena := self;
    mut offset: u64 = 0;
    while arena {
      start := arena.memory as *u8;
      end := start + arena.size;
      if (p as *u8) >= start && (p as *u8) < end {
        return Option!<u64>::Some(offset + ((p as *u8) - start) / sizeof(T));
      }
      offset += arena.size / sizeof(T);
      arena = arena.next;
    }
    return Option!<u64>::None;
  }
}