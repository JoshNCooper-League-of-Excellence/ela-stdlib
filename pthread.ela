
struct pthread_attr_t;
alias pthread_t :: u64;

alias ThreadFunction :: fn*(*mut void);
alias ThreadStartRoutine :: fn*(*mut void) -> *mut void;

#foreign fn pthread_create(thread: *mut pthread_t, attr: *const pthread_attr_t, start_routine: ThreadStartRoutine, arg: *mut void) -> s32;
#foreign fn pthread_join(thread: *mut pthread_t, retval: *const *const void) -> s32;

struct pthread_mutex_t;

/* forward */ 
fn start_thread(arg: *mut void) -> *mut void;

/* Simple thread struct */
struct Thread {
  handle: pthread_t
}

impl Thread {    
  fn start(start_function: ThreadFunction, arg: *mut void) -> #self {
    self: #self;
    // this memory gets deleted in start_thread();
    parameters := new((start_function, arg));
    pthread_create(&mut self.handle, null, &mut start_thread, parameters);
    return self;
  }
  
  fn join(*mut self) -> void {
    #static n : *mut void;
    pthread_join(&mut self.handle, &mut n);
  }
}

/* wrapper callback to init Thread struct. */ 
fn start_thread(arg: *mut void) -> *mut void {
  tuple_ptr := arg as *const (ThreadFunction, *mut void);
  tuple := *tuple_ptr;
  function, user_arg := tuple;
  function(user_arg);
  free(arg);   // allocated by Thread::start();
  return null;
}
  
#foreign fn pthread_mutex_init(mutex: *mut pthread_mutex_t, attr: *const void) -> s32;
#foreign fn pthread_mutex_lock(mutex: *mut pthread_mutex_t) -> s32;
#foreign fn pthread_mutex_unlock(mutex: *mut pthread_mutex_t) -> s32;
#foreign fn pthread_mutex_destroy(mutex: *mut pthread_mutex_t) -> s32;

/* Simple mutex */
struct Mutex {
  handle: pthread_mutex_t
}

impl Mutex {
  fn new() -> #self {
    self: #self;
    pthread_mutex_init(&mut self.handle, null);
    return self;
  }
  fn lock(*mut self) {
    pthread_mutex_lock(&mut self.handle);
  }
  fn unlock(*mut self) {
    pthread_mutex_unlock(&mut self.handle);
  }
  fn free(*mut self) {
    pthread_mutex_destroy(&mut self.handle);
  }
}
