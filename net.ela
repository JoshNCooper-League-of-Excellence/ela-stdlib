/*
  These bindings were auto generated by 'ela-bindings-generator', from 'net.c' at 2025-05-18 17:28:53. 
*/
type __u_char :: u8;
type __u_short :: u16;
type __u_int :: u32;
type __u_long :: u64;
type __int8_t :: s8;
type __uint8_t :: u8;
type __int16_t :: s16;
type __uint16_t :: u16;
type __int32_t :: s32;
type __uint32_t :: u32;
type __int64_t :: s64;
type __uint64_t :: u64;
type __int_least8_t :: __int8_t;
type __uint_least8_t :: __uint8_t;
type __int_least16_t :: __int16_t;
type __uint_least16_t :: __uint16_t;
type __int_least32_t :: __int32_t;
type __uint_least32_t :: __uint32_t;
type __int_least64_t :: __int64_t;
type __uint_least64_t :: __uint64_t;
type __quad_t :: s64;
type __u_quad_t :: u64;
type __intmax_t :: s64;
type __uintmax_t :: u64;
type __dev_t :: u64;
type __uid_t :: u32;
type __gid_t :: u32;
type __ino_t :: u64;
type __ino64_t :: u64;
type __mode_t :: u32;
type __nlink_t :: u64;
type __off_t :: s64;
type __off64_t :: s64;
type __pid_t :: s32;
struct __fsid_t {
  __val: s32[2],
};
type __clock_t :: s64;
type __rlim_t :: u64;
type __rlim64_t :: u64;
type __id_t :: u32;
type __time_t :: s64;
type __useconds_t :: u32;
type __suseconds_t :: s64;
type __suseconds64_t :: s64;
type __daddr_t :: s32;
type __key_t :: s32;
type __clockid_t :: s32;
type __timer_t :: *mut void;
type __blksize_t :: s64;
type __blkcnt_t :: s64;
type __blkcnt64_t :: s64;
type __fsblkcnt_t :: u64;
type __fsblkcnt64_t :: u64;
type __fsfilcnt_t :: u64;
type __fsfilcnt64_t :: u64;
type __fsword_t :: s64;
type __ssize_t :: s64;
type __syscall_slong_t :: s64;
type __syscall_ulong_t :: u64;
type __loff_t :: __off64_t;
type __caddr_t :: *mut u8;
type __intptr_t :: s64;
type __socklen_t :: u32;
type __sig_atomic_t :: s32;
type u_char :: __u_char;
type u_short :: __u_short;
type u_int :: __u_int;
type u_long :: __u_long;
type quad_t :: __quad_t;
type u_quad_t :: __u_quad_t;
type fsid_t :: __fsid_t;
type loff_t :: __loff_t;
type ino_t :: __ino_t;
type dev_t :: __dev_t;
type gid_t :: __gid_t;
type mode_t :: __mode_t;
type nlink_t :: __nlink_t;
type uid_t :: __uid_t;
type off_t :: __off_t;
type pid_t :: __pid_t;
type id_t :: __id_t;
type ssize_t :: __ssize_t;
type daddr_t :: __daddr_t;
type caddr_t :: __caddr_t;
type key_t :: __key_t;
type clock_t :: __clock_t;
type clockid_t :: __clockid_t;
type time_t :: __time_t;
type timer_t :: __timer_t;
type size_t :: u64;
type ulong :: u64;
type ushort :: u16;
type uint :: u32;
type int8_t :: __int8_t;
type int16_t :: __int16_t;
type int32_t :: __int32_t;
type int64_t :: __int64_t;
type u_int8_t :: __uint8_t;
type u_int16_t :: __uint16_t;
type u_int32_t :: __uint32_t;
type u_int64_t :: __uint64_t;
type register_t :: s64;

extern fn __bswap_16(__bsx: __uint16_t) -> __uint16_t;
extern fn __bswap_32(__bsx: __uint32_t) -> __uint32_t;
extern fn __bswap_64(__bsx: __uint64_t) -> __uint64_t;
extern fn __uint16_identity(__x: __uint16_t) -> __uint16_t;
extern fn __uint32_identity(__x: __uint32_t) -> __uint32_t;
extern fn __uint64_identity(__x: __uint64_t) -> __uint64_t;

struct __sigset_t {
  __val: u64[16],
};

type sigset_t :: __sigset_t;
struct timeval {
  tv_sec: __time_t,
  tv_usec: __suseconds_t,
};

struct timespec {
  tv_sec: __time_t,
  tv_nsec: __syscall_slong_t,
};

type suseconds_t :: __suseconds_t;

type __fd_mask :: s64;

struct fd_set {
  __fds_bits: __fd_mask[16],
};

type fd_mask :: __fd_mask;

extern fn select(__nfds: s32, __readfds: *mut fd_set, __writefds: *mut fd_set, __exceptfds: *mut fd_set, __timeout: *mut timeval) -> s32;
extern fn pselect(__nfds: s32, __readfds: *mut fd_set, __writefds: *mut fd_set, __exceptfds: *mut fd_set, __timeout: *const timespec, __sigmask: *const __sigset_t) -> s32;

type blksize_t :: __blksize_t;
type blkcnt_t :: __blkcnt_t;
type fsblkcnt_t :: __fsblkcnt_t;
type fsfilcnt_t :: __fsfilcnt_t;

struct __bind_gen__anon_D0 {
  __low: u32,
  __high: u32,
};

union __atomic_wide_counter {
  __value64: u64,
  __value32: __bind_gen__anon_D0
};

struct __pthread_internal_list {
  __prev: *mut __pthread_internal_list,
  __next: *mut __pthread_internal_list,
};

type __pthread_list_t :: __pthread_internal_list;

struct __pthread_internal_slist {
  __next: *mut __pthread_internal_slist,
};

type __pthread_slist_t :: __pthread_internal_slist;

struct __pthread_mutex_s {
  __lock: s32,
  __count: u32,
  __owner: s32,
  __nusers: u32,
  __kind: s32,
  __spins: s16,
  __elision: s16,
  __list: __pthread_list_t,
};

struct __pthread_rwlock_arch_t {
  __readers: u32,
  __writers: u32,
  __wrphase_futex: u32,
  __writers_futex: u32,
  __pad3: u32,
  __pad4: u32,
  __cur_writer: s32,
  __shared: s32,
  __rwelision: s8,
  __pad1: u8[7],
  __pad2: u64,
  __flags: u32,
};

struct __pthread_cond_s {
  __wseq: __atomic_wide_counter,
  __g1_start: __atomic_wide_counter,
  __g_size: u32[2],
  __g1_orig_size: u32,
  __wrefs: u32,
  __g_signals: u32[2],
  __unused_initialized_1: u32,
  __unused_initialized_2: u32,
};

type __tss_t :: u32;
type __thrd_t :: u64;
struct __once_flag {
  __data: s32,
};

type pthread_t :: u64;
union pthread_mutexattr_t {
  __size: u8[4],
  __align: s32,
};

union pthread_condattr_t {
  __size: u8[4],
  __align: s32,
};

type pthread_key_t :: u32;
type pthread_once_t :: s32;
union pthread_attr_t {
  __size: u8[56],
  __align: s64,
};

union pthread_mutex_t {
  __data: __pthread_mutex_s,
  __size: u8[40],
  __align: s64,
};

union pthread_cond_t {
  __data: __pthread_cond_s,
  __size: u8[48],
  __align: s64,
};

union pthread_rwlock_t {
  __data: __pthread_rwlock_arch_t,
  __size: u8[56],
  __align: s64,
};

union pthread_rwlockattr_t {
  __size: u8[8],
  __align: s64,
};

type pthread_spinlock_t :: s32;

union pthread_barrier_t {
  __size: u8[32],
  __align: s64,
};

union pthread_barrierattr_t {
  __size: u8[4],
  __align: s32,
};

struct iovec {
  iov_base: *mut void,
  iov_len: u64,
};

const AF_UNSPEC := 0        // Unspecified
const AF_UNIX := 1          // Local to host (pipes and file-domain)
const AF_INET := 2          // IPv4 Internet protocols
const AF_INET6 := 10        // IPv6 Internet protocols

const INADDR_ANY        := 0x00000000
const INADDR_BROADCAST  := 0xFFFFFFFF
const INADDR_NONE       := 0xFFFFFFFF
const INADDR_LOOPBACK   := 0x7F000001
const INADDR_UNSPEC_GROUP := 0xE0000000
const INADDR_ALLHOSTS_GROUP := 0xE0000001
const INADDR_ALLRTRS_GROUP := 0xE0000002
const INADDR_MAX_LOCAL_GROUP := 0xE00000FF

const INADDR_ALLSNOOPERS_GROUP := 0xE000006A

const IN_LOOPBACKNET := 127

const IPPROTO_IP      := 0
const IPPROTO_ICMP    := 1
const IPPROTO_TCP     := 6
const IPPROTO_UDP     := 17
const IPPROTO_IPV6    := 41
const IPPROTO_RAW     := 255

const SOL_SOCKET      := 1

const SO_REUSEADDR    := 2
const SO_KEEPALIVE    := 9
const SO_BROADCAST    := 6
const SO_LINGER       := 13
const SO_RCVBUF       := 8
const SO_SNDBUF       := 7
const SO_RCVTIMEO     := 20
const SO_SNDTIMEO     := 21
const SO_ERROR        := 4
const SO_TYPE         := 3

const IP_TTL          := 2
const IP_MULTICAST_TTL := 33
const IP_MULTICAST_LOOP := 34
const IP_ADD_MEMBERSHIP := 35
const IP_DROP_MEMBERSHIP := 36

const MSG_OOB         := 0x01
const MSG_PEEK        := 0x02
const MSG_DONTROUTE   := 0x04
const MSG_WAITALL     := 0x100
const MSG_NOSIGNAL    := 0x4000
const MSG_DONTWAIT    := 0x40

const SHUT_RD         := 0
const SHUT_WR         := 1
const SHUT_RDWR       := 2

type socklen_t :: __socklen_t;

enum __socket_type {
  SOCK_STREAM = 1,
  SOCK_DGRAM = 2,
  SOCK_RAW = 3,
  SOCK_RDM = 4,
  SOCK_SEQPACKET = 5,
  SOCK_DCCP = 6,
  SOCK_PACKET = 10,
  SOCK_CLOEXEC = 524288,
  SOCK_NONBLOCK = 2048,
};

type sa_family_t :: u16;

struct sockaddr {
  sa_family: sa_family_t,
  sa_data: u8[14],
};

struct sockaddr_storage {
  ss_family: sa_family_t,
  __ss_padding: u8[118],
  __ss_align: u64,
};

enum Msg {
  OOB = 1,
  PEEK = 2,
  DONTROUTE = 4,
  CTRUNC = 8,
  PROXY = 16,
  TRUNC = 32,
  DONTWAIT = 64,
  EOR = 128,
  WAITALL = 256,
  FIN = 512,
  SYN = 1024,
  CONFIRM = 2048,
  RST = 4096,
  ERRQUEUE = 8192,
  NOSIGNAL = 16384,
  MORE = 32768,
  WAITFORONE = 65536,
  BATCH = 262144,
  SOCK_DEVMEM = 33554432,
  ZEROCOPY = 67108864,
  FASTOPEN = 536870912,
  CMSG_CLOEXEC = 1073741824,
};

struct msghdr {
  msg_name: *mut void,
  msg_namelen: socklen_t,
  msg_iov: *mut iovec,
  msg_iovlen: u64,
  msg_control: *mut void,
  msg_controllen: u64,
  msg_flags: s32,
};

struct cmsghdr {
  cmsg_len: u64,
  cmsg_level: s32,
  cmsg_type: s32,
  __cmsg_data: *const char,
};

extern fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;

const SCM_RIGHTS := 1;

struct __kernel_fd_set {
  fds_bits: u64[16],
};

type __kernel_sighandler_t :: fn*(s32) -> void;
type __kernel_key_t :: s32;
type __kernel_mqd_t :: s32;
type __kernel_old_uid_t :: u16;
type __kernel_old_gid_t :: u16;
type __kernel_old_dev_t :: u64;
type __kernel_long_t :: s64;
type __kernel_ulong_t :: u64;
type __kernel_ino_t :: __kernel_ulong_t;
type __kernel_mode_t :: u32;
type __kernel_pid_t :: s32;
type __kernel_ipc_pid_t :: s32;
type __kernel_uid_t :: u32;
type __kernel_gid_t :: u32;
type __kernel_suseconds_t :: __kernel_long_t;
type __kernel_daddr_t :: s32;
type __kernel_uid32_t :: u32;
type __kernel_gid32_t :: u32;
type __kernel_size_t :: __kernel_ulong_t;
type __kernel_ssize_t :: __kernel_long_t;
type __kernel_ptrdiff_t :: __kernel_long_t;

struct __kernel_fsid_t {
  val: s32[2],
};

type __kernel_off_t :: __kernel_long_t;
type __kernel_loff_t :: s64;
type __kernel_old_time_t :: __kernel_long_t;
type __kernel_time_t :: __kernel_long_t;
type __kernel_time64_t :: s64;
type __kernel_clock_t :: __kernel_long_t;
type __kernel_timer_t :: s32;
type __kernel_clockid_t :: s32;
type __kernel_caddr_t :: *mut u8;
type __kernel_uid16_t :: u16;
type __kernel_gid16_t :: u16;

struct linger {
  l_onoff: s32,
  l_linger: s32,
};

struct osockaddr {
  sa_family: u16,
  sa_data: u8[14],
};

enum Shut {
  RD = 0,
  WR = 1,
  RDWR = 2,
};

extern fn socket(__domain: s32, __type: s32, __protocol: s32) -> s32;
extern fn socketpair(__domain: s32, __type: s32, __protocol: s32, __fds: s32[2]) -> s32;
extern fn bind(__fd: s32, __addr: *const sockaddr, __len: socklen_t) -> s32;
extern fn getsockname(__fd: s32, __addr: *mut sockaddr, __len: *mut socklen_t) -> s32;
extern fn connect(__fd: s32, __addr: *const sockaddr, __len: socklen_t) -> s32;
extern fn getpeername(__fd: s32, __addr: *mut sockaddr, __len: *mut socklen_t) -> s32;
extern fn send(__fd: s32, __buf: *const void, __n: u64, __flags: s32) -> s64;
extern fn recv(__fd: s32, __buf: *mut void, __n: u64, __flags: s32) -> s64;
extern fn sendto(__fd: s32, __buf: *const void, __n: u64, __flags: s32, __addr: *const sockaddr, __addr_len: socklen_t) -> s64;
extern fn recvfrom(__fd: s32, __buf: *mut void, __n: u64, __flags: s32, __addr: *mut sockaddr, __addr_len: *mut socklen_t) -> s64;
extern fn sendmsg(__fd: s32, __message: *const msghdr, __flags: s32) -> s64;
extern fn recvmsg(__fd: s32, __message: *mut msghdr, __flags: s32) -> s64;
extern fn getsockopt(__fd: s32, __level: s32, __optname: s32, __optval: *mut void, __optlen: *mut socklen_t) -> s32;
extern fn setsockopt(__fd: s32, __level: s32, __optname: s32, __optval: *const void, __optlen: socklen_t) -> s32;
extern fn listen(__fd: s32, __n: s32) -> s32;
extern fn accept(__fd: s32, __addr: *mut sockaddr, __addr_len: *mut socklen_t) -> s32;
extern fn shutdown(__fd: s32, __how: s32) -> s32;
extern fn sockatmark(__fd: s32) -> s32;
extern fn isfdtype(__fd: s32, __fdtype: s32) -> s32;

type uint8_t :: __uint8_t;
type uint16_t :: __uint16_t;
type uint32_t :: __uint32_t;
type uint64_t :: __uint64_t;
type in_addr_t :: u32;

struct in_addr {
  s_addr: in_addr_t,
};

struct ip_opts {
  ip_dst: in_addr,
  ip_opts: u8[40],
};

struct in_pktinfo {
  ipi_ifindex: s32,
  ipi_spec_dst: in_addr,
  ipi_addr: in_addr,
};

enum IpProto {
  IP = 0,
  ICMP = 1,
  IGMP = 2,
  IPIP = 4,
  TCP = 6,
  EGP = 8,
  PUP = 12,
  UDP = 17,
  IDP = 22,
  TP = 29,
  DCCP = 33,
  IPV6 = 41,
  RSVP = 46,
  GRE = 47,
  ESP = 50,
  AH = 51,
  MTP = 92,
  BEETPH = 94,
  ENCAP = 98,
  PIM = 103,
  COMP = 108,
  L2TP = 115,
  SCTP = 132,
  UDPLITE = 136,
  MPLS = 137,
  ETHERNET = 143,
  RAW = 255,
  SMC = 256,
  MPTCP = 262,
  MAX = 263,
  HOPOPTS = 0,
  ROUTING = 43,
  FRAGMENT = 44,
  ICMPV6 = 58,
  NONE = 59,
  DSTOPTS = 60,
  MH = 135,
};

type in_port_t :: u16;

enum IpPort {
  Echo = 7,
  Discard = 9,
  Systat = 11,
  DayTime = 13,
  NetStat = 15,
  Ftp = 21,
  Telnet = 23,
  Smtp = 25,
  TimeServer = 37,
  NameServer = 42,
  Whois = 43,
  Mtp = 57,
  Tftp = 69,
  Rje = 77,
  Finger = 79,
  TtyLink = 87,
  SupDup = 95,
  ExecServer = 512,
  LoginServer = 513,
  CmdServer = 514,
  EfsServer = 520,
  Biffudp = 512,
  WhoServer = 513,
  RouteServer = 520,
  Reserved = 1024,
  UserReserved = 5000,
};

union __bind_gen__anon_D10 {
  __u6_addr8: u8[16],
  __u6_addr16: u16[8],
  __u6_addr32: u32[4],
};

struct in6_addr {
  __in6_u:__bind_gen__anon_D10,
};

in6addr_any: in6_addr;
in6addr_loopback: in6_addr;

struct sockaddr_in {
  sin_family: sa_family_t,
  sin_port: in_port_t,
  sin_addr: in_addr,
  sin_zero: u8[8],
};

struct sockaddr_in6 {
  sin6_family: sa_family_t,
  sin6_port: in_port_t,
  sin6_flowinfo: u32,
  sin6_addr: in6_addr,
  sin6_scope_id: u32,
};

struct ip_mreq {
  imr_multiaddr: in_addr,
  imr_interface: in_addr,
};

struct ip_mreqn {
  imr_multiaddr: in_addr,
  imr_address: in_addr,
  imr_ifindex: s32,
};

struct ip_mreq_source {
  imr_multiaddr: in_addr,
  imr_interface: in_addr,
  imr_sourceaddr: in_addr,
};

struct ipv6_mreq {
  ipv6mr_multiaddr: in6_addr,
  ipv6mr_interface: u32,
};

struct group_req {
  gr_interface: u32,
  gr_group: sockaddr_storage,
};

struct group_source_req {
  gsr_interface: u32,
  gsr_group: sockaddr_storage,
  gsr_source: sockaddr_storage,
};

struct ip_msfilter {
  imsf_multiaddr: in_addr,
  imsf_interface: in_addr,
  imsf_fmode: u32,
  imsf_numsrc: u32,
  imsf_slist: in_addr[1],
};

struct group_filter {
  gf_interface: u32,
  gf_group: sockaddr_storage,
  gf_fmode: u32,
  gf_numsrc: u32,
  gf_slist: sockaddr_storage[1],
};

extern fn ntohl(__netlong: u32) -> u32;
extern fn ntohs(__netshort: u16) -> u16;
extern fn htonl(__hostlong: u32) -> u32;
extern fn htons(__hostshort: u16) -> u16;
extern fn bindresvport(__sockfd: s32, __sock_in: *mut sockaddr_in) -> s32;
extern fn bindresvport6(__sockfd: s32, __sock_in: *mut sockaddr_in6) -> s32;
extern fn inet_addr(__cp: *const u8) -> in_addr_t;
extern fn inet_lnaof(__in: in_addr) -> in_addr_t;
extern fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t) -> in_addr;
extern fn inet_netof(__in: in_addr) -> in_addr_t;
extern fn inet_network(__cp: *const u8) -> in_addr_t;
extern fn inet_ntoa(__in: in_addr) -> *mut u8;
extern fn inet_pton(__af: s32, __cp: *const u8, __buf: *mut void) -> s32;
extern fn inet_ntop(__af: s32, __cp: *const void, __buf: *mut u8, __len: socklen_t) -> *const u8;
extern fn inet_aton(__cp: *const u8, __inp: *mut in_addr) -> s32;
extern fn inet_neta(__net: in_addr_t, __buf: *mut u8, __len: u64) -> *mut u8;
extern fn inet_net_ntop(__af: s32, __cp: *const void, __bits: s32, __buf: *mut u8, __len: u64) -> *mut u8;
extern fn inet_net_pton(__af: s32, __cp: *const u8, __buf: *mut void, __len: u64) -> s32;
extern fn inet_nsap_addr(__cp: *const u8, __buf: *mut u8, __len: s32) -> u32;
extern fn inet_nsap_ntoa(__len: s32, __cp: *const u8, __buf: *mut u8) -> *mut u8;

type useconds_t :: __useconds_t;
type intptr_t :: __intptr_t;

extern fn access(__name: *const u8, __type: s32) -> s32;
extern fn faccessat(__fd: s32, __file: *const u8, __type: s32, __flag: s32) -> s32;
extern fn lseek(__fd: s32, __offset: __off_t, __whence: s32) -> __off_t;
extern fn close(__fd: s32) -> s32;
extern fn closefrom(__lowfd: s32) -> void;
extern fn read(__fd: s32, __buf: *mut void, __nbytes: u64) -> s64;
extern fn write(__fd: s32, __buf: *const void, __n: u64) -> s64;
extern fn pread(__fd: s32, __buf: *mut void, __nbytes: u64, __offset: __off_t) -> s64;
extern fn pwrite(__fd: s32, __buf: *const void, __n: u64, __offset: __off_t) -> s64;
extern fn pipe(__pipedes: s32[2]) -> s32;
extern fn alarm(__seconds: u32) -> u32;
extern fn sleep(__seconds: u32) -> u32;
extern fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
extern fn usleep(__useconds: __useconds_t) -> s32;
extern fn pause() -> s32;
extern fn chown(__file: *const u8, __owner: __uid_t, __group: __gid_t) -> s32;
extern fn fchown(__fd: s32, __owner: __uid_t, __group: __gid_t) -> s32;
extern fn lchown(__file: *const u8, __owner: __uid_t, __group: __gid_t) -> s32;
extern fn fchownat(__fd: s32, __file: *const u8, __owner: __uid_t, __group: __gid_t, __flag: s32) -> s32;
extern fn chdir(__path: *const u8) -> s32;
extern fn fchdir(__fd: s32) -> s32;
extern fn getcwd(__buf: *mut u8, __size: u64) -> *mut u8;
extern fn getwd(__buf: *mut u8) -> *mut u8;
extern fn dup(__fd: s32) -> s32;
extern fn dup2(__fd: s32, __fd2: s32) -> s32;

__environ: *mut *mut u8;

extern fn execve(__path: *const u8, __argv: *mut *mut char, __envp: *mut *mut char) -> s32;
extern fn fexecve(__fd: s32, __argv: *mut *mut char, __envp: *mut *mut  char) -> s32;
extern fn execv(__path: *const u8, __argv: *mut *mut char) -> s32;
extern fn execle(__path: *const u8, __arg: *const u8) -> s32;
extern fn execl(__path: *const u8, __arg: *const u8) -> s32;
extern fn execvp(__file: *const u8, __argv: *mut *mut  char) -> s32;
extern fn execlp(__file: *const u8, __arg: *const u8) -> s32;
extern fn nice(__inc: s32) -> s32;

extern fn pathconf(__path: *const u8, __name: s32) -> s64;
extern fn fpathconf(__fd: s32, __name: s32) -> s64;
extern fn sysconf(__name: s32) -> s64;
extern fn confstr(__name: s32, __buf: *mut u8, __len: u64) -> u64;
extern fn getpid() -> __pid_t;
extern fn getppid() -> __pid_t;
extern fn getpgrp() -> __pid_t;
extern fn __getpgid(__pid: __pid_t) -> __pid_t;
extern fn getpgid(__pid: __pid_t) -> __pid_t;
extern fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> s32;
extern fn setpgrp() -> s32;
extern fn setsid() -> __pid_t;
extern fn getsid(__pid: __pid_t) -> __pid_t;
extern fn getuid() -> __uid_t;
extern fn geteuid() -> __uid_t;
extern fn getgid() -> __gid_t;
extern fn getegid() -> __gid_t;
extern fn getgroups(__size: s32, __list: __gid_t[]) -> s32;
extern fn setuid(__uid: __uid_t) -> s32;
extern fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> s32;
extern fn seteuid(__uid: __uid_t) -> s32;
extern fn setgid(__gid: __gid_t) -> s32;
extern fn setregid(__rgid: __gid_t, __egid: __gid_t) -> s32;
extern fn setegid(__gid: __gid_t) -> s32;
extern fn fork() -> __pid_t;
extern fn vfork() -> s32;
extern fn ttyname(__fd: s32) -> *mut u8;
extern fn ttyname_r(__fd: s32, __buf: *mut u8, __buflen: u64) -> s32;
extern fn isatty(__fd: s32) -> s32;
extern fn ttyslot() -> s32;
extern fn link(__from: *const u8, __to: *const u8) -> s32;
extern fn linkat(__fromfd: s32, __from: *const u8, __tofd: s32, __to: *const u8, __flags: s32) -> s32;
extern fn symlink(__from: *const u8, __to: *const u8) -> s32;
extern fn readlink(__path: *const u8, __buf: *mut u8, __len: u64) -> s64;
extern fn symlinkat(__from: *const u8, __tofd: s32, __to: *const u8) -> s32;
extern fn readlinkat(__fd: s32, __path: *const u8, __buf: *mut u8, __len: u64) -> s64;
extern fn unlink(__name: *const u8) -> s32;
extern fn unlinkat(__fd: s32, __name: *const u8, __flag: s32) -> s32;
extern fn rmdir(__path: *const u8) -> s32;
extern fn tcgetpgrp(__fd: s32) -> __pid_t;
extern fn tcsetpgrp(__fd: s32, __pgrp_id: __pid_t) -> s32;
extern fn getlogin() -> *mut u8;
extern fn getlogin_r(__name: *mut u8, __name_len: u64) -> s32;
extern fn setlogin(__name: *const u8) -> s32;
optarg: *mut u8;
optind: s32;
opterr: s32;
optopt: s32;
extern fn getopt(___argc: s32, ___argv: *const *mut u8, __shortopts: *const u8) -> s32;
extern fn gethostname(__name: *mut u8, __len: u64) -> s32;
extern fn sethostname(__name: *const u8, __len: u64) -> s32;
extern fn sethostid(__id: s64) -> s32;
extern fn getdomainname(__name: *mut u8, __len: u64) -> s32;
extern fn setdomainname(__name: *const u8, __len: u64) -> s32;
extern fn vhangup() -> s32;
extern fn revoke(__file: *const u8) -> s32;
extern fn profil(__sample_buffer: *mut u16, __size: u64, __offset: u64, __scale: u32) -> s32;
extern fn acct(__name: *const u8) -> s32;
extern fn getusershell() -> *mut u8;
extern fn endusershell() -> void;
extern fn setusershell() -> void;
extern fn daemon(__nochdir: s32, __noclose: s32) -> s32;
extern fn chroot(__path: *const u8) -> s32;
extern fn getpass(__prompt: *const u8) -> *mut u8;
extern fn fsync(__fd: s32) -> s32;
extern fn gethostid() -> s64;
extern fn sync() -> void;
extern fn getpagesize() -> s32;
extern fn getdtablesize() -> s32;
extern fn truncate(__file: *const u8, __length: __off_t) -> s32;
extern fn ftruncate(__fd: s32, __length: __off_t) -> s32;
extern fn brk(__addr: *mut void) -> s32;
extern fn sbrk(__delta: s64) -> *mut void;
extern fn syscall(__sysno: s64) -> s64;
extern fn lockf(__fd: s32, __cmd: s32, __len: __off_t) -> s32;
extern fn fdatasync(__fildes: s32) -> s32;
extern fn crypt(__key: *const u8, __salt: *const u8) -> *mut u8;
extern fn getentropy(__buffer: *mut void, __length: u64) -> s32;
