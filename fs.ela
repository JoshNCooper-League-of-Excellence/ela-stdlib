import fmt::*;

const EOF := -1;

struct _IO_FILE;
type FILE :: _IO_FILE;

struct Time_Spec {
  tv_sec: s64,
  tv_nsec: s64,
};

struct Stat {
  st_dev: u64,
  st_ino: u64,
  st_nlink: u64,
  st_mode: u32,
  st_uid: u32,
  st_gid: u32,
  __pad0: s32,
  st_rdev: u64,
  st_size: u64,
  st_blksize: s64,
  st_blocks: s64,
  st_atim: Time_Spec,
  st_mtim: Time_Spec,
  st_ctim: Time_Spec,
  __glibc_reserved: [3; s64],
};

extern fn fstat(fd: s32, stat: *mut Stat) -> s32;
extern fn fileno(file: *const FILE) -> s32;

/* Idk the validity of these methods, just written by chatgpt */
impl Stat {
  fn new!<T>(path: T) -> Option!<#self> where T: AsByteSlice {
    file := fopen(path.as_byte_slice().data, "r"c);

    if !file {
      fclose(file); // probably not needed?
      return Option!<#self>::None;
    }

    mut stat: #self;
    fd := fileno(file);

    if fd == -1 {
      fclose(file);
      return Option!<#self>::None;
    }

    fstat(fd, &mut stat);
    fclose(file);
    return Option!<#self>::Some(stat);
  }

  fn is_dir(*const self) -> bool {
      return (self.st_mode & 0xF000) == 0x4000;
  }
  
  fn is_file(*const self) -> bool {
      return (self.st_mode & 0xF000) == 0x8000;
  }
  
  fn is_symlink(*const self) -> bool {
      return (self.st_mode & 0xF000) == 0xA000;
  }
  
  fn is_block_device(*const self) -> bool {
      return (self.st_mode & 0xF000) == 0x6000;
  }
  
  fn is_char_device(*const self) -> bool {
      return (self.st_mode & 0xF000) == 0x2000;
  }
  
  fn is_fifo(*const self) -> bool {
      return (self.st_mode & 0xF000) == 0x1000;
  }
  
  fn is_socket(*const self) -> bool {
      return (self.st_mode & 0xF000) == 0xC000;
  }
}

enum SeekPosition {
  // Seek from beginning of file.
  Begin,
  // Seek from current position.
  Current,
  // Seek from end of file.
  End,
}

extern fn fread(ptr: *mut void, size: u64, count: u64, stream: *mut FILE) -> u64;
extern fn fwrite(ptr: *const void, size: u64, count: u64, stream: *mut FILE) -> u64;
extern fn fseek(stream: *mut FILE, offset: s64, origin: s32) -> s32;
extern fn ftell(stream: *const FILE) -> s64;
extern fn rewind(stream: *mut FILE) -> void;
extern fn fopen(fname: *const u8, flags: *const u8) -> *mut FILE;
extern fn fclose(file: *mut FILE) -> void;
extern fn fgetc(file: *mut FILE) -> s8;
extern fn putc(ch: u8, file: *mut FILE) -> void;
extern fn fprintf(stream: *mut FILE, format: c_str, ...) -> s32;
extern fn fflush(f: *const FILE);

// TODO: add a way to do Binary stuff.
#flags enum FileOpenFlags {
  Read,
  Write,
}

impl FileOpenFlags {
  // Used to convert our flag enum to a str for fopen/fclose etc.
  // this does not ever need to be freed.
  fn as_str(self) -> c_str {
    if self == FileOpenFlags::Read {
      return "r"c;
    } else if self == FileOpenFlags::Write {
      return "w"c;
    } else if self == FileOpenFlags::Read | FileOpenFlags::Write {
      return "rw"c;
    } else {
      panic("unexpected file flags passed to a file api function");
      return null;
    }
  }
}

struct File {
  fd: *mut FILE,
}

impl File {
  fn stat(*mut self) -> Option!<Stat> {
    type Option :: Option!<Stat>;
    mut stat: Stat;
    if fstat(fileno(self.fd), &mut stat) != 0 {
      return Option::None;
    }
    return Option::Some(stat);
  }

  fn open!<T>(path: T, flags: FileOpenFlags) -> #self where T: AsByteSlice {
    slice := path.as_byte_slice();
    self: #self;
    self.fd = fopen(slice.data, flags.as_str());
    return self;
  }

  fn flush(*mut self) {
    fflush(self.fd);
  }

  fn close(*const self) -> void {
    fflush(self.fd);
    fclose(self.fd);
  }

  fn length(file: *mut FILE) -> u32 {
    original_pos := ftell(file);
    fseek(file, 0, SeekPosition::End);
    len := ftell(file);
    fseek(file, original_pos, SeekPosition::Current);
    return len as u32;
  }

  fn read_all!<Path>(filename_path: Path) -> Result!<String, str> where Path: AsByteSlice {
    type Result :: Result!<String, str>;
    filename := filename_path.as_byte_slice();
    file := fopen(filename.data, "r"c);

    if !file then 
      return Result::Err("Couldnt open file");

    mut string: String;
    string.resize(1024);
    while {
      c := fgetc(file);
      if c == EOF then break;
      string.push(c);
    }
    fclose(file);
    return Result::Ok(string);
  }
  
  fn read_bytes!<Path>(path: Path) -> Result!<List!<u8>, str> where Path: AsByteSlice {
    type Result :: Result!<List!<u8>, str>;
    filename := path.as_byte_slice();
    file := fopen(filename.data, "r"c);
    if !file then return Result::Err("Couldnt open file");
    mut bytes: List!<u8>;
    bytes.resize(1024);

    while {
      c := fgetc(file);
      if c == EOF then break;
      bytes.push(c);
    }
    
    fclose(file);
    return Result::Ok(bytes);
  }
  
  fn write_all!<Path, Data>(path: Path, data_slice: Data) -> Option!<str> 
    where Path: AsByteSlice, Data: AsByteSlice {
    type Option :: Option!<str>;

    filename := path.as_byte_slice();

    data := data_slice.as_byte_slice();

    file := fopen(filename.data, "w "c);

    if !file {
      return Option::Some("Unable to open file");
    }

    fwrite(data.data, sizeof(u8), data.length, file);

    fclose(file);

    return Option::None;
  }
}

impl Destroy for File {
  fn destroy(*mut self, recursive: bool = true) {
    self.close();
  }
}

struct DIR;
extern fn getcwd(buf: c_str, size: u64) -> c_str;

struct dirent {
  d_ino: u64,
  d_off: u64,
  d_reclen: u16,
  d_type: u8,
  d_name: [256; u8],
}

extern fn opendir(name: *const u8) -> *mut DIR;
extern fn readdir(dir: *mut DIR) -> *const dirent;
extern fn closedir(dir: *const void) -> s32;

struct Directory {
  path: String,
  entries: List!<String>,
}

impl Directory {
  fn current() -> String {
    buffer: [256; u8];
    getcwd(buffer, 256);
    return String::from_ptr(buffer);
  }

  fn open!<T>(path: T) -> Option!<Directory> where T: AsByteSlice {
    dir := opendir(path.as_byte_slice().data);
    if !dir => Option!<Directory>::None;

    mut entries: List!<String>;
    mut entry: *mut void;

    while entry = readdir(dir) {
      ent : *const dirent = entry;
      entries.push(String::from_ptr(ent.d_name));
    }

    closedir(dir);

    return Option!<Directory>::Some(.{
      path: String::from(path), 
      entries: entries
    });
  }

  fn files(*const self) -> List!<String> {
    mut files: List!<String>;
    for entry in self.entries {
      file_stat := Stat::new(entry);
      if file_stat.is_none() then continue;
      file := file_stat.unwrap();
      if file.is_file() {
        files.push(entry.clone());
      }
    }
    return files;
  }

  fn subdirectories(*const self) -> List!<String> {
    mut files: List!<String>;
    for entry in self.entries {
      dir_stat := Stat::new(entry);
      if dir_stat.is_none() then continue;
      dir := dir_stat.unwrap();
      if dir.is_dir() {
        files.push(entry.clone());
      }
    }
    return files;
  }
}

impl Destroy for Directory {
  fn destroy(*mut self, recursive: bool = true) {
    self.path.destroy();
    self.entries.destroy();
  }
}

/* 
  ! We should make a solid decision if we want the free functions like the ones below
  ! to be within a struct as associated functions, or if we want to keep them free functions
  ! floating in our module. I think I prefer the latter, but it's easy to change for now.
*/
/* 
  ! I just copied this from my system, we need a better way to get this.
  ! should use pathconf.
*/
const PATH_MAX := 4096;

extern fn realpath(path: *const u8, result: *mut u8) -> *const u8;

fn canonical_path!<Path>(path: Path) -> Option!<String> where Path: AsByteSlice {
  slice := path.as_byte_slice();
  if slice.length == 0 {
    return None();
  }
  mut resolved_path: [PATH_MAX; u8];
  if !realpath(slice.data, resolved_path) {
    return None();
  }
  return Some(String::from_ptr(resolved_path));
}

extern fn chdir(path: *const u8) -> s32;
extern fn dirname(path: *const u8) -> *mut u8;

/* 
  The option return _type simply says when it .is_none(), it has failed in some capacity.
  We don't have a way to interact with perror, so we don't really get much information as to why
  this has failed, just that it did fail.
*/
fn change_directory!<Path>(path: Path) -> Option!<()> where Path: AsByteSlice {
  slice := path.as_byte_slice();
  if slice.length == 0 {
    return None();
  }
  if chdir(slice.data) != 0 {
    return None();
  }
  return Some(());
}

fn parent_path!<Path>(path: Path) -> Option!<String> where Path: AsByteSlice {
  slice := path.as_byte_slice();
  if slice.length == 0 {
    return None();
  }
  mut data := std::c::strdup(slice.data);
  defer std::c::free(data);
  name := dirname(data);
  if !name {
    return None();
  }
  return Some(String::from_ptr(name));
}