#ifndef FREESTANDING  {
  mem_zero :: fn!<T>(ptr: T*, count: u64) {
    memset(ptr, 0, sizeof(T) * count);
  }
  Libc_Allocator :: struct {}

  impl Allocator for Libc_Allocator {
    allocate :: fn(self*, size: u64) -> void* {
      return malloc(size);
    }
    free :: fn(self*, ptr: void*) {
      free(ptr);
    }
    allocate_array :: fn(self*, size: u64, n: u64) -> void* {
      return calloc(size, n);
    }
    resize :: fn(self*, ptr: void*, element_size: u64, new_size: u64) -> void* {
      return realloc(ptr, element_size * new_size);
    }
    copy :: fn(self*, ptr: void*, element_size: u64, n: u64) -> void* {
      newptr := self.allocate_array(element_size, n);
      memcpy(newptr, ptr, n * element_size);
      return newptr;
    }
  }
  impl Libc_Allocator {
    get :: fn() -> #self {
      #static self: #self;
      return self;
    }
  }
  Tracking_Allocator :: struct {
    pointers: void*[],
  }
  impl Deinit for Tracking_Allocator {
    deinit :: fn(self*) {
      while self.pointers.length {
        free(self.pointers.pop());
      }
      self.pointers.deinit();
    }
  }
  impl Allocator for Tracking_Allocator {
    allocate :: fn(self*, size: u64) -> void* {
      ptr := malloc(size);
      self.pointers.push(ptr);
      return ptr;
    }

    free :: fn(self*, ptr: void*) {
      self.pointers.remove(ptr);
      free(ptr);
    }

    allocate_array :: fn(self*, size: u64, n: u64) -> void* {
      ptr := calloc(size, n);
      self.pointers.push(ptr);
      return ptr;
    }

    resize :: fn(self*, ptr: void*, element_size: u64, new_size: u64) -> void* {
      if !self.pointers.contains(ptr) {
        panic("cannot resize a pointer that wasn't allocated from the same allocator that's resizing");
      }
      
      pointer := realloc(ptr, element_size * new_size);
      self.pointers.push(pointer);
      return pointer;
    }

    copy :: fn(self*, ptr: void*, element_size: u64, n: u64) -> void* {
      new_ptr := self.allocate_array(element_size, n);
      memcpy(new_ptr, ptr, n * element_size);
      self.pointers.push(new_ptr);
      return new_ptr;
    }
  }
}

