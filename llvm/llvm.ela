
#c_flags " $(llvm-config --cflags --ldflags --libs) "

/*
  These bindings were auto generated by 'ela-bindings-generator', from 'llvm.c' at 2025-04-01 16:10:48. 
*/

alias LLVMBool :: s32;
LLVMOpaqueMemoryBuffer :: struct;
alias LLVMMemoryBufferRef :: *mut LLVMOpaqueMemoryBuffer;
LLVMOpaqueContext :: struct;
alias LLVMContextRef :: *mut LLVMOpaqueContext;
LLVMOpaqueModule :: struct;
alias LLVMModuleRef :: *mut LLVMOpaqueModule;
LLVMOpaqueType :: struct;
alias LLVMTypeRef :: *mut LLVMOpaqueType;
LLVMOpaqueValue :: struct;
alias LLVMValueRef :: *mut LLVMOpaqueValue;
LLVMOpaqueBasicBlock :: struct;
alias LLVMBasicBlockRef :: *mut LLVMOpaqueBasicBlock;
LLVMOpaqueMetadata :: struct;
alias LLVMMetadataRef :: *mut LLVMOpaqueMetadata;
LLVMOpaqueNamedMDNode :: struct;
alias LLVMNamedMDNodeRef :: *mut LLVMOpaqueNamedMDNode;
LLVMOpaqueValueMetadataEntry :: struct;
alias LLVMValueMetadataEntry :: LLVMOpaqueValueMetadataEntry;
LLVMOpaqueBuilder :: struct;
alias LLVMBuilderRef :: *mut LLVMOpaqueBuilder;
LLVMOpaqueDIBuilder :: struct;
alias LLVMDIBuilderRef :: *mut LLVMOpaqueDIBuilder;
LLVMOpaqueModuleProvider :: struct;
alias LLVMModuleProviderRef :: *mut LLVMOpaqueModuleProvider;
LLVMOpaquePassManager :: struct;
alias LLVMPassManagerRef :: *mut LLVMOpaquePassManager;
LLVMOpaqueUse :: struct;
alias LLVMUseRef :: *mut LLVMOpaqueUse;
LLVMOpaqueOperandBundle :: struct;
alias LLVMOperandBundleRef :: *mut LLVMOpaqueOperandBundle;
LLVMOpaqueAttributeRef :: struct;
alias LLVMAttributeRef :: *mut LLVMOpaqueAttributeRef;
LLVMOpaqueDiagnosticInfo :: struct;
alias LLVMDiagnosticInfoRef :: *mut LLVMOpaqueDiagnosticInfo;
LLVMComdat :: struct;
alias LLVMComdatRef :: *mut LLVMComdat;
LLVMOpaqueModuleFlagEntry :: struct;
alias LLVMModuleFlagEntry :: LLVMOpaqueModuleFlagEntry;
LLVMOpaqueJITEventListener :: struct;
alias LLVMJITEventListenerRef :: *mut LLVMOpaqueJITEventListener;
LLVMOpaqueBinary :: struct;
alias LLVMBinaryRef :: *mut LLVMOpaqueBinary;
LLVMOpaqueDbgRecord :: struct;
alias LLVMDbgRecordRef :: *mut LLVMOpaqueDbgRecord;
LLVMVerifierFailureAction :: enum {
  LLVMAbortProcessAction = 0,
  LLVMPrintMessageAction = 1,
  LLVMReturnStatusAction = 2,
};
#foreign LLVMVerifyModule :: fn(M: LLVMModuleRef, Action: LLVMVerifierFailureAction, OutMessage: *mut *mut u8) -> LLVMBool;
#foreign LLVMVerifyFunction :: fn(Fn: LLVMValueRef, Action: LLVMVerifierFailureAction) -> LLVMBool;
#foreign LLVMViewFunctionCFG :: fn(Fn: LLVMValueRef) -> void;
#foreign LLVMViewFunctionCFGOnly :: fn(Fn: LLVMValueRef) -> void;
#foreign LLVMParseBitcode :: fn(MemBuf: LLVMMemoryBufferRef, OutModule: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> LLVMBool;
#foreign LLVMParseBitcode2 :: fn(MemBuf: LLVMMemoryBufferRef, OutModule: *mut LLVMModuleRef) -> LLVMBool;
#foreign LLVMParseBitcodeInContext :: fn(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutModule: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> LLVMBool;
#foreign LLVMParseBitcodeInContext2 :: fn(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutModule: *mut LLVMModuleRef) -> LLVMBool;
#foreign LLVMGetBitcodeModuleInContext :: fn(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> LLVMBool;
#foreign LLVMGetBitcodeModuleInContext2 :: fn(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef) -> LLVMBool;
#foreign LLVMGetBitcodeModule :: fn(MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> LLVMBool;
#foreign LLVMGetBitcodeModule2 :: fn(MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef) -> LLVMBool;
#foreign LLVMWriteBitcodeToFile :: fn(M: LLVMModuleRef, Path: *const u8) -> s32;
#foreign LLVMWriteBitcodeToFD :: fn(M: LLVMModuleRef, FD: s32, ShouldClose: s32, Unbuffered: s32) -> s32;
#foreign LLVMWriteBitcodeToFileHandle :: fn(M: LLVMModuleRef, Handle: s32) -> s32;
#foreign LLVMWriteBitcodeToMemoryBuffer :: fn(M: LLVMModuleRef) -> LLVMMemoryBufferRef;
LLVMComdatSelectionKind :: enum {
  LLVMAnyComdatSelectionKind = 0,
  LLVMExactMatchComdatSelectionKind = 1,
  LLVMLargestComdatSelectionKind = 2,
  LLVMNoDeduplicateComdatSelectionKind = 3,
  LLVMSameSizeComdatSelectionKind = 4,
};
#foreign LLVMGetOrInsertComdat :: fn(M: LLVMModuleRef, Name: *const u8) -> LLVMComdatRef;
#foreign LLVMGetComdat :: fn(V: LLVMValueRef) -> LLVMComdatRef;
#foreign LLVMSetComdat :: fn(V: LLVMValueRef, C: LLVMComdatRef) -> void;
#foreign LLVMGetComdatSelectionKind :: fn(C: LLVMComdatRef) -> LLVMComdatSelectionKind;
#foreign LLVMSetComdatSelectionKind :: fn(C: LLVMComdatRef, Kind: LLVMComdatSelectionKind) -> void;
alias LLVMFatalErrorHandler :: fn*(*const u8) -> void;
#foreign LLVMInstallFatalErrorHandler :: fn(Handler: LLVMFatalErrorHandler) -> void;
#foreign LLVMResetFatalErrorHandler :: fn() -> void;
#foreign LLVMEnablePrettyStackTrace :: fn() -> void;
LLVMOpcode :: enum {
  LLVMRet = 1,
  LLVMBr = 2,
  LLVMSwitch = 3,
  LLVMIndirectBr = 4,
  LLVMInvoke = 5,
  LLVMUnreachable = 7,
  LLVMCallBr = 67,
  LLVMFNeg = 66,
  LLVMAdd = 8,
  LLVMFAdd = 9,
  LLVMSub = 10,
  LLVMFSub = 11,
  LLVMMul = 12,
  LLVMFMul = 13,
  LLVMUDiv = 14,
  LLVMSDiv = 15,
  LLVMFDiv = 16,
  LLVMURem = 17,
  LLVMSRem = 18,
  LLVMFRem = 19,
  LLVMShl = 20,
  LLVMLShr = 21,
  LLVMAShr = 22,
  LLVMAnd = 23,
  LLVMOr = 24,
  LLVMXor = 25,
  LLVMAlloca = 26,
  LLVMLoad = 27,
  LLVMStore = 28,
  LLVMGetElementPtr = 29,
  LLVMTrunc = 30,
  LLVMZExt = 31,
  LLVMSExt = 32,
  LLVMFPToUI = 33,
  LLVMFPToSI = 34,
  LLVMUIToFP = 35,
  LLVMSIToFP = 36,
  LLVMFPTrunc = 37,
  LLVMFPExt = 38,
  LLVMPtrToInt = 39,
  LLVMIntToPtr = 40,
  LLVMBitCast = 41,
  LLVMAddrSpaceCast = 60,
  LLVMICmp = 42,
  LLVMFCmp = 43,
  LLVMPHI = 44,
  LLVMCall = 45,
  LLVMSelect = 46,
  LLVMUserOp1 = 47,
  LLVMUserOp2 = 48,
  LLVMVAArg = 49,
  LLVMExtractElement = 50,
  LLVMInsertElement = 51,
  LLVMShuffleVector = 52,
  LLVMExtractValue = 53,
  LLVMInsertValue = 54,
  LLVMFreeze = 68,
  LLVMFence = 55,
  LLVMAtomicCmpXchg = 56,
  LLVMAtomicRMW = 57,
  LLVMResume = 58,
  LLVMLandingPad = 59,
  LLVMCleanupRet = 61,
  LLVMCatchRet = 62,
  LLVMCatchPad = 63,
  LLVMCleanupPad = 64,
  LLVMCatchSwitch = 65,
};
LLVMTypeKind :: enum {
  LLVMVoidTypeKind = 0,
  LLVMHalfTypeKind = 1,
  LLVMFloatTypeKind = 2,
  LLVMDoubleTypeKind = 3,
  LLVMX86_FP80TypeKind = 4,
  LLVMFP128TypeKind = 5,
  LLVMPPC_FP128TypeKind = 6,
  LLVMLabelTypeKind = 7,
  LLVMIntegerTypeKind = 8,
  LLVMFunctionTypeKind = 9,
  LLVMStructTypeKind = 10,
  LLVMArrayTypeKind = 11,
  LLVMPointerTypeKind = 12,
  LLVMVectorTypeKind = 13,
  LLVMMetadataTypeKind = 14,
  LLVMX86_MMXTypeKind = 15,
  LLVMTokenTypeKind = 16,
  LLVMScalableVectorTypeKind = 17,
  LLVMBFloatTypeKind = 18,
  LLVMX86_AMXTypeKind = 19,
  LLVMTargetExtTypeKind = 20,
};
LLVMLinkage :: enum {
  LLVMExternalLinkage = 0,
  LLVMAvailableExternallyLinkage = 1,
  LLVMLinkOnceAnyLinkage = 2,
  LLVMLinkOnceODRLinkage = 3,
  LLVMLinkOnceODRAutoHideLinkage = 4,
  LLVMWeakAnyLinkage = 5,
  LLVMWeakODRLinkage = 6,
  LLVMAppendingLinkage = 7,
  LLVMInternalLinkage = 8,
  LLVMPrivateLinkage = 9,
  LLVMDLLImportLinkage = 10,
  LLVMDLLExportLinkage = 11,
  LLVMExternalWeakLinkage = 12,
  LLVMGhostLinkage = 13,
  LLVMCommonLinkage = 14,
  LLVMLinkerPrivateLinkage = 15,
  LLVMLinkerPrivateWeakLinkage = 16,
};
LLVMVisibility :: enum {
  LLVMDefaultVisibility = 0,
  LLVMHiddenVisibility = 1,
  LLVMProtectedVisibility = 2,
};
LLVMUnnamedAddr :: enum {
  LLVMNoUnnamedAddr = 0,
  LLVMLocalUnnamedAddr = 1,
  LLVMGlobalUnnamedAddr = 2,
};
LLVMDLLStorageClass :: enum {
  LLVMDefaultStorageClass = 0,
  LLVMDLLImportStorageClass = 1,
  LLVMDLLExportStorageClass = 2,
};
LLVMCallConv :: enum {
  LLVMCCallConv = 0,
  LLVMFastCallConv = 8,
  LLVMColdCallConv = 9,
  LLVMGHCCallConv = 10,
  LLVMHiPECallConv = 11,
  LLVMAnyRegCallConv = 13,
  LLVMPreserveMostCallConv = 14,
  LLVMPreserveAllCallConv = 15,
  LLVMSwiftCallConv = 16,
  LLVMCXXFASTTLSCallConv = 17,
  LLVMX86StdcallCallConv = 64,
  LLVMX86FastcallCallConv = 65,
  LLVMARMAPCSCallConv = 66,
  LLVMARMAAPCSCallConv = 67,
  LLVMARMAAPCSVFPCallConv = 68,
  LLVMMSP430INTRCallConv = 69,
  LLVMX86ThisCallCallConv = 70,
  LLVMPTXKernelCallConv = 71,
  LLVMPTXDeviceCallConv = 72,
  LLVMSPIRFUNCCallConv = 75,
  LLVMSPIRKERNELCallConv = 76,
  LLVMIntelOCLBICallConv = 77,
  LLVMX8664SysVCallConv = 78,
  LLVMWin64CallConv = 79,
  LLVMX86VectorCallCallConv = 80,
  LLVMHHVMCallConv = 81,
  LLVMHHVMCCallConv = 82,
  LLVMX86INTRCallConv = 83,
  LLVMAVRINTRCallConv = 84,
  LLVMAVRSIGNALCallConv = 85,
  LLVMAVRBUILTINCallConv = 86,
  LLVMAMDGPUVSCallConv = 87,
  LLVMAMDGPUGSCallConv = 88,
  LLVMAMDGPUPSCallConv = 89,
  LLVMAMDGPUCSCallConv = 90,
  LLVMAMDGPUKERNELCallConv = 91,
  LLVMX86RegCallCallConv = 92,
  LLVMAMDGPUHSCallConv = 93,
  LLVMMSP430BUILTINCallConv = 94,
  LLVMAMDGPULSCallConv = 95,
  LLVMAMDGPUESCallConv = 96,
};
LLVMValueKind :: enum {
  LLVMArgumentValueKind = 0,
  LLVMBasicBlockValueKind = 1,
  LLVMMemoryUseValueKind = 2,
  LLVMMemoryDefValueKind = 3,
  LLVMMemoryPhiValueKind = 4,
  LLVMFunctionValueKind = 5,
  LLVMGlobalAliasValueKind = 6,
  LLVMGlobalIFuncValueKind = 7,
  LLVMGlobalVariableValueKind = 8,
  LLVMBlockAddressValueKind = 9,
  LLVMConstantExprValueKind = 10,
  LLVMConstantArrayValueKind = 11,
  LLVMConstantStructValueKind = 12,
  LLVMConstantVectorValueKind = 13,
  LLVMUndefValueValueKind = 14,
  LLVMConstantAggregateZeroValueKind = 15,
  LLVMConstantDataArrayValueKind = 16,
  LLVMConstantDataVectorValueKind = 17,
  LLVMConstantIntValueKind = 18,
  LLVMConstantFPValueKind = 19,
  LLVMConstantPointerNullValueKind = 20,
  LLVMConstantTokenNoneValueKind = 21,
  LLVMMetadataAsValueValueKind = 22,
  LLVMInlineAsmValueKind = 23,
  LLVMInstructionValueKind = 24,
  LLVMPoisonValueValueKind = 25,
  LLVMConstantTargetNoneValueKind = 26,
  LLVMConstantPtrAuthValueKind = 27,
};
LLVMIntPredicate :: enum {
  LLVMIntEQ = 32,
  LLVMIntNE = 33,
  LLVMIntUGT = 34,
  LLVMIntUGE = 35,
  LLVMIntULT = 36,
  LLVMIntULE = 37,
  LLVMIntSGT = 38,
  LLVMIntSGE = 39,
  LLVMIntSLT = 40,
  LLVMIntSLE = 41,
};
LLVMRealPredicate :: enum {
  LLVMRealPredicateFalse = 0,
  LLVMRealOEQ = 1,
  LLVMRealOGT = 2,
  LLVMRealOGE = 3,
  LLVMRealOLT = 4,
  LLVMRealOLE = 5,
  LLVMRealONE = 6,
  LLVMRealORD = 7,
  LLVMRealUNO = 8,
  LLVMRealUEQ = 9,
  LLVMRealUGT = 10,
  LLVMRealUGE = 11,
  LLVMRealULT = 12,
  LLVMRealULE = 13,
  LLVMRealUNE = 14,
  LLVMRealPredicateTrue = 15,
};
LLVMLandingPadClauseTy :: enum {
  LLVMLandingPadCatch = 0,
  LLVMLandingPadFilter = 1,
};
LLVMThreadLocalMode :: enum {
  LLVMNotThreadLocal = 0,
  LLVMGeneralDynamicTLSModel = 1,
  LLVMLocalDynamicTLSModel = 2,
  LLVMInitialExecTLSModel = 3,
  LLVMLocalExecTLSModel = 4,
};
LLVMAtomicOrdering :: enum {
  LLVMAtomicOrderingNotAtomic = 0,
  LLVMAtomicOrderingUnordered = 1,
  LLVMAtomicOrderingMonotonic = 2,
  LLVMAtomicOrderingAcquire = 4,
  LLVMAtomicOrderingRelease = 5,
  LLVMAtomicOrderingAcquireRelease = 6,
  LLVMAtomicOrderingSequentiallyConsistent = 7,
};
LLVMAtomicRMWBinOp :: enum {
  LLVMAtomicRMWBinOpXchg = 0,
  LLVMAtomicRMWBinOpAdd = 1,
  LLVMAtomicRMWBinOpSub = 2,
  LLVMAtomicRMWBinOpAnd = 3,
  LLVMAtomicRMWBinOpNand = 4,
  LLVMAtomicRMWBinOpOr = 5,
  LLVMAtomicRMWBinOpXor = 6,
  LLVMAtomicRMWBinOpMax = 7,
  LLVMAtomicRMWBinOpMin = 8,
  LLVMAtomicRMWBinOpUMax = 9,
  LLVMAtomicRMWBinOpUMin = 10,
  LLVMAtomicRMWBinOpFAdd = 11,
  LLVMAtomicRMWBinOpFSub = 12,
  LLVMAtomicRMWBinOpFMax = 13,
  LLVMAtomicRMWBinOpFMin = 14,
  LLVMAtomicRMWBinOpUIncWrap = 15,
  LLVMAtomicRMWBinOpUDecWrap = 16,
};
LLVMDiagnosticSeverity :: enum {
  LLVMDSError = 0,
  LLVMDSWarning = 1,
  LLVMDSRemark = 2,
  LLVMDSNote = 3,
};
LLVMInlineAsmDialect :: enum {
  LLVMInlineAsmDialectATT = 0,
  LLVMInlineAsmDialectIntel = 1,
};
LLVMModuleFlagBehavior :: enum {
  LLVMModuleFlagBehaviorError = 0,
  LLVMModuleFlagBehaviorWarning = 1,
  LLVMModuleFlagBehaviorRequire = 2,
  LLVMModuleFlagBehaviorOverride = 3,
  LLVMModuleFlagBehaviorAppend = 4,
  LLVMModuleFlagBehaviorAppendUnique = 5,
};
__bind_gen__anon_D4 :: enum {
  LLVMAttributeReturnIndex = 0,
  LLVMAttributeFunctionIndex = -1,
};
alias LLVMAttributeIndex :: u32;
LLVMTailCallKind :: enum {
  LLVMTailCallKindNone = 0,
  LLVMTailCallKindTail = 1,
  LLVMTailCallKindMustTail = 2,
  LLVMTailCallKindNoTail = 3,
};
__bind_gen__anon_D5 :: enum {
  LLVMFastMathAllowReassoc = 1,
  LLVMFastMathNoNaNs = 2,
  LLVMFastMathNoInfs = 4,
  LLVMFastMathNoSignedZeros = 8,
  LLVMFastMathAllowReciprocal = 16,
  LLVMFastMathAllowContract = 32,
  LLVMFastMathApproxFunc = 64,
  LLVMFastMathNone = 0,
  LLVMFastMathAll = 127,
};
alias LLVMFastMathFlags :: u32;
__bind_gen__anon_D6 :: enum {
  LLVMGEPFlagInBounds = 1,
  LLVMGEPFlagNUSW = 2,
  LLVMGEPFlagNUW = 4,
};
alias LLVMGEPNoWrapFlags :: u32;
#foreign LLVMShutdown :: fn() -> void;
#foreign LLVMGetVersion :: fn(Major: *mut u32, Minor: *mut u32, Patch: *mut u32) -> void;
#foreign LLVMCreateMessage :: fn(Message: *const u8) -> *mut u8;
#foreign LLVMDisposeMessage :: fn(Message: *mut u8) -> void;
alias LLVMDiagnosticHandler :: fn*(LLVMDiagnosticInfoRef, *mut void) -> void;
alias LLVMYieldCallback :: fn*(LLVMContextRef, *mut void) -> void;
#foreign LLVMContextCreate :: fn() -> LLVMContextRef;
#foreign LLVMGetGlobalContext :: fn() -> LLVMContextRef;
#foreign LLVMContextSetDiagnosticHandler :: fn(C: LLVMContextRef, Handler: LLVMDiagnosticHandler, DiagnosticContext: *mut void) -> void;
#foreign LLVMContextGetDiagnosticHandler :: fn(C: LLVMContextRef) -> LLVMDiagnosticHandler;
#foreign LLVMContextGetDiagnosticContext :: fn(C: LLVMContextRef) -> *mut void;
#foreign LLVMContextSetYieldCallback :: fn(C: LLVMContextRef, Callback: LLVMYieldCallback, OpaqueHandle: *mut void) -> void;
#foreign LLVMContextShouldDiscardValueNames :: fn(C: LLVMContextRef) -> LLVMBool;
#foreign LLVMContextSetDiscardValueNames :: fn(C: LLVMContextRef, Discard: LLVMBool) -> void;
#foreign LLVMContextDispose :: fn(C: LLVMContextRef) -> void;
#foreign LLVMGetDiagInfoDescription :: fn(DI: LLVMDiagnosticInfoRef) -> *mut u8;
#foreign LLVMGetDiagInfoSeverity :: fn(DI: LLVMDiagnosticInfoRef) -> LLVMDiagnosticSeverity;
#foreign LLVMGetMDKindIDInContext :: fn(C: LLVMContextRef, Name: *const u8, SLen: u32) -> u32;
#foreign LLVMGetMDKindID :: fn(Name: *const u8, SLen: u32) -> u32;
#foreign LLVMGetEnumAttributeKindForName :: fn(Name: *const u8, SLen: u64) -> u32;
#foreign LLVMGetLastEnumAttributeKind :: fn() -> u32;
#foreign LLVMCreateEnumAttribute :: fn(C: LLVMContextRef, KindID: u32, Val: u64) -> LLVMAttributeRef;
#foreign LLVMGetEnumAttributeKind :: fn(A: LLVMAttributeRef) -> u32;
#foreign LLVMGetEnumAttributeValue :: fn(A: LLVMAttributeRef) -> u64;
#foreign LLVMCreateTypeAttribute :: fn(C: LLVMContextRef, KindID: u32, type_ref: LLVMTypeRef) -> LLVMAttributeRef;
#foreign LLVMGetTypeAttributeValue :: fn(A: LLVMAttributeRef) -> LLVMTypeRef;
#foreign LLVMCreateConstantRangeAttribute :: fn(C: LLVMContextRef, KindID: u32, NumBits: u32, LowerWords: *const u64, UpperWords: *const u64) -> LLVMAttributeRef;
#foreign LLVMCreateStringAttribute :: fn(C: LLVMContextRef, K: *const u8, KLength: u32, V: *const u8, VLength: u32) -> LLVMAttributeRef;
#foreign LLVMGetStringAttributeKind :: fn(A: LLVMAttributeRef, Length: *mut u32) -> *const u8;
#foreign LLVMGetStringAttributeValue :: fn(A: LLVMAttributeRef, Length: *mut u32) -> *const u8;
#foreign LLVMIsEnumAttribute :: fn(A: LLVMAttributeRef) -> LLVMBool;
#foreign LLVMIsStringAttribute :: fn(A: LLVMAttributeRef) -> LLVMBool;
#foreign LLVMIsTypeAttribute :: fn(A: LLVMAttributeRef) -> LLVMBool;
#foreign LLVMGetTypeByName2 :: fn(C: LLVMContextRef, Name: *const u8) -> LLVMTypeRef;
#foreign LLVMModuleCreateWithName :: fn(ModuleID: *const u8) -> LLVMModuleRef;
#foreign LLVMModuleCreateWithNameInContext :: fn(ModuleID: *const u8, C: LLVMContextRef) -> LLVMModuleRef;
#foreign LLVMCloneModule :: fn(M: LLVMModuleRef) -> LLVMModuleRef;
#foreign LLVMDisposeModule :: fn(M: LLVMModuleRef) -> void;
#foreign LLVMIsNewDbgInfoFormat :: fn(M: LLVMModuleRef) -> LLVMBool;
#foreign LLVMSetIsNewDbgInfoFormat :: fn(M: LLVMModuleRef, UseNewFormat: LLVMBool) -> void;
#foreign LLVMGetModuleIdentifier :: fn(M: LLVMModuleRef, Len: *mut u64) -> *const u8;
#foreign LLVMSetModuleIdentifier :: fn(M: LLVMModuleRef, Ident: *const u8, Len: u64) -> void;
#foreign LLVMGetSourceFileName :: fn(M: LLVMModuleRef, Len: *mut u64) -> *const u8;
#foreign LLVMSetSourceFileName :: fn(M: LLVMModuleRef, Name: *const u8, Len: u64) -> void;
#foreign LLVMGetDataLayoutStr :: fn(M: LLVMModuleRef) -> *const u8;
#foreign LLVMGetDataLayout :: fn(M: LLVMModuleRef) -> *const u8;
#foreign LLVMSetDataLayout :: fn(M: LLVMModuleRef, DataLayoutStr: *const u8) -> void;
#foreign LLVMGetTarget :: fn(M: LLVMModuleRef) -> *const u8;
#foreign LLVMSetTarget :: fn(M: LLVMModuleRef, Triple: *const u8) -> void;
#foreign LLVMCopyModuleFlagsMetadata :: fn(M: LLVMModuleRef, Len: *mut u64) -> *mut LLVMModuleFlagEntry;
#foreign LLVMDisposeModuleFlagsMetadata :: fn(Entries: *mut LLVMModuleFlagEntry) -> void;
#foreign LLVMModuleFlagEntriesGetFlagBehavior :: fn(Entries: *mut LLVMModuleFlagEntry, Index: u32) -> LLVMModuleFlagBehavior;
#foreign LLVMModuleFlagEntriesGetKey :: fn(Entries: *mut LLVMModuleFlagEntry, Index: u32, Len: *mut u64) -> *const u8;
#foreign LLVMModuleFlagEntriesGetMetadata :: fn(Entries: *mut LLVMModuleFlagEntry, Index: u32) -> LLVMMetadataRef;
#foreign LLVMGetModuleFlag :: fn(M: LLVMModuleRef, Key: *const u8, KeyLen: u64) -> LLVMMetadataRef;
#foreign LLVMAddModuleFlag :: fn(M: LLVMModuleRef, Behavior: LLVMModuleFlagBehavior, Key: *const u8, KeyLen: u64, Val: LLVMMetadataRef) -> void;
#foreign LLVMDumpModule :: fn(M: LLVMModuleRef) -> void;
#foreign LLVMPrintModuleToFile :: fn(M: LLVMModuleRef, Filename: *const u8, ErrorMessage: *mut *mut u8) -> LLVMBool;
#foreign LLVMPrintModuleToString :: fn(M: LLVMModuleRef) -> *mut u8;
#foreign LLVMGetModuleInlineAsm :: fn(M: LLVMModuleRef, Len: *mut u64) -> *const u8;
#foreign LLVMSetModuleInlineAsm2 :: fn(M: LLVMModuleRef, Asm: *const u8, Len: u64) -> void;
#foreign LLVMAppendModuleInlineAsm :: fn(M: LLVMModuleRef, Asm: *const u8, Len: u64) -> void;
#foreign LLVMGetInlineAsm :: fn(Ty: LLVMTypeRef, AsmString: *const u8, AsmStringSize: u64, Constraints: *const u8, ConstraintsSize: u64, HasSideEffects: LLVMBool, IsAlignStack: LLVMBool, Dialect: LLVMInlineAsmDialect, CanThrow: LLVMBool) -> LLVMValueRef;
#foreign LLVMGetInlineAsmAsmString :: fn(InlineAsmVal: LLVMValueRef, Len: *mut u64) -> *const u8;
#foreign LLVMGetInlineAsmConstraintString :: fn(InlineAsmVal: LLVMValueRef, Len: *mut u64) -> *const u8;
#foreign LLVMGetInlineAsmDialect :: fn(InlineAsmVal: LLVMValueRef) -> LLVMInlineAsmDialect;
#foreign LLVMGetInlineAsmFunctionType :: fn(InlineAsmVal: LLVMValueRef) -> LLVMTypeRef;
#foreign LLVMGetInlineAsmHasSideEffects :: fn(InlineAsmVal: LLVMValueRef) -> LLVMBool;
#foreign LLVMGetInlineAsmNeedsAlignedStack :: fn(InlineAsmVal: LLVMValueRef) -> LLVMBool;
#foreign LLVMGetInlineAsmCanUnwind :: fn(InlineAsmVal: LLVMValueRef) -> LLVMBool;
#foreign LLVMGetModuleContext :: fn(M: LLVMModuleRef) -> LLVMContextRef;
#foreign LLVMGetTypeByName :: fn(M: LLVMModuleRef, Name: *const u8) -> LLVMTypeRef;
#foreign LLVMGetFirstNamedMetadata :: fn(M: LLVMModuleRef) -> LLVMNamedMDNodeRef;
#foreign LLVMGetLastNamedMetadata :: fn(M: LLVMModuleRef) -> LLVMNamedMDNodeRef;
#foreign LLVMGetNextNamedMetadata :: fn(NamedMDNode: LLVMNamedMDNodeRef) -> LLVMNamedMDNodeRef;
#foreign LLVMGetPreviousNamedMetadata :: fn(NamedMDNode: LLVMNamedMDNodeRef) -> LLVMNamedMDNodeRef;
#foreign LLVMGetNamedMetadata :: fn(M: LLVMModuleRef, Name: *const u8, NameLen: u64) -> LLVMNamedMDNodeRef;
#foreign LLVMGetOrInsertNamedMetadata :: fn(M: LLVMModuleRef, Name: *const u8, NameLen: u64) -> LLVMNamedMDNodeRef;
#foreign LLVMGetNamedMetadataName :: fn(NamedMD: LLVMNamedMDNodeRef, NameLen: *mut u64) -> *const u8;
#foreign LLVMGetNamedMetadataNumOperands :: fn(M: LLVMModuleRef, Name: *const u8) -> u32;
#foreign LLVMGetNamedMetadataOperands :: fn(M: LLVMModuleRef, Name: *const u8, Dest: *mut LLVMValueRef) -> void;
#foreign LLVMAddNamedMetadataOperand :: fn(M: LLVMModuleRef, Name: *const u8, Val: LLVMValueRef) -> void;
#foreign LLVMGetDebugLocDirectory :: fn(Val: LLVMValueRef, Length: *mut u32) -> *const u8;
#foreign LLVMGetDebugLocFilename :: fn(Val: LLVMValueRef, Length: *mut u32) -> *const u8;
#foreign LLVMGetDebugLocLine :: fn(Val: LLVMValueRef) -> u32;
#foreign LLVMGetDebugLocColumn :: fn(Val: LLVMValueRef) -> u32;
#foreign LLVMAddFunction :: fn(M: LLVMModuleRef, Name: *const u8, FunctionTy: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMGetNamedFunction :: fn(M: LLVMModuleRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMGetFirstFunction :: fn(M: LLVMModuleRef) -> LLVMValueRef;
#foreign LLVMGetLastFunction :: fn(M: LLVMModuleRef) -> LLVMValueRef;
#foreign LLVMGetNextFunction :: fn(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetPreviousFunction :: fn(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMSetModuleInlineAsm :: fn(M: LLVMModuleRef, Asm: *const u8) -> void;
#foreign LLVMGetTypeKind :: fn(Ty: LLVMTypeRef) -> LLVMTypeKind;
#foreign LLVMTypeIsSized :: fn(Ty: LLVMTypeRef) -> LLVMBool;
#foreign LLVMGetTypeContext :: fn(Ty: LLVMTypeRef) -> LLVMContextRef;
#foreign LLVMDumpType :: fn(Val: LLVMTypeRef) -> void;
#foreign LLVMPrintTypeToString :: fn(Val: LLVMTypeRef) -> *mut u8;
#foreign LLVMInt1TypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMInt8TypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMInt16TypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMInt32TypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMInt64TypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMInt128TypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMIntTypeInContext :: fn(C: LLVMContextRef, NumBits: u32) -> LLVMTypeRef;
#foreign LLVMInt1Type :: fn() -> LLVMTypeRef;
#foreign LLVMInt8Type :: fn() -> LLVMTypeRef;
#foreign LLVMInt16Type :: fn() -> LLVMTypeRef;
#foreign LLVMInt32Type :: fn() -> LLVMTypeRef;
#foreign LLVMInt64Type :: fn() -> LLVMTypeRef;
#foreign LLVMInt128Type :: fn() -> LLVMTypeRef;
#foreign LLVMIntType :: fn(NumBits: u32) -> LLVMTypeRef;
#foreign LLVMGetIntTypeWidth :: fn(IntegerTy: LLVMTypeRef) -> u32;
#foreign LLVMHalfTypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMBFloatTypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMFloatTypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMDoubleTypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMX86FP80TypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMFP128TypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMPPCFP128TypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMHalfType :: fn() -> LLVMTypeRef;
#foreign LLVMBFloatType :: fn() -> LLVMTypeRef;
#foreign LLVMFloatType :: fn() -> LLVMTypeRef;
#foreign LLVMDoubleType :: fn() -> LLVMTypeRef;
#foreign LLVMX86FP80Type :: fn() -> LLVMTypeRef;
#foreign LLVMFP128Type :: fn() -> LLVMTypeRef;
#foreign LLVMPPCFP128Type :: fn() -> LLVMTypeRef;
#foreign LLVMFunctionType :: fn(ReturnType: LLVMTypeRef, ParamTypes: *mut LLVMTypeRef, ParamCount: u32, IsVarArg: LLVMBool) -> LLVMTypeRef;
#foreign LLVMIsFunctionVarArg :: fn(FunctionTy: LLVMTypeRef) -> LLVMBool;
#foreign LLVMGetReturnType :: fn(FunctionTy: LLVMTypeRef) -> LLVMTypeRef;
#foreign LLVMCountParamTypes :: fn(FunctionTy: LLVMTypeRef) -> u32;
#foreign LLVMGetParamTypes :: fn(FunctionTy: LLVMTypeRef, Dest: *mut LLVMTypeRef) -> void;
#foreign LLVMStructTypeInContext :: fn(C: LLVMContextRef, ElementTypes: *mut LLVMTypeRef, ElementCount: u32, Packed: LLVMBool) -> LLVMTypeRef;
#foreign LLVMStructType :: fn(ElementTypes: *mut LLVMTypeRef, ElementCount: u32, Packed: LLVMBool) -> LLVMTypeRef;
#foreign LLVMStructCreateNamed :: fn(C: LLVMContextRef, Name: *const u8) -> LLVMTypeRef;
#foreign LLVMGetStructName :: fn(Ty: LLVMTypeRef) -> *const u8;
#foreign LLVMStructSetBody :: fn(StructTy: LLVMTypeRef, ElementTypes: *mut LLVMTypeRef, ElementCount: u32, Packed: LLVMBool) -> void;
#foreign LLVMCountStructElementTypes :: fn(StructTy: LLVMTypeRef) -> u32;
#foreign LLVMGetStructElementTypes :: fn(StructTy: LLVMTypeRef, Dest: *mut LLVMTypeRef) -> void;
#foreign LLVMStructGetTypeAtIndex :: fn(StructTy: LLVMTypeRef, i: u32) -> LLVMTypeRef;
#foreign LLVMIsPackedStruct :: fn(StructTy: LLVMTypeRef) -> LLVMBool;
#foreign LLVMIsOpaqueStruct :: fn(StructTy: LLVMTypeRef) -> LLVMBool;
#foreign LLVMIsLiteralStruct :: fn(StructTy: LLVMTypeRef) -> LLVMBool;
#foreign LLVMGetElementType :: fn(Ty: LLVMTypeRef) -> LLVMTypeRef;
#foreign LLVMGetSubtypes :: fn(Tp: LLVMTypeRef, Arr: *mut LLVMTypeRef) -> void;
#foreign LLVMGetNumContainedTypes :: fn(Tp: LLVMTypeRef) -> u32;
#foreign LLVMArrayType :: fn(ElementType: LLVMTypeRef, ElementCount: u32) -> LLVMTypeRef;
#foreign LLVMArrayType2 :: fn(ElementType: LLVMTypeRef, ElementCount: u64) -> LLVMTypeRef;
#foreign LLVMGetArrayLength :: fn(ArrayTy: LLVMTypeRef) -> u32;
#foreign LLVMGetArrayLength2 :: fn(ArrayTy: LLVMTypeRef) -> u64;
#foreign LLVMPointerType :: fn(ElementType: LLVMTypeRef, AddressSpace: u32) -> LLVMTypeRef;
#foreign LLVMPointerTypeIsOpaque :: fn(Ty: LLVMTypeRef) -> LLVMBool;
#foreign LLVMPointerTypeInContext :: fn(C: LLVMContextRef, AddressSpace: u32) -> LLVMTypeRef;
#foreign LLVMGetPointerAddressSpace :: fn(PointerTy: LLVMTypeRef) -> u32;
#foreign LLVMVectorType :: fn(ElementType: LLVMTypeRef, ElementCount: u32) -> LLVMTypeRef;
#foreign LLVMScalableVectorType :: fn(ElementType: LLVMTypeRef, ElementCount: u32) -> LLVMTypeRef;
#foreign LLVMGetVectorSize :: fn(VectorTy: LLVMTypeRef) -> u32;
#foreign LLVMGetConstantPtrAuthPointer :: fn(PtrAuth: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetConstantPtrAuthKey :: fn(PtrAuth: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetConstantPtrAuthDiscriminator :: fn(PtrAuth: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetConstantPtrAuthAddrDiscriminator :: fn(PtrAuth: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMVoidTypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMLabelTypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMX86MMXTypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMX86AMXTypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMTokenTypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMMetadataTypeInContext :: fn(C: LLVMContextRef) -> LLVMTypeRef;
#foreign LLVMVoidType :: fn() -> LLVMTypeRef;
#foreign LLVMLabelType :: fn() -> LLVMTypeRef;
#foreign LLVMX86MMXType :: fn() -> LLVMTypeRef;
#foreign LLVMX86AMXType :: fn() -> LLVMTypeRef;
#foreign LLVMTargetExtTypeInContext :: fn(C: LLVMContextRef, Name: *const u8, TypeParams: *mut LLVMTypeRef, TypeParamCount: u32, IntParams: *mut u32, IntParamCount: u32) -> LLVMTypeRef;
#foreign LLVMGetTargetExtTypeName :: fn(TargetExtTy: LLVMTypeRef) -> *const u8;
#foreign LLVMGetTargetExtTypeNumTypeParams :: fn(TargetExtTy: LLVMTypeRef) -> u32;
#foreign LLVMGetTargetExtTypeTypeParam :: fn(TargetExtTy: LLVMTypeRef, Idx: u32) -> LLVMTypeRef;
#foreign LLVMGetTargetExtTypeNumIntParams :: fn(TargetExtTy: LLVMTypeRef) -> u32;
#foreign LLVMGetTargetExtTypeIntParam :: fn(TargetExtTy: LLVMTypeRef, Idx: u32) -> u32;
#foreign LLVMTypeOf :: fn(Val: LLVMValueRef) -> LLVMTypeRef;
#foreign LLVMGetValueKind :: fn(Val: LLVMValueRef) -> LLVMValueKind;
#foreign LLVMGetValueName2 :: fn(Val: LLVMValueRef, Length: *mut u64) -> *const u8;
#foreign LLVMSetValueName2 :: fn(Val: LLVMValueRef, Name: *const u8, NameLen: u64) -> void;
#foreign LLVMDumpValue :: fn(Val: LLVMValueRef) -> void;
#foreign LLVMPrintValueToString :: fn(Val: LLVMValueRef) -> *mut u8;
#foreign LLVMPrintDbgRecordToString :: fn(Record: LLVMDbgRecordRef) -> *mut u8;
#foreign LLVMReplaceAllUsesWith :: fn(OldVal: LLVMValueRef, NewVal: LLVMValueRef) -> void;
#foreign LLVMIsConstant :: fn(Val: LLVMValueRef) -> LLVMBool;
#foreign LLVMIsUndef :: fn(Val: LLVMValueRef) -> LLVMBool;
#foreign LLVMIsPoison :: fn(Val: LLVMValueRef) -> LLVMBool;
#foreign LLVMIsAArgument :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsABasicBlock :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAInlineAsm :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAUser :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstant :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsABlockAddress :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstantAggregateZero :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstantArray :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstantDataSequential :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstantDataArray :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstantDataVector :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstantExpr :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstantFP :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstantInt :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstantPointerNull :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstantStruct :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstantTokenNone :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstantVector :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAConstantPtrAuth :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAGlobalValue :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAGlobalAlias :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAGlobalObject :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAFunction :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAGlobalVariable :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAGlobalIFunc :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAUndefValue :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAPoisonValue :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAInstruction :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAUnaryOperator :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsABinaryOperator :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsACallInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAIntrinsicInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsADbgInfoIntrinsic :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsADbgVariableIntrinsic :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsADbgDeclareInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsADbgLabelInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAMemIntrinsic :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAMemCpyInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAMemMoveInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAMemSetInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsACmpInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAFCmpInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAICmpInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAExtractElementInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAGetElementPtrInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAInsertElementInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAInsertValueInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsALandingPadInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAPHINode :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsASelectInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAShuffleVectorInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAStoreInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsABranchInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAIndirectBrInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAInvokeInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAReturnInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsASwitchInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAUnreachableInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAResumeInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsACleanupReturnInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsACatchReturnInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsACatchSwitchInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsACallBrInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAFuncletPadInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsACatchPadInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsACleanupPadInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAUnaryInstruction :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAAllocaInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsACastInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAAddrSpaceCastInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsABitCastInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAFPExtInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAFPToSIInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAFPToUIInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAFPTruncInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAIntToPtrInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAPtrToIntInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsASExtInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsASIToFPInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsATruncInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAUIToFPInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAZExtInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAExtractValueInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsALoadInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAVAArgInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAFreezeInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAAtomicCmpXchgInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAAtomicRMWInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAFenceInst :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAMDNode :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAValueAsMetadata :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsAMDString :: fn(Val: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetValueName :: fn(Val: LLVMValueRef) -> *const u8;
#foreign LLVMSetValueName :: fn(Val: LLVMValueRef, Name: *const u8) -> void;
#foreign LLVMGetFirstUse :: fn(Val: LLVMValueRef) -> LLVMUseRef;
#foreign LLVMGetNextUse :: fn(U: LLVMUseRef) -> LLVMUseRef;
#foreign LLVMGetUser :: fn(U: LLVMUseRef) -> LLVMValueRef;
#foreign LLVMGetUsedValue :: fn(U: LLVMUseRef) -> LLVMValueRef;
#foreign LLVMGetOperand :: fn(Val: LLVMValueRef, Index: u32) -> LLVMValueRef;
#foreign LLVMGetOperandUse :: fn(Val: LLVMValueRef, Index: u32) -> LLVMUseRef;
#foreign LLVMSetOperand :: fn(User: LLVMValueRef, Index: u32, Val: LLVMValueRef) -> void;
#foreign LLVMGetNumOperands :: fn(Val: LLVMValueRef) -> s32;
#foreign LLVMConstNull :: fn(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMConstAllOnes :: fn(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMGetUndef :: fn(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMGetPoison :: fn(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMIsNull :: fn(Val: LLVMValueRef) -> LLVMBool;
#foreign LLVMConstPointerNull :: fn(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMConstInt :: fn(IntTy: LLVMTypeRef, N: u64, SignExtend: LLVMBool) -> LLVMValueRef;
#foreign LLVMConstIntOfArbitraryPrecision :: fn(IntTy: LLVMTypeRef, NumWords: u32, Words: *const u64) -> LLVMValueRef;
#foreign LLVMConstIntOfString :: fn(IntTy: LLVMTypeRef, Text: *const u8, Radix: u8) -> LLVMValueRef;
#foreign LLVMConstIntOfStringAndSize :: fn(IntTy: LLVMTypeRef, Text: *const u8, SLen: u32, Radix: u8) -> LLVMValueRef;
#foreign LLVMConstReal :: fn(RealTy: LLVMTypeRef, N: f64) -> LLVMValueRef;
#foreign LLVMConstRealOfString :: fn(RealTy: LLVMTypeRef, Text: *const u8) -> LLVMValueRef;
#foreign LLVMConstRealOfStringAndSize :: fn(RealTy: LLVMTypeRef, Text: *const u8, SLen: u32) -> LLVMValueRef;
#foreign LLVMConstIntGetZExtValue :: fn(ConstantVal: LLVMValueRef) -> u64;
#foreign LLVMConstIntGetSExtValue :: fn(ConstantVal: LLVMValueRef) -> s64;
#foreign LLVMConstRealGetDouble :: fn(ConstantVal: LLVMValueRef, losesInfo: *mut LLVMBool) -> f64;
#foreign LLVMConstStringInContext :: fn(C: LLVMContextRef, Str: *const u8, Length: u32, DontNullTerminate: LLVMBool) -> LLVMValueRef;
#foreign LLVMConstStringInContext2 :: fn(C: LLVMContextRef, Str: *const u8, Length: u64, DontNullTerminate: LLVMBool) -> LLVMValueRef;
#foreign LLVMConstString :: fn(Str: *const u8, Length: u32, DontNullTerminate: LLVMBool) -> LLVMValueRef;
#foreign LLVMIsConstantString :: fn(c: LLVMValueRef) -> LLVMBool;
#foreign LLVMGetAsString :: fn(c: LLVMValueRef, Length: *mut u64) -> *const u8;
#foreign LLVMConstStructInContext :: fn(C: LLVMContextRef, ConstantVals: *mut LLVMValueRef, Count: u32, Packed: LLVMBool) -> LLVMValueRef;
#foreign LLVMConstStruct :: fn(ConstantVals: *mut LLVMValueRef, Count: u32, Packed: LLVMBool) -> LLVMValueRef;
#foreign LLVMConstArray :: fn(ElementTy: LLVMTypeRef, ConstantVals: *mut LLVMValueRef, Length: u32) -> LLVMValueRef;
#foreign LLVMConstArray2 :: fn(ElementTy: LLVMTypeRef, ConstantVals: *mut LLVMValueRef, Length: u64) -> LLVMValueRef;
#foreign LLVMConstNamedStruct :: fn(StructTy: LLVMTypeRef, ConstantVals: *mut LLVMValueRef, Count: u32) -> LLVMValueRef;
#foreign LLVMGetAggregateElement :: fn(C: LLVMValueRef, Idx: u32) -> LLVMValueRef;
#foreign LLVMGetElementAsConstant :: fn(C: LLVMValueRef, idx: u32) -> LLVMValueRef;
#foreign LLVMConstVector :: fn(ScalarConstantVals: *mut LLVMValueRef, Size: u32) -> LLVMValueRef;
#foreign LLVMConstantPtrAuth :: fn(Ptr: LLVMValueRef, Key: LLVMValueRef, Disc: LLVMValueRef, AddrDisc: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetConstOpcode :: fn(ConstantVal: LLVMValueRef) -> LLVMOpcode;
#foreign LLVMAlignOf :: fn(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMSizeOf :: fn(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMConstNeg :: fn(ConstantVal: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstNSWNeg :: fn(ConstantVal: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstNUWNeg :: fn(ConstantVal: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstNot :: fn(ConstantVal: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstAdd :: fn(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstNSWAdd :: fn(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstNUWAdd :: fn(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstSub :: fn(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstNSWSub :: fn(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstNUWSub :: fn(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstMul :: fn(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstNSWMul :: fn(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstNUWMul :: fn(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstXor :: fn(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstGEP2 :: fn(Ty: LLVMTypeRef, ConstantVal: LLVMValueRef, ConstantIndices: *mut LLVMValueRef, NumIndices: u32) -> LLVMValueRef;
#foreign LLVMConstInBoundsGEP2 :: fn(Ty: LLVMTypeRef, ConstantVal: LLVMValueRef, ConstantIndices: *mut LLVMValueRef, NumIndices: u32) -> LLVMValueRef;
#foreign LLVMConstGEPWithNoWrapFlags :: fn(Ty: LLVMTypeRef, ConstantVal: LLVMValueRef, ConstantIndices: *mut LLVMValueRef, NumIndices: u32, NoWrapFlags: LLVMGEPNoWrapFlags) -> LLVMValueRef;
#foreign LLVMConstTrunc :: fn(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMConstPtrToInt :: fn(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMConstIntToPtr :: fn(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMConstBitCast :: fn(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMConstAddrSpaceCast :: fn(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMConstTruncOrBitCast :: fn(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMConstPointerCast :: fn(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign LLVMConstExtractElement :: fn(VectorConstant: LLVMValueRef, IndexConstant: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstInsertElement :: fn(VectorConstant: LLVMValueRef, ElementValueConstant: LLVMValueRef, IndexConstant: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMConstShuffleVector :: fn(VectorAConstant: LLVMValueRef, VectorBConstant: LLVMValueRef, MaskConstant: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMBlockAddress :: fn(F: LLVMValueRef, BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign LLVMGetBlockAddressFunction :: fn(BlockAddr: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetBlockAddressBasicBlock :: fn(BlockAddr: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign LLVMConstInlineAsm :: fn(Ty: LLVMTypeRef, AsmString: *const u8, Constraints: *const u8, HasSideEffects: LLVMBool, IsAlignStack: LLVMBool) -> LLVMValueRef;
#foreign LLVMGetGlobalParent :: fn(Global: LLVMValueRef) -> LLVMModuleRef;
#foreign LLVMIsDeclaration :: fn(Global: LLVMValueRef) -> LLVMBool;
#foreign LLVMGetLinkage :: fn(Global: LLVMValueRef) -> LLVMLinkage;
#foreign LLVMSetLinkage :: fn(Global: LLVMValueRef, Linkage: LLVMLinkage) -> void;
#foreign LLVMGetSection :: fn(Global: LLVMValueRef) -> *const u8;
#foreign LLVMSetSection :: fn(Global: LLVMValueRef, Section: *const u8) -> void;
#foreign LLVMGetVisibility :: fn(Global: LLVMValueRef) -> LLVMVisibility;
#foreign LLVMSetVisibility :: fn(Global: LLVMValueRef, Viz: LLVMVisibility) -> void;
#foreign LLVMGetDLLStorageClass :: fn(Global: LLVMValueRef) -> LLVMDLLStorageClass;
#foreign LLVMSetDLLStorageClass :: fn(Global: LLVMValueRef, Class: LLVMDLLStorageClass) -> void;
#foreign LLVMGetUnnamedAddress :: fn(Global: LLVMValueRef) -> LLVMUnnamedAddr;
#foreign LLVMSetUnnamedAddress :: fn(Global: LLVMValueRef, UnnamedAddr: LLVMUnnamedAddr) -> void;
#foreign LLVMGlobalGetValueType :: fn(Global: LLVMValueRef) -> LLVMTypeRef;
#foreign LLVMHasUnnamedAddr :: fn(Global: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetUnnamedAddr :: fn(Global: LLVMValueRef, HasUnnamedAddr: LLVMBool) -> void;
#foreign LLVMGetAlignment :: fn(V: LLVMValueRef) -> u32;
#foreign LLVMSetAlignment :: fn(V: LLVMValueRef, Bytes: u32) -> void;
#foreign LLVMGlobalSetMetadata :: fn(Global: LLVMValueRef, Kind: u32, MD: LLVMMetadataRef) -> void;
#foreign LLVMGlobalEraseMetadata :: fn(Global: LLVMValueRef, Kind: u32) -> void;
#foreign LLVMGlobalClearMetadata :: fn(Global: LLVMValueRef) -> void;
#foreign LLVMGlobalCopyAllMetadata :: fn(Value: LLVMValueRef, NumEntries: *mut u64) -> *mut LLVMValueMetadataEntry;
#foreign LLVMDisposeValueMetadataEntries :: fn(Entries: *mut LLVMValueMetadataEntry) -> void;
#foreign LLVMValueMetadataEntriesGetKind :: fn(Entries: *mut LLVMValueMetadataEntry, Index: u32) -> u32;
#foreign LLVMValueMetadataEntriesGetMetadata :: fn(Entries: *mut LLVMValueMetadataEntry, Index: u32) -> LLVMMetadataRef;
#foreign LLVMAddGlobal :: fn(M: LLVMModuleRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMAddGlobalInAddressSpace :: fn(M: LLVMModuleRef, Ty: LLVMTypeRef, Name: *const u8, AddressSpace: u32) -> LLVMValueRef;
#foreign LLVMGetNamedGlobal :: fn(M: LLVMModuleRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMGetFirstGlobal :: fn(M: LLVMModuleRef) -> LLVMValueRef;
#foreign LLVMGetLastGlobal :: fn(M: LLVMModuleRef) -> LLVMValueRef;
#foreign LLVMGetNextGlobal :: fn(GlobalVar: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetPreviousGlobal :: fn(GlobalVar: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMDeleteGlobal :: fn(GlobalVar: LLVMValueRef) -> void;
#foreign LLVMGetInitializer :: fn(GlobalVar: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMSetInitializer :: fn(GlobalVar: LLVMValueRef, ConstantVal: LLVMValueRef) -> void;
#foreign LLVMIsThreadLocal :: fn(GlobalVar: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetThreadLocal :: fn(GlobalVar: LLVMValueRef, IsThreadLocal: LLVMBool) -> void;
#foreign LLVMIsGlobalConstant :: fn(GlobalVar: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetGlobalConstant :: fn(GlobalVar: LLVMValueRef, IsConstant: LLVMBool) -> void;
#foreign LLVMGetThreadLocalMode :: fn(GlobalVar: LLVMValueRef) -> LLVMThreadLocalMode;
#foreign LLVMSetThreadLocalMode :: fn(GlobalVar: LLVMValueRef, Mode: LLVMThreadLocalMode) -> void;
#foreign LLVMIsExternallyInitialized :: fn(GlobalVar: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetExternallyInitialized :: fn(GlobalVar: LLVMValueRef, IsExtInit: LLVMBool) -> void;
#foreign LLVMAddAlias2 :: fn(M: LLVMModuleRef, ValueTy: LLVMTypeRef, AddrSpace: u32, Aliasee: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMGetNamedGlobalAlias :: fn(M: LLVMModuleRef, Name: *const u8, NameLen: u64) -> LLVMValueRef;
#foreign LLVMGetFirstGlobalAlias :: fn(M: LLVMModuleRef) -> LLVMValueRef;
#foreign LLVMGetLastGlobalAlias :: fn(M: LLVMModuleRef) -> LLVMValueRef;
#foreign LLVMGetNextGlobalAlias :: fn(GA: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetPreviousGlobalAlias :: fn(GA: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMAliasGetAliasee :: fn(Alias: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMAliasSetAliasee :: fn(Alias: LLVMValueRef, Aliasee: LLVMValueRef) -> void;
#foreign LLVMDeleteFunction :: fn(Fn: LLVMValueRef) -> void;
#foreign LLVMHasPersonalityFn :: fn(Fn: LLVMValueRef) -> LLVMBool;
#foreign LLVMGetPersonalityFn :: fn(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMSetPersonalityFn :: fn(Fn: LLVMValueRef, PersonalityFn: LLVMValueRef) -> void;
#foreign LLVMLookupIntrinsicID :: fn(Name: *const u8, NameLen: u64) -> u32;
#foreign LLVMGetIntrinsicID :: fn(Fn: LLVMValueRef) -> u32;
#foreign LLVMGetIntrinsicDeclaration :: fn(Mod: LLVMModuleRef, ID: u32, ParamTypes: *mut LLVMTypeRef, ParamCount: u64) -> LLVMValueRef;
#foreign LLVMIntrinsicGetType :: fn(Ctx: LLVMContextRef, ID: u32, ParamTypes: *mut LLVMTypeRef, ParamCount: u64) -> LLVMTypeRef;
#foreign LLVMIntrinsicGetName :: fn(ID: u32, NameLength: *mut u64) -> *const u8;
#foreign LLVMIntrinsicCopyOverloadedName :: fn(ID: u32, ParamTypes: *mut LLVMTypeRef, ParamCount: u64, NameLength: *mut u64) -> *const u8;
#foreign LLVMIntrinsicCopyOverloadedName2 :: fn(Mod: LLVMModuleRef, ID: u32, ParamTypes: *mut LLVMTypeRef, ParamCount: u64, NameLength: *mut u64) -> *const u8;
#foreign LLVMIntrinsicIsOverloaded :: fn(ID: u32) -> LLVMBool;
#foreign LLVMGetFunctionCallConv :: fn(Fn: LLVMValueRef) -> u32;
#foreign LLVMSetFunctionCallConv :: fn(Fn: LLVMValueRef, CC: u32) -> void;
#foreign LLVMGetGC :: fn(Fn: LLVMValueRef) -> *const u8;
#foreign LLVMSetGC :: fn(Fn: LLVMValueRef, Name: *const u8) -> void;
#foreign LLVMGetPrefixData :: fn(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMHasPrefixData :: fn(Fn: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetPrefixData :: fn(Fn: LLVMValueRef, prefixData: LLVMValueRef) -> void;
#foreign LLVMGetPrologueData :: fn(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMHasPrologueData :: fn(Fn: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetPrologueData :: fn(Fn: LLVMValueRef, prologueData: LLVMValueRef) -> void;
#foreign LLVMAddAttributeAtIndex :: fn(F: LLVMValueRef, Idx: LLVMAttributeIndex, A: LLVMAttributeRef) -> void;
#foreign LLVMGetAttributeCountAtIndex :: fn(F: LLVMValueRef, Idx: LLVMAttributeIndex) -> u32;
#foreign LLVMGetAttributesAtIndex :: fn(F: LLVMValueRef, Idx: LLVMAttributeIndex, Attrs: *mut LLVMAttributeRef) -> void;
#foreign LLVMGetEnumAttributeAtIndex :: fn(F: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: u32) -> LLVMAttributeRef;
#foreign LLVMGetStringAttributeAtIndex :: fn(F: LLVMValueRef, Idx: LLVMAttributeIndex, K: *const u8, KLen: u32) -> LLVMAttributeRef;
#foreign LLVMRemoveEnumAttributeAtIndex :: fn(F: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: u32) -> void;
#foreign LLVMRemoveStringAttributeAtIndex :: fn(F: LLVMValueRef, Idx: LLVMAttributeIndex, K: *const u8, KLen: u32) -> void;
#foreign LLVMAddTargetDependentFunctionAttr :: fn(Fn: LLVMValueRef, A: *const u8, V: *const u8) -> void;
#foreign LLVMCountParams :: fn(Fn: LLVMValueRef) -> u32;
#foreign LLVMGetParams :: fn(Fn: LLVMValueRef, Params: *mut LLVMValueRef) -> void;
#foreign LLVMGetParam :: fn(Fn: LLVMValueRef, Index: u32) -> LLVMValueRef;
#foreign LLVMGetParamParent :: fn(Inst: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetFirstParam :: fn(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetLastParam :: fn(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetNextParam :: fn(Arg: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetPreviousParam :: fn(Arg: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMSetParamAlignment :: fn(Arg: LLVMValueRef, Align: u32) -> void;
#foreign LLVMAddGlobalIFunc :: fn(M: LLVMModuleRef, Name: *const u8, NameLen: u64, Ty: LLVMTypeRef, AddrSpace: u32, Resolver: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetNamedGlobalIFunc :: fn(M: LLVMModuleRef, Name: *const u8, NameLen: u64) -> LLVMValueRef;
#foreign LLVMGetFirstGlobalIFunc :: fn(M: LLVMModuleRef) -> LLVMValueRef;
#foreign LLVMGetLastGlobalIFunc :: fn(M: LLVMModuleRef) -> LLVMValueRef;
#foreign LLVMGetNextGlobalIFunc :: fn(IFunc: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetPreviousGlobalIFunc :: fn(IFunc: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetGlobalIFuncResolver :: fn(IFunc: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMSetGlobalIFuncResolver :: fn(IFunc: LLVMValueRef, Resolver: LLVMValueRef) -> void;
#foreign LLVMEraseGlobalIFunc :: fn(IFunc: LLVMValueRef) -> void;
#foreign LLVMRemoveGlobalIFunc :: fn(IFunc: LLVMValueRef) -> void;
#foreign LLVMMDStringInContext2 :: fn(C: LLVMContextRef, Str: *const u8, SLen: u64) -> LLVMMetadataRef;
#foreign LLVMMDNodeInContext2 :: fn(C: LLVMContextRef, MDs: *mut LLVMMetadataRef, Count: u64) -> LLVMMetadataRef;
#foreign LLVMMetadataAsValue :: fn(C: LLVMContextRef, MD: LLVMMetadataRef) -> LLVMValueRef;
#foreign LLVMValueAsMetadata :: fn(Val: LLVMValueRef) -> LLVMMetadataRef;
#foreign LLVMGetMDString :: fn(V: LLVMValueRef, Length: *mut u32) -> *const u8;
#foreign LLVMGetMDNodeNumOperands :: fn(V: LLVMValueRef) -> u32;
#foreign LLVMGetMDNodeOperands :: fn(V: LLVMValueRef, Dest: *mut LLVMValueRef) -> void;
#foreign LLVMReplaceMDNodeOperandWith :: fn(V: LLVMValueRef, Index: u32, Replacement: LLVMMetadataRef) -> void;
#foreign LLVMMDStringInContext :: fn(C: LLVMContextRef, Str: *const u8, SLen: u32) -> LLVMValueRef;
#foreign LLVMMDString :: fn(Str: *const u8, SLen: u32) -> LLVMValueRef;
#foreign LLVMMDNodeInContext :: fn(C: LLVMContextRef, Vals: *mut LLVMValueRef, Count: u32) -> LLVMValueRef;
#foreign LLVMMDNode :: fn(Vals: *mut LLVMValueRef, Count: u32) -> LLVMValueRef;
#foreign LLVMCreateOperandBundle :: fn(Tag: *const u8, TagLen: u64, Args: *mut LLVMValueRef, NumArgs: u32) -> LLVMOperandBundleRef;
#foreign LLVMDisposeOperandBundle :: fn(Bundle: LLVMOperandBundleRef) -> void;
#foreign LLVMGetOperandBundleTag :: fn(Bundle: LLVMOperandBundleRef, Len: *mut u64) -> *const u8;
#foreign LLVMGetNumOperandBundleArgs :: fn(Bundle: LLVMOperandBundleRef) -> u32;
#foreign LLVMGetOperandBundleArgAtIndex :: fn(Bundle: LLVMOperandBundleRef, Index: u32) -> LLVMValueRef;
#foreign LLVMBasicBlockAsValue :: fn(BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign LLVMValueIsBasicBlock :: fn(Val: LLVMValueRef) -> LLVMBool;
#foreign LLVMValueAsBasicBlock :: fn(Val: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign LLVMGetBasicBlockName :: fn(BB: LLVMBasicBlockRef) -> *const u8;
#foreign LLVMGetBasicBlockParent :: fn(BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign LLVMGetBasicBlockTerminator :: fn(BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign LLVMCountBasicBlocks :: fn(Fn: LLVMValueRef) -> u32;
#foreign LLVMGetBasicBlocks :: fn(Fn: LLVMValueRef, BasicBlocks: *mut LLVMBasicBlockRef) -> void;
#foreign LLVMGetFirstBasicBlock :: fn(Fn: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign LLVMGetLastBasicBlock :: fn(Fn: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign LLVMGetNextBasicBlock :: fn(BB: LLVMBasicBlockRef) -> LLVMBasicBlockRef;
#foreign LLVMGetPreviousBasicBlock :: fn(BB: LLVMBasicBlockRef) -> LLVMBasicBlockRef;
#foreign LLVMGetEntryBasicBlock :: fn(Fn: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign LLVMInsertExistingBasicBlockAfterInsertBlock :: fn(Builder: LLVMBuilderRef, BB: LLVMBasicBlockRef) -> void;
#foreign LLVMAppendExistingBasicBlock :: fn(Fn: LLVMValueRef, BB: LLVMBasicBlockRef) -> void;
#foreign LLVMCreateBasicBlockInContext :: fn(C: LLVMContextRef, Name: *const u8) -> LLVMBasicBlockRef;
#foreign LLVMAppendBasicBlockInContext :: fn(C: LLVMContextRef, Fn: LLVMValueRef, Name: *const u8) -> LLVMBasicBlockRef;
#foreign LLVMAppendBasicBlock :: fn(Fn: LLVMValueRef, Name: *const u8) -> LLVMBasicBlockRef;
#foreign LLVMInsertBasicBlockInContext :: fn(C: LLVMContextRef, BB: LLVMBasicBlockRef, Name: *const u8) -> LLVMBasicBlockRef;
#foreign LLVMInsertBasicBlock :: fn(InsertBeforeBB: LLVMBasicBlockRef, Name: *const u8) -> LLVMBasicBlockRef;
#foreign LLVMDeleteBasicBlock :: fn(BB: LLVMBasicBlockRef) -> void;
#foreign LLVMRemoveBasicBlockFromParent :: fn(BB: LLVMBasicBlockRef) -> void;
#foreign LLVMMoveBasicBlockBefore :: fn(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef) -> void;
#foreign LLVMMoveBasicBlockAfter :: fn(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef) -> void;
#foreign LLVMGetFirstInstruction :: fn(BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign LLVMGetLastInstruction :: fn(BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign LLVMHasMetadata :: fn(Val: LLVMValueRef) -> s32;
#foreign LLVMGetMetadata :: fn(Val: LLVMValueRef, KindID: u32) -> LLVMValueRef;
#foreign LLVMSetMetadata :: fn(Val: LLVMValueRef, KindID: u32, Node: LLVMValueRef) -> void;
#foreign LLVMInstructionGetAllMetadataOtherThanDebugLoc :: fn(Instr: LLVMValueRef, NumEntries: *mut u64) -> *mut LLVMValueMetadataEntry;
#foreign LLVMGetInstructionParent :: fn(Inst: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign LLVMGetNextInstruction :: fn(Inst: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetPreviousInstruction :: fn(Inst: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMInstructionRemoveFromParent :: fn(Inst: LLVMValueRef) -> void;
#foreign LLVMInstructionEraseFromParent :: fn(Inst: LLVMValueRef) -> void;
#foreign LLVMDeleteInstruction :: fn(Inst: LLVMValueRef) -> void;
#foreign LLVMGetInstructionOpcode :: fn(Inst: LLVMValueRef) -> LLVMOpcode;
#foreign LLVMGetICmpPredicate :: fn(Inst: LLVMValueRef) -> LLVMIntPredicate;
#foreign LLVMGetFCmpPredicate :: fn(Inst: LLVMValueRef) -> LLVMRealPredicate;
#foreign LLVMInstructionClone :: fn(Inst: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMIsATerminatorInst :: fn(Inst: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetNumArgOperands :: fn(Instr: LLVMValueRef) -> u32;
#foreign LLVMSetInstructionCallConv :: fn(Instr: LLVMValueRef, CC: u32) -> void;
#foreign LLVMGetInstructionCallConv :: fn(Instr: LLVMValueRef) -> u32;
#foreign LLVMSetInstrParamAlignment :: fn(Instr: LLVMValueRef, Idx: LLVMAttributeIndex, Align: u32) -> void;
#foreign LLVMAddCallSiteAttribute :: fn(C: LLVMValueRef, Idx: LLVMAttributeIndex, A: LLVMAttributeRef) -> void;
#foreign LLVMGetCallSiteAttributeCount :: fn(C: LLVMValueRef, Idx: LLVMAttributeIndex) -> u32;
#foreign LLVMGetCallSiteAttributes :: fn(C: LLVMValueRef, Idx: LLVMAttributeIndex, Attrs: *mut LLVMAttributeRef) -> void;
#foreign LLVMGetCallSiteEnumAttribute :: fn(C: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: u32) -> LLVMAttributeRef;
#foreign LLVMGetCallSiteStringAttribute :: fn(C: LLVMValueRef, Idx: LLVMAttributeIndex, K: *const u8, KLen: u32) -> LLVMAttributeRef;
#foreign LLVMRemoveCallSiteEnumAttribute :: fn(C: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: u32) -> void;
#foreign LLVMRemoveCallSiteStringAttribute :: fn(C: LLVMValueRef, Idx: LLVMAttributeIndex, K: *const u8, KLen: u32) -> void;
#foreign LLVMGetCalledFunctionType :: fn(C: LLVMValueRef) -> LLVMTypeRef;
#foreign LLVMGetCalledValue :: fn(Instr: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMGetNumOperandBundles :: fn(C: LLVMValueRef) -> u32;
#foreign LLVMGetOperandBundleAtIndex :: fn(C: LLVMValueRef, Index: u32) -> LLVMOperandBundleRef;
#foreign LLVMIsTailCall :: fn(CallInst: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetTailCall :: fn(CallInst: LLVMValueRef, IsTailCall: LLVMBool) -> void;
#foreign LLVMGetTailCallKind :: fn(CallInst: LLVMValueRef) -> LLVMTailCallKind;
#foreign LLVMSetTailCallKind :: fn(CallInst: LLVMValueRef, kind: LLVMTailCallKind) -> void;
#foreign LLVMGetNormalDest :: fn(InvokeInst: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign LLVMGetUnwindDest :: fn(InvokeInst: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign LLVMSetNormalDest :: fn(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef) -> void;
#foreign LLVMSetUnwindDest :: fn(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef) -> void;
#foreign LLVMGetCallBrDefaultDest :: fn(CallBr: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign LLVMGetCallBrNumIndirectDests :: fn(CallBr: LLVMValueRef) -> u32;
#foreign LLVMGetCallBrIndirectDest :: fn(CallBr: LLVMValueRef, Idx: u32) -> LLVMBasicBlockRef;
#foreign LLVMGetNumSuccessors :: fn(Term: LLVMValueRef) -> u32;
#foreign LLVMGetSuccessor :: fn(Term: LLVMValueRef, i: u32) -> LLVMBasicBlockRef;
#foreign LLVMSetSuccessor :: fn(Term: LLVMValueRef, i: u32, block: LLVMBasicBlockRef) -> void;
#foreign LLVMIsConditional :: fn(Branch: LLVMValueRef) -> LLVMBool;
#foreign LLVMGetCondition :: fn(Branch: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMSetCondition :: fn(Branch: LLVMValueRef, Cond: LLVMValueRef) -> void;
#foreign LLVMGetSwitchDefaultDest :: fn(SwitchInstr: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign LLVMGetAllocatedType :: fn(Alloca: LLVMValueRef) -> LLVMTypeRef;
#foreign LLVMIsInBounds :: fn(GEP: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetIsInBounds :: fn(GEP: LLVMValueRef, InBounds: LLVMBool) -> void;
#foreign LLVMGetGEPSourceElementType :: fn(GEP: LLVMValueRef) -> LLVMTypeRef;
#foreign LLVMGEPGetNoWrapFlags :: fn(GEP: LLVMValueRef) -> LLVMGEPNoWrapFlags;
#foreign LLVMGEPSetNoWrapFlags :: fn(GEP: LLVMValueRef, NoWrapFlags: LLVMGEPNoWrapFlags) -> void;
#foreign LLVMAddIncoming :: fn(PhiNode: LLVMValueRef, IncomingValues: *mut LLVMValueRef, IncomingBlocks: *mut LLVMBasicBlockRef, Count: u32) -> void;
#foreign LLVMCountIncoming :: fn(PhiNode: LLVMValueRef) -> u32;
#foreign LLVMGetIncomingValue :: fn(PhiNode: LLVMValueRef, Index: u32) -> LLVMValueRef;
#foreign LLVMGetIncomingBlock :: fn(PhiNode: LLVMValueRef, Index: u32) -> LLVMBasicBlockRef;
#foreign LLVMGetNumIndices :: fn(Inst: LLVMValueRef) -> u32;
#foreign LLVMGetIndices :: fn(Inst: LLVMValueRef) -> *const u32;
#foreign LLVMCreateBuilderInContext :: fn(C: LLVMContextRef) -> LLVMBuilderRef;
#foreign LLVMCreateBuilder :: fn() -> LLVMBuilderRef;
#foreign LLVMPositionBuilder :: fn(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef, Instr: LLVMValueRef) -> void;
#foreign LLVMPositionBuilderBeforeDbgRecords :: fn(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef, Inst: LLVMValueRef) -> void;
#foreign LLVMPositionBuilderBefore :: fn(Builder: LLVMBuilderRef, Instr: LLVMValueRef) -> void;
#foreign LLVMPositionBuilderBeforeInstrAndDbgRecords :: fn(Builder: LLVMBuilderRef, Instr: LLVMValueRef) -> void;
#foreign LLVMPositionBuilderAtEnd :: fn(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef) -> void;
#foreign LLVMGetInsertBlock :: fn(Builder: LLVMBuilderRef) -> LLVMBasicBlockRef;
#foreign LLVMClearInsertionPosition :: fn(Builder: LLVMBuilderRef) -> void;
#foreign LLVMInsertIntoBuilder :: fn(Builder: LLVMBuilderRef, Instr: LLVMValueRef) -> void;
#foreign LLVMInsertIntoBuilderWithName :: fn(Builder: LLVMBuilderRef, Instr: LLVMValueRef, Name: *const u8) -> void;
#foreign LLVMDisposeBuilder :: fn(Builder: LLVMBuilderRef) -> void;
#foreign LLVMGetCurrentDebugLocation2 :: fn(Builder: LLVMBuilderRef) -> LLVMMetadataRef;
#foreign LLVMSetCurrentDebugLocation2 :: fn(Builder: LLVMBuilderRef, Loc: LLVMMetadataRef) -> void;
#foreign LLVMSetInstDebugLocation :: fn(Builder: LLVMBuilderRef, Inst: LLVMValueRef) -> void;
#foreign LLVMAddMetadataToInst :: fn(Builder: LLVMBuilderRef, Inst: LLVMValueRef) -> void;
#foreign LLVMBuilderGetDefaultFPMathTag :: fn(Builder: LLVMBuilderRef) -> LLVMMetadataRef;
#foreign LLVMBuilderSetDefaultFPMathTag :: fn(Builder: LLVMBuilderRef, FPMathTag: LLVMMetadataRef) -> void;
#foreign LLVMSetCurrentDebugLocation :: fn(Builder: LLVMBuilderRef, L: LLVMValueRef) -> void;
#foreign LLVMGetCurrentDebugLocation :: fn(Builder: LLVMBuilderRef) -> LLVMValueRef;
#foreign LLVMBuildRetVoid :: fn(param0: LLVMBuilderRef) -> LLVMValueRef;
#foreign LLVMBuildRet :: fn(param0: LLVMBuilderRef, V: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMBuildAggregateRet :: fn(param0: LLVMBuilderRef, RetVals: *mut LLVMValueRef, N: u32) -> LLVMValueRef;
#foreign LLVMBuildBr :: fn(param0: LLVMBuilderRef, Dest: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign LLVMBuildCondBr :: fn(param0: LLVMBuilderRef, If: LLVMValueRef, Then: LLVMBasicBlockRef, Else: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign LLVMBuildSwitch :: fn(param0: LLVMBuilderRef, V: LLVMValueRef, Else: LLVMBasicBlockRef, NumCases: u32) -> LLVMValueRef;
#foreign LLVMBuildIndirectBr :: fn(B: LLVMBuilderRef, Addr: LLVMValueRef, NumDests: u32) -> LLVMValueRef;
#foreign LLVMBuildCallBr :: fn(B: LLVMBuilderRef, Ty: LLVMTypeRef, Fn: LLVMValueRef, DefaultDest: LLVMBasicBlockRef, IndirectDests: *mut LLVMBasicBlockRef, NumIndirectDests: u32, Args: *mut LLVMValueRef, NumArgs: u32, Bundles: *mut LLVMOperandBundleRef, NumBundles: u32, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildInvoke2 :: fn(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Fn: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Then: LLVMBasicBlockRef, Catch: LLVMBasicBlockRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildInvokeWithOperandBundles :: fn(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Fn: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Then: LLVMBasicBlockRef, Catch: LLVMBasicBlockRef, Bundles: *mut LLVMOperandBundleRef, NumBundles: u32, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildUnreachable :: fn(param0: LLVMBuilderRef) -> LLVMValueRef;
#foreign LLVMBuildResume :: fn(B: LLVMBuilderRef, Exn: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMBuildLandingPad :: fn(B: LLVMBuilderRef, Ty: LLVMTypeRef, PersFn: LLVMValueRef, NumClauses: u32, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildCleanupRet :: fn(B: LLVMBuilderRef, CatchPad: LLVMValueRef, BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign LLVMBuildCatchRet :: fn(B: LLVMBuilderRef, CatchPad: LLVMValueRef, BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign LLVMBuildCatchPad :: fn(B: LLVMBuilderRef, ParentPad: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildCleanupPad :: fn(B: LLVMBuilderRef, ParentPad: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildCatchSwitch :: fn(B: LLVMBuilderRef, ParentPad: LLVMValueRef, UnwindBB: LLVMBasicBlockRef, NumHandlers: u32, Name: *const u8) -> LLVMValueRef;
#foreign LLVMAddCase :: fn(Switch: LLVMValueRef, OnVal: LLVMValueRef, Dest: LLVMBasicBlockRef) -> void;
#foreign LLVMAddDestination :: fn(IndirectBr: LLVMValueRef, Dest: LLVMBasicBlockRef) -> void;
#foreign LLVMGetNumClauses :: fn(LandingPad: LLVMValueRef) -> u32;
#foreign LLVMGetClause :: fn(LandingPad: LLVMValueRef, Idx: u32) -> LLVMValueRef;
#foreign LLVMAddClause :: fn(LandingPad: LLVMValueRef, ClauseVal: LLVMValueRef) -> void;
#foreign LLVMIsCleanup :: fn(LandingPad: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetCleanup :: fn(LandingPad: LLVMValueRef, Val: LLVMBool) -> void;
#foreign LLVMAddHandler :: fn(CatchSwitch: LLVMValueRef, Dest: LLVMBasicBlockRef) -> void;
#foreign LLVMGetNumHandlers :: fn(CatchSwitch: LLVMValueRef) -> u32;
#foreign LLVMGetHandlers :: fn(CatchSwitch: LLVMValueRef, Handlers: *mut LLVMBasicBlockRef) -> void;
#foreign LLVMGetArgOperand :: fn(Funclet: LLVMValueRef, i: u32) -> LLVMValueRef;
#foreign LLVMSetArgOperand :: fn(Funclet: LLVMValueRef, i: u32, value: LLVMValueRef) -> void;
#foreign LLVMGetParentCatchSwitch :: fn(CatchPad: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMSetParentCatchSwitch :: fn(CatchPad: LLVMValueRef, CatchSwitch: LLVMValueRef) -> void;
#foreign LLVMBuildAdd :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildNSWAdd :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildNUWAdd :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFAdd :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildSub :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildNSWSub :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildNUWSub :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFSub :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildMul :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildNSWMul :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildNUWMul :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFMul :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildUDiv :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildExactUDiv :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildSDiv :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildExactSDiv :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFDiv :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildURem :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildSRem :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFRem :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildShl :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildLShr :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildAShr :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildAnd :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildOr :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildXor :: fn(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildBinOp :: fn(B: LLVMBuilderRef, Op: LLVMOpcode, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildNeg :: fn(param0: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildNSWNeg :: fn(B: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildNUWNeg :: fn(B: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFNeg :: fn(param0: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildNot :: fn(param0: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMGetNUW :: fn(ArithInst: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetNUW :: fn(ArithInst: LLVMValueRef, HasNUW: LLVMBool) -> void;
#foreign LLVMGetNSW :: fn(ArithInst: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetNSW :: fn(ArithInst: LLVMValueRef, HasNSW: LLVMBool) -> void;
#foreign LLVMGetExact :: fn(DivOrShrInst: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetExact :: fn(DivOrShrInst: LLVMValueRef, IsExact: LLVMBool) -> void;
#foreign LLVMGetNNeg :: fn(NonNegInst: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetNNeg :: fn(NonNegInst: LLVMValueRef, IsNonNeg: LLVMBool) -> void;
#foreign LLVMGetFastMathFlags :: fn(FPMathInst: LLVMValueRef) -> LLVMFastMathFlags;
#foreign LLVMSetFastMathFlags :: fn(FPMathInst: LLVMValueRef, FMF: LLVMFastMathFlags) -> void;
#foreign LLVMCanValueUseFastMathFlags :: fn(Inst: LLVMValueRef) -> LLVMBool;
#foreign LLVMGetIsDisjoint :: fn(Inst: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetIsDisjoint :: fn(Inst: LLVMValueRef, IsDisjoint: LLVMBool) -> void;
#foreign LLVMBuildMalloc :: fn(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildArrayMalloc :: fn(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildMemSet :: fn(B: LLVMBuilderRef, Ptr: LLVMValueRef, Val: LLVMValueRef, Len: LLVMValueRef, Align: u32) -> LLVMValueRef;
#foreign LLVMBuildMemCpy :: fn(B: LLVMBuilderRef, Dst: LLVMValueRef, DstAlign: u32, Src: LLVMValueRef, SrcAlign: u32, Size: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMBuildMemMove :: fn(B: LLVMBuilderRef, Dst: LLVMValueRef, DstAlign: u32, Src: LLVMValueRef, SrcAlign: u32, Size: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMBuildAlloca :: fn(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildArrayAlloca :: fn(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFree :: fn(param0: LLVMBuilderRef, PointerVal: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMBuildLoad2 :: fn(param0: LLVMBuilderRef, Ty: LLVMTypeRef, PointerVal: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildStore :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, Ptr: LLVMValueRef) -> LLVMValueRef;
#foreign LLVMBuildGEP2 :: fn(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: *mut LLVMValueRef, NumIndices: u32, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildInBoundsGEP2 :: fn(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: *mut LLVMValueRef, NumIndices: u32, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildGEPWithNoWrapFlags :: fn(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: *mut LLVMValueRef, NumIndices: u32, Name: *const u8, NoWrapFlags: LLVMGEPNoWrapFlags) -> LLVMValueRef;
#foreign LLVMBuildStructGEP2 :: fn(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Idx: u32, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildGlobalString :: fn(B: LLVMBuilderRef, Str: *const u8, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildGlobalStringPtr :: fn(B: LLVMBuilderRef, Str: *const u8, Name: *const u8) -> LLVMValueRef;
#foreign LLVMGetVolatile :: fn(MemoryAccessInst: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetVolatile :: fn(MemoryAccessInst: LLVMValueRef, IsVolatile: LLVMBool) -> void;
#foreign LLVMGetWeak :: fn(CmpXchgInst: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetWeak :: fn(CmpXchgInst: LLVMValueRef, IsWeak: LLVMBool) -> void;
#foreign LLVMGetOrdering :: fn(MemoryAccessInst: LLVMValueRef) -> LLVMAtomicOrdering;
#foreign LLVMSetOrdering :: fn(MemoryAccessInst: LLVMValueRef, Ordering: LLVMAtomicOrdering) -> void;
#foreign LLVMGetAtomicRMWBinOp :: fn(AtomicRMWInst: LLVMValueRef) -> LLVMAtomicRMWBinOp;
#foreign LLVMSetAtomicRMWBinOp :: fn(AtomicRMWInst: LLVMValueRef, BinOp: LLVMAtomicRMWBinOp) -> void;
#foreign LLVMBuildTrunc :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildZExt :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildSExt :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFPToUI :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFPToSI :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildUIToFP :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildSIToFP :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFPTrunc :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFPExt :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildPtrToInt :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildIntToPtr :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildBitCast :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildAddrSpaceCast :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildZExtOrBitCast :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildSExtOrBitCast :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildTruncOrBitCast :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildCast :: fn(B: LLVMBuilderRef, Op: LLVMOpcode, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildPointerCast :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildIntCast2 :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, IsSigned: LLVMBool, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFPCast :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildIntCast :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMGetCastOpcode :: fn(Src: LLVMValueRef, SrcIsSigned: LLVMBool, DestTy: LLVMTypeRef, DestIsSigned: LLVMBool) -> LLVMOpcode;
#foreign LLVMBuildICmp :: fn(param0: LLVMBuilderRef, Op: LLVMIntPredicate, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFCmp :: fn(param0: LLVMBuilderRef, Op: LLVMRealPredicate, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildPhi :: fn(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildCall2 :: fn(param0: LLVMBuilderRef, param1: LLVMTypeRef, Fn: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildCallWithOperandBundles :: fn(param0: LLVMBuilderRef, param1: LLVMTypeRef, Fn: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Bundles: *mut LLVMOperandBundleRef, NumBundles: u32, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildSelect :: fn(param0: LLVMBuilderRef, If: LLVMValueRef, Then: LLVMValueRef, Else: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildVAArg :: fn(param0: LLVMBuilderRef, List: LLVMValueRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildExtractElement :: fn(param0: LLVMBuilderRef, VecVal: LLVMValueRef, Index: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildInsertElement :: fn(param0: LLVMBuilderRef, VecVal: LLVMValueRef, EltVal: LLVMValueRef, Index: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildShuffleVector :: fn(param0: LLVMBuilderRef, V1: LLVMValueRef, V2: LLVMValueRef, Mask: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildExtractValue :: fn(param0: LLVMBuilderRef, AggVal: LLVMValueRef, Index: u32, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildInsertValue :: fn(param0: LLVMBuilderRef, AggVal: LLVMValueRef, EltVal: LLVMValueRef, Index: u32, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFreeze :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildIsNull :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildIsNotNull :: fn(param0: LLVMBuilderRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildPtrDiff2 :: fn(param0: LLVMBuilderRef, ElemTy: LLVMTypeRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildFence :: fn(B: LLVMBuilderRef, ordering: LLVMAtomicOrdering, singleThread: LLVMBool, Name: *const u8) -> LLVMValueRef;
#foreign LLVMBuildAtomicRMW :: fn(B: LLVMBuilderRef, op: LLVMAtomicRMWBinOp, PTR: LLVMValueRef, Val: LLVMValueRef, ordering: LLVMAtomicOrdering, singleThread: LLVMBool) -> LLVMValueRef;
#foreign LLVMBuildAtomicCmpXchg :: fn(B: LLVMBuilderRef, Ptr: LLVMValueRef, Cmp: LLVMValueRef, New: LLVMValueRef, SuccessOrdering: LLVMAtomicOrdering, FailureOrdering: LLVMAtomicOrdering, SingleThread: LLVMBool) -> LLVMValueRef;
#foreign LLVMGetNumMaskElements :: fn(ShuffleVectorInst: LLVMValueRef) -> u32;
#foreign LLVMGetUndefMaskElem :: fn() -> s32;
#foreign LLVMGetMaskValue :: fn(ShuffleVectorInst: LLVMValueRef, Elt: u32) -> s32;
#foreign LLVMIsAtomicSingleThread :: fn(AtomicInst: LLVMValueRef) -> LLVMBool;
#foreign LLVMSetAtomicSingleThread :: fn(AtomicInst: LLVMValueRef, SingleThread: LLVMBool) -> void;
#foreign LLVMGetCmpXchgSuccessOrdering :: fn(CmpXchgInst: LLVMValueRef) -> LLVMAtomicOrdering;
#foreign LLVMSetCmpXchgSuccessOrdering :: fn(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering) -> void;
#foreign LLVMGetCmpXchgFailureOrdering :: fn(CmpXchgInst: LLVMValueRef) -> LLVMAtomicOrdering;
#foreign LLVMSetCmpXchgFailureOrdering :: fn(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering) -> void;
#foreign LLVMCreateModuleProviderForExistingModule :: fn(M: LLVMModuleRef) -> LLVMModuleProviderRef;
#foreign LLVMDisposeModuleProvider :: fn(M: LLVMModuleProviderRef) -> void;
#foreign LLVMCreateMemoryBufferWithContentsOfFile :: fn(Path: *const u8, OutMemBuf: *mut LLVMMemoryBufferRef, OutMessage: *mut *mut u8) -> LLVMBool;
#foreign LLVMCreateMemoryBufferWithSTDIN :: fn(OutMemBuf: *mut LLVMMemoryBufferRef, OutMessage: *mut *mut u8) -> LLVMBool;
#foreign LLVMCreateMemoryBufferWithMemoryRange :: fn(InputData: *const u8, InputDataLength: u64, BufferName: *const u8, RequiresNullTerminator: LLVMBool) -> LLVMMemoryBufferRef;
#foreign LLVMCreateMemoryBufferWithMemoryRangeCopy :: fn(InputData: *const u8, InputDataLength: u64, BufferName: *const u8) -> LLVMMemoryBufferRef;
#foreign LLVMGetBufferStart :: fn(MemBuf: LLVMMemoryBufferRef) -> *const u8;
#foreign LLVMGetBufferSize :: fn(MemBuf: LLVMMemoryBufferRef) -> u64;
#foreign LLVMDisposeMemoryBuffer :: fn(MemBuf: LLVMMemoryBufferRef) -> void;
#foreign LLVMCreatePassManager :: fn() -> LLVMPassManagerRef;
#foreign LLVMCreateFunctionPassManagerForModule :: fn(M: LLVMModuleRef) -> LLVMPassManagerRef;
#foreign LLVMCreateFunctionPassManager :: fn(MP: LLVMModuleProviderRef) -> LLVMPassManagerRef;
#foreign LLVMRunPassManager :: fn(PM: LLVMPassManagerRef, M: LLVMModuleRef) -> LLVMBool;
#foreign LLVMInitializeFunctionPassManager :: fn(FPM: LLVMPassManagerRef) -> LLVMBool;
#foreign LLVMRunFunctionPassManager :: fn(FPM: LLVMPassManagerRef, F: LLVMValueRef) -> LLVMBool;
#foreign LLVMFinalizeFunctionPassManager :: fn(FPM: LLVMPassManagerRef) -> LLVMBool;
#foreign LLVMDisposePassManager :: fn(PM: LLVMPassManagerRef) -> void;
#foreign LLVMStartMultithreaded :: fn() -> LLVMBool;
#foreign LLVMStopMultithreaded :: fn() -> void;
#foreign LLVMIsMultithreaded :: fn() -> LLVMBool;
LLVMDIFlags :: enum {
  LLVMDIFlagZero = 0,
  LLVMDIFlagPrivate = 1,
  LLVMDIFlagProtected = 2,
  LLVMDIFlagPublic = 3,
  LLVMDIFlagFwdDecl = 4,
  LLVMDIFlagAppleBlock = 8,
  LLVMDIFlagReservedBit4 = 16,
  LLVMDIFlagVirtual = 32,
  LLVMDIFlagArtificial = 64,
  LLVMDIFlagExplicit = 128,
  LLVMDIFlagPrototyped = 256,
  LLVMDIFlagObjcClassComplete = 512,
  LLVMDIFlagObjectPointer = 1024,
  LLVMDIFlagVector = 2048,
  LLVMDIFlagStaticMember = 4096,
  LLVMDIFlagLValueReference = 8192,
  LLVMDIFlagRValueReference = 16384,
  LLVMDIFlagReserved = 32768,
  LLVMDIFlagSingleInheritance = 65536,
  LLVMDIFlagMultipleInheritance = 131072,
  LLVMDIFlagVirtualInheritance = 196608,
  LLVMDIFlagIntroducedVirtual = 262144,
  LLVMDIFlagBitField = 524288,
  LLVMDIFlagNoReturn = 1048576,
  LLVMDIFlagTypePassByValue = 4194304,
  LLVMDIFlagTypePassByReference = 8388608,
  LLVMDIFlagEnumClass = 16777216,
  LLVMDIFlagFixedEnum = 16777216,
  LLVMDIFlagThunk = 33554432,
  LLVMDIFlagNonTrivial = 67108864,
  LLVMDIFlagBigEndian = 134217728,
  LLVMDIFlagLittleEndian = 268435456,
  LLVMDIFlagIndirectVirtualBase = 36,
  LLVMDIFlagAccessibility = 3,
  LLVMDIFlagPtrToMemberRep = 196608,
};
LLVMDWARFSourceLanguage :: enum {
  LLVMDWARFSourceLanguageC89 = 0,
  LLVMDWARFSourceLanguageC = 1,
  LLVMDWARFSourceLanguageAda83 = 2,
  LLVMDWARFSourceLanguageC_plus_plus = 3,
  LLVMDWARFSourceLanguageCobol74 = 4,
  LLVMDWARFSourceLanguageCobol85 = 5,
  LLVMDWARFSourceLanguageFortran77 = 6,
  LLVMDWARFSourceLanguageFortran90 = 7,
  LLVMDWARFSourceLanguagePascal83 = 8,
  LLVMDWARFSourceLanguageModula2 = 9,
  LLVMDWARFSourceLanguageJava = 10,
  LLVMDWARFSourceLanguageC99 = 11,
  LLVMDWARFSourceLanguageAda95 = 12,
  LLVMDWARFSourceLanguageFortran95 = 13,
  LLVMDWARFSourceLanguagePLI = 14,
  LLVMDWARFSourceLanguageObjC = 15,
  LLVMDWARFSourceLanguageObjC_plus_plus = 16,
  LLVMDWARFSourceLanguageUPC = 17,
  LLVMDWARFSourceLanguageD = 18,
  LLVMDWARFSourceLanguagePython = 19,
  LLVMDWARFSourceLanguageOpenCL = 20,
  LLVMDWARFSourceLanguageGo = 21,
  LLVMDWARFSourceLanguageModula3 = 22,
  LLVMDWARFSourceLanguageHaskell = 23,
  LLVMDWARFSourceLanguageC_plus_plus_03 = 24,
  LLVMDWARFSourceLanguageC_plus_plus_11 = 25,
  LLVMDWARFSourceLanguageOCaml = 26,
  LLVMDWARFSourceLanguageRust = 27,
  LLVMDWARFSourceLanguageC11 = 28,
  LLVMDWARFSourceLanguageSwift = 29,
  LLVMDWARFSourceLanguageJulia = 30,
  LLVMDWARFSourceLanguageDylan = 31,
  LLVMDWARFSourceLanguageC_plus_plus_14 = 32,
  LLVMDWARFSourceLanguageFortran03 = 33,
  LLVMDWARFSourceLanguageFortran08 = 34,
  LLVMDWARFSourceLanguageRenderScript = 35,
  LLVMDWARFSourceLanguageBLISS = 36,
  LLVMDWARFSourceLanguageKotlin = 37,
  LLVMDWARFSourceLanguageZig = 38,
  LLVMDWARFSourceLanguageCrystal = 39,
  LLVMDWARFSourceLanguageC_plus_plus_17 = 40,
  LLVMDWARFSourceLanguageC_plus_plus_20 = 41,
  LLVMDWARFSourceLanguageC17 = 42,
  LLVMDWARFSourceLanguageFortran18 = 43,
  LLVMDWARFSourceLanguageAda2005 = 44,
  LLVMDWARFSourceLanguageAda2012 = 45,
  LLVMDWARFSourceLanguageHIP = 46,
  LLVMDWARFSourceLanguageAssembly = 47,
  LLVMDWARFSourceLanguageC_sharp = 48,
  LLVMDWARFSourceLanguageMojo = 49,
  LLVMDWARFSourceLanguageGLSL = 50,
  LLVMDWARFSourceLanguageGLSL_ES = 51,
  LLVMDWARFSourceLanguageHLSL = 52,
  LLVMDWARFSourceLanguageOpenCL_CPP = 53,
  LLVMDWARFSourceLanguageCPP_for_OpenCL = 54,
  LLVMDWARFSourceLanguageSYCL = 55,
  LLVMDWARFSourceLanguageRuby = 56,
  LLVMDWARFSourceLanguageMove = 57,
  LLVMDWARFSourceLanguageHylo = 58,
  LLVMDWARFSourceLanguageMips_Assembler = 59,
  LLVMDWARFSourceLanguageGOOGLE_RenderScript = 60,
  LLVMDWARFSourceLanguageBORLAND_Delphi = 61,
};
LLVMDWARFEmissionKind :: enum {
  LLVMDWARFEmissionNone = 0,
  LLVMDWARFEmissionFull = 1,
  LLVMDWARFEmissionLineTablesOnly = 2,
};
__bind_gen__anon_D7 :: enum {
  LLVMMDStringMetadataKind = 0,
  LLVMConstantAsMetadataMetadataKind = 1,
  LLVMLocalAsMetadataMetadataKind = 2,
  LLVMDistinctMDOperandPlaceholderMetadataKind = 3,
  LLVMMDTupleMetadataKind = 4,
  LLVMDILocationMetadataKind = 5,
  LLVMDIExpressionMetadataKind = 6,
  LLVMDIGlobalVariableExpressionMetadataKind = 7,
  LLVMGenericDINodeMetadataKind = 8,
  LLVMDISubrangeMetadataKind = 9,
  LLVMDIEnumeratorMetadataKind = 10,
  LLVMDIBasicTypeMetadataKind = 11,
  LLVMDIDerivedTypeMetadataKind = 12,
  LLVMDICompositeTypeMetadataKind = 13,
  LLVMDISubroutineTypeMetadataKind = 14,
  LLVMDIFileMetadataKind = 15,
  LLVMDICompileUnitMetadataKind = 16,
  LLVMDISubprogramMetadataKind = 17,
  LLVMDILexicalBlockMetadataKind = 18,
  LLVMDILexicalBlockFileMetadataKind = 19,
  LLVMDINamespaceMetadataKind = 20,
  LLVMDIModuleMetadataKind = 21,
  LLVMDITemplateTypeParameterMetadataKind = 22,
  LLVMDITemplateValueParameterMetadataKind = 23,
  LLVMDIGlobalVariableMetadataKind = 24,
  LLVMDILocalVariableMetadataKind = 25,
  LLVMDILabelMetadataKind = 26,
  LLVMDIObjCPropertyMetadataKind = 27,
  LLVMDIImportedEntityMetadataKind = 28,
  LLVMDIMacroMetadataKind = 29,
  LLVMDIMacroFileMetadataKind = 30,
  LLVMDICommonBlockMetadataKind = 31,
  LLVMDIStringTypeMetadataKind = 32,
  LLVMDIGenericSubrangeMetadataKind = 33,
  LLVMDIArgListMetadataKind = 34,
  LLVMDIAssignIDMetadataKind = 35,
};
alias LLVMMetadataKind :: u32;
alias LLVMDWARFTypeEncoding :: u32;
LLVMDWARFMacinfoRecordType :: enum {
  LLVMDWARFMacinfoRecordTypeDefine = 1,
  LLVMDWARFMacinfoRecordTypeMacro = 2,
  LLVMDWARFMacinfoRecordTypeStartFile = 3,
  LLVMDWARFMacinfoRecordTypeEndFile = 4,
  LLVMDWARFMacinfoRecordTypeVendorExt = 255,
};
#foreign LLVMDebugMetadataVersion :: fn() -> u32;
#foreign LLVMGetModuleDebugMetadataVersion :: fn(Module: LLVMModuleRef) -> u32;
#foreign LLVMStripModuleDebugInfo :: fn(Module: LLVMModuleRef) -> LLVMBool;
#foreign LLVMCreateDIBuilderDisallowUnresolved :: fn(M: LLVMModuleRef) -> LLVMDIBuilderRef;
#foreign LLVMCreateDIBuilder :: fn(M: LLVMModuleRef) -> LLVMDIBuilderRef;
#foreign LLVMDisposeDIBuilder :: fn(Builder: LLVMDIBuilderRef) -> void;
#foreign LLVMDIBuilderFinalize :: fn(Builder: LLVMDIBuilderRef) -> void;
#foreign LLVMDIBuilderFinalizeSubprogram :: fn(Builder: LLVMDIBuilderRef, Subprogram: LLVMMetadataRef) -> void;
#foreign LLVMDIBuilderCreateCompileUnit :: fn(Builder: LLVMDIBuilderRef, Lang: LLVMDWARFSourceLanguage, FileRef: LLVMMetadataRef, Producer: *const u8, ProducerLen: u64, isOptimized: LLVMBool, Flags: *const u8, FlagsLen: u64, RuntimeVer: u32, SplitName: *const u8, SplitNameLen: u64, Kind: LLVMDWARFEmissionKind, DWOId: u32, SplitDebugInlining: LLVMBool, DebugInfoForProfiling: LLVMBool, SysRoot: *const u8, SysRootLen: u64, SDK: *const u8, SDKLen: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateFile :: fn(Builder: LLVMDIBuilderRef, Filename: *const u8, FilenameLen: u64, Directory: *const u8, DirectoryLen: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateModule :: fn(Builder: LLVMDIBuilderRef, ParentScope: LLVMMetadataRef, Name: *const u8, NameLen: u64, ConfigMacros: *const u8, ConfigMacrosLen: u64, IncludePath: *const u8, IncludePathLen: u64, APINotesFile: *const u8, APINotesFileLen: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateNameSpace :: fn(Builder: LLVMDIBuilderRef, ParentScope: LLVMMetadataRef, Name: *const u8, NameLen: u64, ExportSymbols: LLVMBool) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateLexicalBlock :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, Column: u32) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateLexicalBlockFile :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Discriminator: u32) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateImportedModuleFromNamespace :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, NS: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateImportedModuleFromAlias :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, ImportedEntity: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, Elements: *mut LLVMMetadataRef, NumElements: u32) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateImportedModuleFromModule :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, M: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, Elements: *mut LLVMMetadataRef, NumElements: u32) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateImportedDeclaration :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Decl: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, Name: *const u8, NameLen: u64, Elements: *mut LLVMMetadataRef, NumElements: u32) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateDebugLocation :: fn(Ctx: LLVMContextRef, Line: u32, Column: u32, Scope: LLVMMetadataRef, InlinedAt: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDILocationGetLine :: fn(Location: LLVMMetadataRef) -> u32;
#foreign LLVMDILocationGetColumn :: fn(Location: LLVMMetadataRef) -> u32;
#foreign LLVMDILocationGetScope :: fn(Location: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDILocationGetInlinedAt :: fn(Location: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIScopeGetFile :: fn(Scope: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIFileGetDirectory :: fn(File: LLVMMetadataRef, Len: *mut u32) -> *const u8;
#foreign LLVMDIFileGetFilename :: fn(File: LLVMMetadataRef, Len: *mut u32) -> *const u8;
#foreign LLVMDIFileGetSource :: fn(File: LLVMMetadataRef, Len: *mut u32) -> *const u8;
#foreign LLVMDIBuilderGetOrCreateTypeArray :: fn(Builder: LLVMDIBuilderRef, Data: *mut LLVMMetadataRef, NumElements: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateSubroutineType :: fn(Builder: LLVMDIBuilderRef, File: LLVMMetadataRef, ParameterTypes: *mut LLVMMetadataRef, NumParameterTypes: u32, Flags: LLVMDIFlags) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateMacro :: fn(Builder: LLVMDIBuilderRef, ParentMacroFile: LLVMMetadataRef, Line: u32, RecordType: LLVMDWARFMacinfoRecordType, Name: *const u8, NameLen: u64, Value: *const u8, ValueLen: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateTempMacroFile :: fn(Builder: LLVMDIBuilderRef, ParentMacroFile: LLVMMetadataRef, Line: u32, File: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateEnumerator :: fn(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64, Value: s64, IsUnsigned: LLVMBool) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateEnumerationType :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, Elements: *mut LLVMMetadataRef, NumElements: u32, ClassTy: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateUnionType :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags, Elements: *mut LLVMMetadataRef, NumElements: u32, RunTimeLang: u32, UniqueId: *const u8, UniqueIdLen: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateArrayType :: fn(Builder: LLVMDIBuilderRef, Size: u64, AlignInBits: u32, Ty: LLVMMetadataRef, Subscripts: *mut LLVMMetadataRef, NumSubscripts: u32) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateVectorType :: fn(Builder: LLVMDIBuilderRef, Size: u64, AlignInBits: u32, Ty: LLVMMetadataRef, Subscripts: *mut LLVMMetadataRef, NumSubscripts: u32) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateUnspecifiedType :: fn(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateBasicType :: fn(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64, SizeInBits: u64, Encoding: LLVMDWARFTypeEncoding, Flags: LLVMDIFlags) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreatePointerType :: fn(Builder: LLVMDIBuilderRef, PointeeTy: LLVMMetadataRef, SizeInBits: u64, AlignInBits: u32, AddressSpace: u32, Name: *const u8, NameLen: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateStructType :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags, DerivedFrom: LLVMMetadataRef, Elements: *mut LLVMMetadataRef, NumElements: u32, RunTimeLang: u32, VTableHolder: LLVMMetadataRef, UniqueId: *const u8, UniqueIdLen: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateMemberType :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, SizeInBits: u64, AlignInBits: u32, OffsetInBits: u64, Flags: LLVMDIFlags, Ty: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateStaticMemberType :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, Type: LLVMMetadataRef, Flags: LLVMDIFlags, ConstantVal: LLVMValueRef, AlignInBits: u32) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateMemberPointerType :: fn(Builder: LLVMDIBuilderRef, PointeeType: LLVMMetadataRef, ClassType: LLVMMetadataRef, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateObjCIVar :: fn(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, SizeInBits: u64, AlignInBits: u32, OffsetInBits: u64, Flags: LLVMDIFlags, Ty: LLVMMetadataRef, PropertyNode: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateObjCProperty :: fn(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, GetterName: *const u8, GetterNameLen: u64, SetterName: *const u8, SetterNameLen: u64, PropertyAttributes: u32, Ty: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateObjectPointerType :: fn(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateQualifiedType :: fn(Builder: LLVMDIBuilderRef, Tag: u32, Type: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateReferenceType :: fn(Builder: LLVMDIBuilderRef, Tag: u32, Type: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateNullPtrType :: fn(Builder: LLVMDIBuilderRef) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateTypedef :: fn(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, Scope: LLVMMetadataRef, AlignInBits: u32) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateInheritance :: fn(Builder: LLVMDIBuilderRef, Ty: LLVMMetadataRef, BaseTy: LLVMMetadataRef, BaseOffset: u64, VBPtrOffset: u32, Flags: LLVMDIFlags) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateForwardDecl :: fn(Builder: LLVMDIBuilderRef, Tag: u32, Name: *const u8, NameLen: u64, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, RuntimeLang: u32, SizeInBits: u64, AlignInBits: u32, UniqueIdentifier: *const u8, UniqueIdentifierLen: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateReplaceableCompositeType :: fn(Builder: LLVMDIBuilderRef, Tag: u32, Name: *const u8, NameLen: u64, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, RuntimeLang: u32, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags, UniqueIdentifier: *const u8, UniqueIdentifierLen: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateBitFieldMemberType :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, OffsetInBits: u64, StorageOffsetInBits: u64, Flags: LLVMDIFlags, Type: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateClassType :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, OffsetInBits: u64, Flags: LLVMDIFlags, DerivedFrom: LLVMMetadataRef, Elements: *mut LLVMMetadataRef, NumElements: u32, VTableHolder: LLVMMetadataRef, TemplateParamsNode: LLVMMetadataRef, UniqueIdentifier: *const u8, UniqueIdentifierLen: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateArtificialType :: fn(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDITypeGetName :: fn(DType: LLVMMetadataRef, Length: *mut u64) -> *const u8;
#foreign LLVMDITypeGetSizeInBits :: fn(DType: LLVMMetadataRef) -> u64;
#foreign LLVMDITypeGetOffsetInBits :: fn(DType: LLVMMetadataRef) -> u64;
#foreign LLVMDITypeGetAlignInBits :: fn(DType: LLVMMetadataRef) -> u32;
#foreign LLVMDITypeGetLine :: fn(DType: LLVMMetadataRef) -> u32;
#foreign LLVMDITypeGetFlags :: fn(DType: LLVMMetadataRef) -> LLVMDIFlags;
#foreign LLVMDIBuilderGetOrCreateSubrange :: fn(Builder: LLVMDIBuilderRef, LowerBound: s64, Count: s64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderGetOrCreateArray :: fn(Builder: LLVMDIBuilderRef, Data: *mut LLVMMetadataRef, NumElements: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateExpression :: fn(Builder: LLVMDIBuilderRef, Addr: *mut u64, Length: u64) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateConstantValueExpression :: fn(Builder: LLVMDIBuilderRef, Value: u64) -> LLVMMetadataRef;
#foreign LLVMGetDINodeTag :: fn(MD: LLVMMetadataRef) -> u16;
#foreign LLVMDIGlobalVariableExpressionGetVariable :: fn(GVE: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIGlobalVariableExpressionGetExpression :: fn(GVE: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIVariableGetFile :: fn(Var: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIVariableGetScope :: fn(Var: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign LLVMDIVariableGetLine :: fn(Var: LLVMMetadataRef) -> u32;
#foreign LLVMTemporaryMDNode :: fn(Ctx: LLVMContextRef, Data: *mut LLVMMetadataRef, NumElements: u64) -> LLVMMetadataRef;
#foreign LLVMDisposeTemporaryMDNode :: fn(TempNode: LLVMMetadataRef) -> void;
#foreign LLVMMetadataReplaceAllUsesWith :: fn(TempTargetMetadata: LLVMMetadataRef, Replacement: LLVMMetadataRef) -> void;
#foreign LLVMDIBuilderInsertDeclareRecordBefore :: fn(Builder: LLVMDIBuilderRef, Storage: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Instr: LLVMValueRef) -> LLVMDbgRecordRef;
#foreign LLVMDIBuilderInsertDeclareRecordAtEnd :: fn(Builder: LLVMDIBuilderRef, Storage: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Block: LLVMBasicBlockRef) -> LLVMDbgRecordRef;
#foreign LLVMDIBuilderInsertDbgValueRecordBefore :: fn(Builder: LLVMDIBuilderRef, Val: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Instr: LLVMValueRef) -> LLVMDbgRecordRef;
#foreign LLVMDIBuilderInsertDbgValueRecordAtEnd :: fn(Builder: LLVMDIBuilderRef, Val: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Block: LLVMBasicBlockRef) -> LLVMDbgRecordRef;
#foreign LLVMDIBuilderCreateAutoVariable :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, Ty: LLVMMetadataRef, AlwaysPreserve: LLVMBool, Flags: LLVMDIFlags, AlignInBits: u32) -> LLVMMetadataRef;
#foreign LLVMDIBuilderCreateParameterVariable :: fn(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, ArgNo: u32, File: LLVMMetadataRef, LineNo: u32, Ty: LLVMMetadataRef, AlwaysPreserve: LLVMBool, Flags: LLVMDIFlags) -> LLVMMetadataRef;
#foreign LLVMGetSubprogram :: fn(Func: LLVMValueRef) -> LLVMMetadataRef;
#foreign LLVMSetSubprogram :: fn(Func: LLVMValueRef, SP: LLVMMetadataRef) -> void;
#foreign LLVMDISubprogramGetLine :: fn(Subprogram: LLVMMetadataRef) -> u32;
#foreign LLVMInstructionGetDebugLoc :: fn(Inst: LLVMValueRef) -> LLVMMetadataRef;
#foreign LLVMInstructionSetDebugLoc :: fn(Inst: LLVMValueRef, Loc: LLVMMetadataRef) -> void;
#foreign LLVMGetMetadataKind :: fn(Metadata: LLVMMetadataRef) -> LLVMMetadataKind;
alias LLVMDisasmContextRef :: *mut void;
alias LLVMOpInfoCallback :: fn*(*mut void, u64, u64, u64, u64, s32, *mut void) -> s32;
LLVMOpInfoSymbol1 :: struct {
  Present: u64,
  Name: *const u8,
  Value: u64,
};
LLVMOpInfo1 :: struct {
  AddSymbol: LLVMOpInfoSymbol1,
  SubtractSymbol: LLVMOpInfoSymbol1,
  Value: u64,
  VariantKind: u64,
};
alias LLVMSymbolLookupCallback :: fn*(*mut void, u64, *mut u64, u64, *mut *const u8) -> *const u8;
#foreign LLVMCreateDisasm :: fn(TripleName: *const u8, DisInfo: *mut void, TagType: s32, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback) -> LLVMDisasmContextRef;
#foreign LLVMCreateDisasmCPU :: fn(Triple: *const u8, CPU: *const u8, DisInfo: *mut void, TagType: s32, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback) -> LLVMDisasmContextRef;
#foreign LLVMCreateDisasmCPUFeatures :: fn(Triple: *const u8, CPU: *const u8, Features: *const u8, DisInfo: *mut void, TagType: s32, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback) -> LLVMDisasmContextRef;
#foreign LLVMSetDisasmOptions :: fn(DC: LLVMDisasmContextRef, Options: u64) -> s32;
#foreign LLVMDisasmDispose :: fn(DC: LLVMDisasmContextRef) -> void;
#foreign LLVMDisasmInstruction :: fn(DC: LLVMDisasmContextRef, Bytes: *mut u8, BytesSize: u64, PC: u64, OutString: *mut u8, OutStringSize: u64) -> u64;
LLVMOpaqueError :: struct;
alias LLVMErrorRef :: *mut LLVMOpaqueError;
alias LLVMErrorTypeId :: *const void;
#foreign LLVMGetErrorTypeId :: fn(Err: LLVMErrorRef) -> LLVMErrorTypeId;
#foreign LLVMConsumeError :: fn(Err: LLVMErrorRef) -> void;
#foreign LLVMGetErrorMessage :: fn(Err: LLVMErrorRef) -> *mut u8;
#foreign LLVMDisposeErrorMessage :: fn(ErrMsg: *mut u8) -> void;
#foreign LLVMGetStringErrorTypeId :: fn() -> LLVMErrorTypeId;
#foreign LLVMCreateStringError :: fn(ErrMsg: *const u8) -> LLVMErrorRef;
LLVMByteOrdering :: enum {
  LLVMBigEndian = 0,
  LLVMLittleEndian = 1,
};
LLVMOpaqueTargetData :: struct;
alias LLVMTargetDataRef :: *mut LLVMOpaqueTargetData;
LLVMOpaqueTargetLibraryInfotData :: struct;
alias LLVMTargetLibraryInfoRef :: *mut LLVMOpaqueTargetLibraryInfotData;
#foreign LLVMInitializeAArch64TargetInfo :: fn() -> void;
#foreign LLVMInitializeAMDGPUTargetInfo :: fn() -> void;
#foreign LLVMInitializeARMTargetInfo :: fn() -> void;
#foreign LLVMInitializeAVRTargetInfo :: fn() -> void;
#foreign LLVMInitializeBPFTargetInfo :: fn() -> void;
#foreign LLVMInitializeHexagonTargetInfo :: fn() -> void;
#foreign LLVMInitializeLanaiTargetInfo :: fn() -> void;
#foreign LLVMInitializeLoongArchTargetInfo :: fn() -> void;
#foreign LLVMInitializeMipsTargetInfo :: fn() -> void;
#foreign LLVMInitializeMSP430TargetInfo :: fn() -> void;
#foreign LLVMInitializeNVPTXTargetInfo :: fn() -> void;
#foreign LLVMInitializePowerPCTargetInfo :: fn() -> void;
#foreign LLVMInitializeRISCVTargetInfo :: fn() -> void;
#foreign LLVMInitializeSparcTargetInfo :: fn() -> void;
#foreign LLVMInitializeSystemZTargetInfo :: fn() -> void;
#foreign LLVMInitializeVETargetInfo :: fn() -> void;
#foreign LLVMInitializeWebAssemblyTargetInfo :: fn() -> void;
#foreign LLVMInitializeX86TargetInfo :: fn() -> void;
#foreign LLVMInitializeXCoreTargetInfo :: fn() -> void;
#foreign LLVMInitializeAArch64Target :: fn() -> void;
#foreign LLVMInitializeAMDGPUTarget :: fn() -> void;
#foreign LLVMInitializeARMTarget :: fn() -> void;
#foreign LLVMInitializeAVRTarget :: fn() -> void;
#foreign LLVMInitializeBPFTarget :: fn() -> void;
#foreign LLVMInitializeHexagonTarget :: fn() -> void;
#foreign LLVMInitializeLanaiTarget :: fn() -> void;
#foreign LLVMInitializeLoongArchTarget :: fn() -> void;
#foreign LLVMInitializeMipsTarget :: fn() -> void;
#foreign LLVMInitializeMSP430Target :: fn() -> void;
#foreign LLVMInitializeNVPTXTarget :: fn() -> void;
#foreign LLVMInitializePowerPCTarget :: fn() -> void;
#foreign LLVMInitializeRISCVTarget :: fn() -> void;
#foreign LLVMInitializeSparcTarget :: fn() -> void;
#foreign LLVMInitializeSystemZTarget :: fn() -> void;
#foreign LLVMInitializeVETarget :: fn() -> void;
#foreign LLVMInitializeWebAssemblyTarget :: fn() -> void;
#foreign LLVMInitializeX86Target :: fn() -> void;
#foreign LLVMInitializeXCoreTarget :: fn() -> void;
#foreign LLVMInitializeAArch64TargetMC :: fn() -> void;
#foreign LLVMInitializeAMDGPUTargetMC :: fn() -> void;
#foreign LLVMInitializeARMTargetMC :: fn() -> void;
#foreign LLVMInitializeAVRTargetMC :: fn() -> void;
#foreign LLVMInitializeBPFTargetMC :: fn() -> void;
#foreign LLVMInitializeHexagonTargetMC :: fn() -> void;
#foreign LLVMInitializeLanaiTargetMC :: fn() -> void;
#foreign LLVMInitializeLoongArchTargetMC :: fn() -> void;
#foreign LLVMInitializeMipsTargetMC :: fn() -> void;
#foreign LLVMInitializeMSP430TargetMC :: fn() -> void;
#foreign LLVMInitializeNVPTXTargetMC :: fn() -> void;
#foreign LLVMInitializePowerPCTargetMC :: fn() -> void;
#foreign LLVMInitializeRISCVTargetMC :: fn() -> void;
#foreign LLVMInitializeSparcTargetMC :: fn() -> void;
#foreign LLVMInitializeSystemZTargetMC :: fn() -> void;
#foreign LLVMInitializeVETargetMC :: fn() -> void;
#foreign LLVMInitializeWebAssemblyTargetMC :: fn() -> void;
#foreign LLVMInitializeX86TargetMC :: fn() -> void;
#foreign LLVMInitializeXCoreTargetMC :: fn() -> void;
#foreign LLVMInitializeAArch64AsmPrinter :: fn() -> void;
#foreign LLVMInitializeAMDGPUAsmPrinter :: fn() -> void;
#foreign LLVMInitializeARMAsmPrinter :: fn() -> void;
#foreign LLVMInitializeAVRAsmPrinter :: fn() -> void;
#foreign LLVMInitializeBPFAsmPrinter :: fn() -> void;
#foreign LLVMInitializeHexagonAsmPrinter :: fn() -> void;
#foreign LLVMInitializeLanaiAsmPrinter :: fn() -> void;
#foreign LLVMInitializeLoongArchAsmPrinter :: fn() -> void;
#foreign LLVMInitializeMipsAsmPrinter :: fn() -> void;
#foreign LLVMInitializeMSP430AsmPrinter :: fn() -> void;
#foreign LLVMInitializeNVPTXAsmPrinter :: fn() -> void;
#foreign LLVMInitializePowerPCAsmPrinter :: fn() -> void;
#foreign LLVMInitializeRISCVAsmPrinter :: fn() -> void;
#foreign LLVMInitializeSparcAsmPrinter :: fn() -> void;
#foreign LLVMInitializeSystemZAsmPrinter :: fn() -> void;
#foreign LLVMInitializeVEAsmPrinter :: fn() -> void;
#foreign LLVMInitializeWebAssemblyAsmPrinter :: fn() -> void;
#foreign LLVMInitializeX86AsmPrinter :: fn() -> void;
#foreign LLVMInitializeXCoreAsmPrinter :: fn() -> void;
#foreign LLVMInitializeAArch64AsmParser :: fn() -> void;
#foreign LLVMInitializeAMDGPUAsmParser :: fn() -> void;
#foreign LLVMInitializeARMAsmParser :: fn() -> void;
#foreign LLVMInitializeAVRAsmParser :: fn() -> void;
#foreign LLVMInitializeBPFAsmParser :: fn() -> void;
#foreign LLVMInitializeHexagonAsmParser :: fn() -> void;
#foreign LLVMInitializeLanaiAsmParser :: fn() -> void;
#foreign LLVMInitializeLoongArchAsmParser :: fn() -> void;
#foreign LLVMInitializeMipsAsmParser :: fn() -> void;
#foreign LLVMInitializeMSP430AsmParser :: fn() -> void;
#foreign LLVMInitializePowerPCAsmParser :: fn() -> void;
#foreign LLVMInitializeRISCVAsmParser :: fn() -> void;
#foreign LLVMInitializeSparcAsmParser :: fn() -> void;
#foreign LLVMInitializeSystemZAsmParser :: fn() -> void;
#foreign LLVMInitializeVEAsmParser :: fn() -> void;
#foreign LLVMInitializeWebAssemblyAsmParser :: fn() -> void;
#foreign LLVMInitializeX86AsmParser :: fn() -> void;
#foreign LLVMInitializeAArch64Disassembler :: fn() -> void;
#foreign LLVMInitializeAMDGPUDisassembler :: fn() -> void;
#foreign LLVMInitializeARMDisassembler :: fn() -> void;
#foreign LLVMInitializeAVRDisassembler :: fn() -> void;
#foreign LLVMInitializeBPFDisassembler :: fn() -> void;
#foreign LLVMInitializeHexagonDisassembler :: fn() -> void;
#foreign LLVMInitializeLanaiDisassembler :: fn() -> void;
#foreign LLVMInitializeLoongArchDisassembler :: fn() -> void;
#foreign LLVMInitializeMipsDisassembler :: fn() -> void;
#foreign LLVMInitializeMSP430Disassembler :: fn() -> void;
#foreign LLVMInitializePowerPCDisassembler :: fn() -> void;
#foreign LLVMInitializeRISCVDisassembler :: fn() -> void;
#foreign LLVMInitializeSparcDisassembler :: fn() -> void;
#foreign LLVMInitializeSystemZDisassembler :: fn() -> void;
#foreign LLVMInitializeVEDisassembler :: fn() -> void;
#foreign LLVMInitializeWebAssemblyDisassembler :: fn() -> void;
#foreign LLVMInitializeX86Disassembler :: fn() -> void;
#foreign LLVMInitializeXCoreDisassembler :: fn() -> void;
#foreign LLVMInitializeAllTargetInfos :: fn() -> void;
#foreign LLVMInitializeAllTargets :: fn() -> void;
#foreign LLVMInitializeAllTargetMCs :: fn() -> void;
#foreign LLVMInitializeAllAsmPrinters :: fn() -> void;
#foreign LLVMInitializeAllAsmParsers :: fn() -> void;
#foreign LLVMInitializeAllDisassemblers :: fn() -> void;
#foreign LLVMInitializeNativeTarget :: fn() -> LLVMBool;
#foreign LLVMInitializeNativeAsmParser :: fn() -> LLVMBool;
#foreign LLVMInitializeNativeAsmPrinter :: fn() -> LLVMBool;
#foreign LLVMInitializeNativeDisassembler :: fn() -> LLVMBool;
#foreign LLVMGetModuleDataLayout :: fn(M: LLVMModuleRef) -> LLVMTargetDataRef;
#foreign LLVMSetModuleDataLayout :: fn(M: LLVMModuleRef, DL: LLVMTargetDataRef) -> void;
#foreign LLVMCreateTargetData :: fn(StringRep: *const u8) -> LLVMTargetDataRef;
#foreign LLVMDisposeTargetData :: fn(TD: LLVMTargetDataRef) -> void;
#foreign LLVMAddTargetLibraryInfo :: fn(TLI: LLVMTargetLibraryInfoRef, PM: LLVMPassManagerRef) -> void;
#foreign LLVMCopyStringRepOfTargetData :: fn(TD: LLVMTargetDataRef) -> *mut u8;
#foreign LLVMByteOrder :: fn(TD: LLVMTargetDataRef) -> LLVMByteOrdering;
#foreign LLVMPointerSize :: fn(TD: LLVMTargetDataRef) -> u32;
#foreign LLVMPointerSizeForAS :: fn(TD: LLVMTargetDataRef, AS: u32) -> u32;
#foreign LLVMIntPtrType :: fn(TD: LLVMTargetDataRef) -> LLVMTypeRef;
#foreign LLVMIntPtrTypeForAS :: fn(TD: LLVMTargetDataRef, AS: u32) -> LLVMTypeRef;
#foreign LLVMIntPtrTypeInContext :: fn(C: LLVMContextRef, TD: LLVMTargetDataRef) -> LLVMTypeRef;
#foreign LLVMIntPtrTypeForASInContext :: fn(C: LLVMContextRef, TD: LLVMTargetDataRef, AS: u32) -> LLVMTypeRef;
#foreign LLVMSizeOfTypeInBits :: fn(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u64;
#foreign LLVMStoreSizeOfType :: fn(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u64;
#foreign LLVMABISizeOfType :: fn(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u64;
#foreign LLVMABIAlignmentOfType :: fn(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u32;
#foreign LLVMCallFrameAlignmentOfType :: fn(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u32;
#foreign LLVMPreferredAlignmentOfType :: fn(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u32;
#foreign LLVMPreferredAlignmentOfGlobal :: fn(TD: LLVMTargetDataRef, GlobalVar: LLVMValueRef) -> u32;
#foreign LLVMElementAtOffset :: fn(TD: LLVMTargetDataRef, StructTy: LLVMTypeRef, Offset: u64) -> u32;
#foreign LLVMOffsetOfElement :: fn(TD: LLVMTargetDataRef, StructTy: LLVMTypeRef, Element: u32) -> u64;
LLVMOpaqueTargetMachineOptions :: struct;
alias LLVMTargetMachineOptionsRef :: *mut LLVMOpaqueTargetMachineOptions;
LLVMOpaqueTargetMachine :: struct;
alias LLVMTargetMachineRef :: *mut LLVMOpaqueTargetMachine;
LLVMTarget :: struct;
alias LLVMTargetRef :: *mut LLVMTarget;
LLVMCodeGenOptLevel :: enum {
  LLVMCodeGenLevelNone = 0,
  LLVMCodeGenLevelLess = 1,
  LLVMCodeGenLevelDefault = 2,
  LLVMCodeGenLevelAggressive = 3,
};
LLVMRelocMode :: enum {
  LLVMRelocDefault = 0,
  LLVMRelocStatic = 1,
  LLVMRelocPIC = 2,
  LLVMRelocDynamicNoPic = 3,
  LLVMRelocROPI = 4,
  LLVMRelocRWPI = 5,
  LLVMRelocROPI_RWPI = 6,
};
LLVMCodeModel :: enum {
  LLVMCodeModelDefault = 0,
  LLVMCodeModelJITDefault = 1,
  LLVMCodeModelTiny = 2,
  LLVMCodeModelSmall = 3,
  LLVMCodeModelKernel = 4,
  LLVMCodeModelMedium = 5,
  LLVMCodeModelLarge = 6,
};
LLVMCodeGenFileType :: enum {
  LLVMAssemblyFile = 0,
  LLVMObjectFile = 1,
};
LLVMGlobalISelAbortMode :: enum {
  LLVMGlobalISelAbortEnable = 0,
  LLVMGlobalISelAbortDisable = 1,
  LLVMGlobalISelAbortDisableWithDiag = 2,
};
#foreign LLVMGetFirstTarget :: fn() -> LLVMTargetRef;
#foreign LLVMGetNextTarget :: fn(T: LLVMTargetRef) -> LLVMTargetRef;
#foreign LLVMGetTargetFromName :: fn(Name: *const u8) -> LLVMTargetRef;
#foreign LLVMGetTargetFromTriple :: fn(Triple: *const u8, T: *mut LLVMTargetRef, ErrorMessage: *mut *mut u8) -> LLVMBool;
#foreign LLVMGetTargetName :: fn(T: LLVMTargetRef) -> *const u8;
#foreign LLVMGetTargetDescription :: fn(T: LLVMTargetRef) -> *const u8;
#foreign LLVMTargetHasJIT :: fn(T: LLVMTargetRef) -> LLVMBool;
#foreign LLVMTargetHasTargetMachine :: fn(T: LLVMTargetRef) -> LLVMBool;
#foreign LLVMTargetHasAsmBackend :: fn(T: LLVMTargetRef) -> LLVMBool;
#foreign LLVMCreateTargetMachineOptions :: fn() -> LLVMTargetMachineOptionsRef;
#foreign LLVMDisposeTargetMachineOptions :: fn(Options: LLVMTargetMachineOptionsRef) -> void;
#foreign LLVMTargetMachineOptionsSetCPU :: fn(Options: LLVMTargetMachineOptionsRef, CPU: *const u8) -> void;
#foreign LLVMTargetMachineOptionsSetFeatures :: fn(Options: LLVMTargetMachineOptionsRef, Features: *const u8) -> void;
#foreign LLVMTargetMachineOptionsSetABI :: fn(Options: LLVMTargetMachineOptionsRef, ABI: *const u8) -> void;
#foreign LLVMTargetMachineOptionsSetCodeGenOptLevel :: fn(Options: LLVMTargetMachineOptionsRef, Level: LLVMCodeGenOptLevel) -> void;
#foreign LLVMTargetMachineOptionsSetRelocMode :: fn(Options: LLVMTargetMachineOptionsRef, Reloc: LLVMRelocMode) -> void;
#foreign LLVMTargetMachineOptionsSetCodeModel :: fn(Options: LLVMTargetMachineOptionsRef, CodeModel: LLVMCodeModel) -> void;
#foreign LLVMCreateTargetMachineWithOptions :: fn(T: LLVMTargetRef, Triple: *const u8, Options: LLVMTargetMachineOptionsRef) -> LLVMTargetMachineRef;
#foreign LLVMCreateTargetMachine :: fn(T: LLVMTargetRef, Triple: *const u8, CPU: *const u8, Features: *const u8, Level: LLVMCodeGenOptLevel, Reloc: LLVMRelocMode, CodeModel: LLVMCodeModel) -> LLVMTargetMachineRef;
#foreign LLVMDisposeTargetMachine :: fn(T: LLVMTargetMachineRef) -> void;
#foreign LLVMGetTargetMachineTarget :: fn(T: LLVMTargetMachineRef) -> LLVMTargetRef;
#foreign LLVMGetTargetMachineTriple :: fn(T: LLVMTargetMachineRef) -> *mut u8;
#foreign LLVMGetTargetMachineCPU :: fn(T: LLVMTargetMachineRef) -> *mut u8;
#foreign LLVMGetTargetMachineFeatureString :: fn(T: LLVMTargetMachineRef) -> *mut u8;
#foreign LLVMCreateTargetDataLayout :: fn(T: LLVMTargetMachineRef) -> LLVMTargetDataRef;
#foreign LLVMSetTargetMachineAsmVerbosity :: fn(T: LLVMTargetMachineRef, VerboseAsm: LLVMBool) -> void;
#foreign LLVMSetTargetMachineFastISel :: fn(T: LLVMTargetMachineRef, Enable: LLVMBool) -> void;
#foreign LLVMSetTargetMachineGlobalISel :: fn(T: LLVMTargetMachineRef, Enable: LLVMBool) -> void;
#foreign LLVMSetTargetMachineGlobalISelAbort :: fn(T: LLVMTargetMachineRef, Mode: LLVMGlobalISelAbortMode) -> void;
#foreign LLVMSetTargetMachineMachineOutliner :: fn(T: LLVMTargetMachineRef, Enable: LLVMBool) -> void;
#foreign LLVMTargetMachineEmitToFile :: fn(T: LLVMTargetMachineRef, M: LLVMModuleRef, Filename: *const u8, codegen: LLVMCodeGenFileType, ErrorMessage: *mut *mut u8) -> LLVMBool;
#foreign LLVMTargetMachineEmitToMemoryBuffer :: fn(T: LLVMTargetMachineRef, M: LLVMModuleRef, codegen: LLVMCodeGenFileType, ErrorMessage: *mut *mut u8, OutMemBuf: *mut LLVMMemoryBufferRef) -> LLVMBool;
#foreign LLVMGetDefaultTargetTriple :: fn() -> *mut u8;
#foreign LLVMNormalizeTargetTriple :: fn(triple: *const u8) -> *mut u8;
#foreign LLVMGetHostCPUName :: fn() -> *mut u8;
#foreign LLVMGetHostCPUFeatures :: fn() -> *mut u8;
#foreign LLVMAddAnalysisPasses :: fn(T: LLVMTargetMachineRef, PM: LLVMPassManagerRef) -> void;
#foreign LLVMLinkInMCJIT :: fn() -> void;
#foreign LLVMLinkInInterpreter :: fn() -> void;
LLVMOpaqueGenericValue :: struct;
alias LLVMGenericValueRef :: *mut LLVMOpaqueGenericValue;
LLVMOpaqueExecutionEngine :: struct;
alias LLVMExecutionEngineRef :: *mut LLVMOpaqueExecutionEngine;
LLVMOpaqueMCJITMemoryManager :: struct;
alias LLVMMCJITMemoryManagerRef :: *mut LLVMOpaqueMCJITMemoryManager;
LLVMMCJITCompilerOptions :: struct {
  OptLevel: u32,
  CodeModel: LLVMCodeModel,
  NoFramePointerElim: LLVMBool,
  EnableFastISel: LLVMBool,
  MCJMM: LLVMMCJITMemoryManagerRef,
};
#foreign LLVMCreateGenericValueOfInt :: fn(Ty: LLVMTypeRef, N: u64, IsSigned: LLVMBool) -> LLVMGenericValueRef;
#foreign LLVMCreateGenericValueOfPointer :: fn(P: *mut void) -> LLVMGenericValueRef;
#foreign LLVMCreateGenericValueOfFloat :: fn(Ty: LLVMTypeRef, N: f64) -> LLVMGenericValueRef;
#foreign LLVMGenericValueIntWidth :: fn(GenValRef: LLVMGenericValueRef) -> u32;
#foreign LLVMGenericValueToInt :: fn(GenVal: LLVMGenericValueRef, IsSigned: LLVMBool) -> u64;
#foreign LLVMGenericValueToPointer :: fn(GenVal: LLVMGenericValueRef) -> *mut void;
#foreign LLVMGenericValueToFloat :: fn(TyRef: LLVMTypeRef, GenVal: LLVMGenericValueRef) -> f64;
#foreign LLVMDisposeGenericValue :: fn(GenVal: LLVMGenericValueRef) -> void;
#foreign LLVMCreateExecutionEngineForModule :: fn(OutEE: *mut LLVMExecutionEngineRef, M: LLVMModuleRef, OutError: *mut *mut u8) -> LLVMBool;
#foreign LLVMCreateInterpreterForModule :: fn(OutInterp: *mut LLVMExecutionEngineRef, M: LLVMModuleRef, OutError: *mut *mut u8) -> LLVMBool;
#foreign LLVMCreateJITCompilerForModule :: fn(OutJIT: *mut LLVMExecutionEngineRef, M: LLVMModuleRef, OptLevel: u32, OutError: *mut *mut u8) -> LLVMBool;
#foreign LLVMInitializeMCJITCompilerOptions :: fn(Options: *mut LLVMMCJITCompilerOptions, SizeOfOptions: u64) -> void;
#foreign LLVMCreateMCJITCompilerForModule :: fn(OutJIT: *mut LLVMExecutionEngineRef, M: LLVMModuleRef, Options: *mut LLVMMCJITCompilerOptions, SizeOfOptions: u64, OutError: *mut *mut u8) -> LLVMBool;
#foreign LLVMDisposeExecutionEngine :: fn(EE: LLVMExecutionEngineRef) -> void;
#foreign LLVMRunStaticConstructors :: fn(EE: LLVMExecutionEngineRef) -> void;
#foreign LLVMRunStaticDestructors :: fn(EE: LLVMExecutionEngineRef) -> void;
#foreign LLVMRunFunctionAsMain :: fn(EE: LLVMExecutionEngineRef, F: LLVMValueRef, ArgC: u32, ArgV: *const *const u8, EnvP: *const *const u8) -> s32;
#foreign LLVMRunFunction :: fn(EE: LLVMExecutionEngineRef, F: LLVMValueRef, NumArgs: u32, Args: *mut LLVMGenericValueRef) -> LLVMGenericValueRef;
#foreign LLVMFreeMachineCodeForFunction :: fn(EE: LLVMExecutionEngineRef, F: LLVMValueRef) -> void;
#foreign LLVMAddModule :: fn(EE: LLVMExecutionEngineRef, M: LLVMModuleRef) -> void;
#foreign LLVMRemoveModule :: fn(EE: LLVMExecutionEngineRef, M: LLVMModuleRef, OutMod: *mut LLVMModuleRef, OutError: *mut *mut u8) -> LLVMBool;
#foreign LLVMFindFunction :: fn(EE: LLVMExecutionEngineRef, Name: *const u8, OutFn: *mut LLVMValueRef) -> LLVMBool;
#foreign LLVMRecompileAndRelinkFunction :: fn(EE: LLVMExecutionEngineRef, Fn: LLVMValueRef) -> *mut void;
#foreign LLVMGetExecutionEngineTargetData :: fn(EE: LLVMExecutionEngineRef) -> LLVMTargetDataRef;
#foreign LLVMGetExecutionEngineTargetMachine :: fn(EE: LLVMExecutionEngineRef) -> LLVMTargetMachineRef;
#foreign LLVMAddGlobalMapping :: fn(EE: LLVMExecutionEngineRef, Global: LLVMValueRef, Addr: *mut void) -> void;
#foreign LLVMGetPointerToGlobal :: fn(EE: LLVMExecutionEngineRef, Global: LLVMValueRef) -> *mut void;
#foreign LLVMGetGlobalValueAddress :: fn(EE: LLVMExecutionEngineRef, Name: *const u8) -> u64;
#foreign LLVMGetFunctionAddress :: fn(EE: LLVMExecutionEngineRef, Name: *const u8) -> u64;
#foreign LLVMExecutionEngineGetErrMsg :: fn(EE: LLVMExecutionEngineRef, OutError: *mut *mut u8) -> LLVMBool;
alias LLVMMemoryManagerAllocateCodeSectionCallback :: fn*(*mut void, u64, u32, u32, *const u8) -> *mut u8;
alias LLVMMemoryManagerAllocateDataSectionCallback :: fn*(*mut void, u64, u32, u32, *const u8, LLVMBool) -> *mut u8;
alias LLVMMemoryManagerFinalizeMemoryCallback :: fn*(*mut void, *mut *mut u8) -> LLVMBool;
alias LLVMMemoryManagerDestroyCallback :: fn*(*mut void) -> void;
#foreign LLVMCreateSimpleMCJITMemoryManager :: fn(Opaque: *mut void, AllocateCodeSection: LLVMMemoryManagerAllocateCodeSectionCallback, AllocateDataSection: LLVMMemoryManagerAllocateDataSectionCallback, FinalizeMemory: LLVMMemoryManagerFinalizeMemoryCallback, Destroy: LLVMMemoryManagerDestroyCallback) -> LLVMMCJITMemoryManagerRef;
#foreign LLVMDisposeMCJITMemoryManager :: fn(MM: LLVMMCJITMemoryManagerRef) -> void;
#foreign LLVMCreateGDBRegistrationListener :: fn() -> LLVMJITEventListenerRef;
#foreign LLVMCreateIntelJITEventListener :: fn() -> LLVMJITEventListenerRef;
#foreign LLVMCreateOProfileJITEventListener :: fn() -> LLVMJITEventListenerRef;
#foreign LLVMCreatePerfJITEventListener :: fn() -> LLVMJITEventListenerRef;
#foreign LLVMParseIRInContext :: fn(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> LLVMBool;
LLVMLinkerMode :: enum {
  LLVMLinkerDestroySource = 0,
  LLVMLinkerPreserveSource_Removed = 1,
};
#foreign LLVMLinkModules2 :: fn(Dest: LLVMModuleRef, Src: LLVMModuleRef) -> LLVMBool;
alias LLVMOrcJITTargetAddress :: u64;
alias LLVMOrcExecutorAddress :: u64;
LLVMJITSymbolGenericFlags :: enum {
  LLVMJITSymbolGenericFlagsNone = 0,
  LLVMJITSymbolGenericFlagsExported = 1,
  LLVMJITSymbolGenericFlagsWeak = 2,
  LLVMJITSymbolGenericFlagsCallable = 4,
  LLVMJITSymbolGenericFlagsMaterializationSideEffectsOnly = 8,
};
alias LLVMJITSymbolTargetFlags :: u8;
LLVMJITSymbolFlags :: struct {
  GenericFlags: u8,
  TargetFlags: u8,
};
LLVMJITEvaluatedSymbol :: struct {
  Address: LLVMOrcExecutorAddress,
  Flags: LLVMJITSymbolFlags,
};
LLVMOrcOpaqueExecutionSession :: struct;
alias LLVMOrcExecutionSessionRef :: *mut LLVMOrcOpaqueExecutionSession;
alias LLVMOrcErrorReporterFunction :: fn*(*mut void, LLVMErrorRef) -> void;
LLVMOrcOpaqueSymbolStringPool :: struct;
alias LLVMOrcSymbolStringPoolRef :: *mut LLVMOrcOpaqueSymbolStringPool;
LLVMOrcOpaqueSymbolStringPoolEntry :: struct;
alias LLVMOrcSymbolStringPoolEntryRef :: *mut LLVMOrcOpaqueSymbolStringPoolEntry;
LLVMOrcCSymbolFlagsMapPair :: struct {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  Flags: LLVMJITSymbolFlags,
};
alias LLVMOrcCSymbolFlagsMapPairs :: *mut LLVMOrcCSymbolFlagsMapPair;
LLVMOrcCSymbolMapPair :: struct {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  Sym: LLVMJITEvaluatedSymbol,
};
alias LLVMOrcCSymbolMapPairs :: *mut LLVMOrcCSymbolMapPair;
LLVMOrcCSymbolAliasMapEntry :: struct {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  Flags: LLVMJITSymbolFlags,
};
LLVMOrcCSymbolAliasMapPair :: struct {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  Entry: LLVMOrcCSymbolAliasMapEntry,
};
alias LLVMOrcCSymbolAliasMapPairs :: *mut LLVMOrcCSymbolAliasMapPair;
LLVMOrcOpaqueJITDylib :: struct;
alias LLVMOrcJITDylibRef :: *mut LLVMOrcOpaqueJITDylib;
LLVMOrcCSymbolsList :: struct {
  Symbols: *mut LLVMOrcSymbolStringPoolEntryRef,
  Length: u64,
};
LLVMOrcCDependenceMapPair :: struct {
  JD: LLVMOrcJITDylibRef,
  Names: LLVMOrcCSymbolsList,
};
alias LLVMOrcCDependenceMapPairs :: *mut LLVMOrcCDependenceMapPair;
LLVMOrcCSymbolDependenceGroup :: struct {
  Symbols: LLVMOrcCSymbolsList,
  Dependencies: LLVMOrcCDependenceMapPairs,
  NumDependencies: u64,
};
LLVMOrcLookupKind :: enum {
  LLVMOrcLookupKindStatic = 0,
  LLVMOrcLookupKindDLSym = 1,
};
LLVMOrcJITDylibLookupFlags :: enum {
  LLVMOrcJITDylibLookupFlagsMatchExportedSymbolsOnly = 0,
  LLVMOrcJITDylibLookupFlagsMatchAllSymbols = 1,
};
LLVMOrcCJITDylibSearchOrderElement :: struct {
  JD: LLVMOrcJITDylibRef,
  JDLookupFlags: LLVMOrcJITDylibLookupFlags,
};
alias LLVMOrcCJITDylibSearchOrder :: *mut LLVMOrcCJITDylibSearchOrderElement;
LLVMOrcSymbolLookupFlags :: enum {
  LLVMOrcSymbolLookupFlagsRequiredSymbol = 0,
  LLVMOrcSymbolLookupFlagsWeaklyReferencedSymbol = 1,
};
LLVMOrcCLookupSetElement :: struct {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  LookupFlags: LLVMOrcSymbolLookupFlags,
};
alias LLVMOrcCLookupSet :: *mut LLVMOrcCLookupSetElement;
LLVMOrcOpaqueMaterializationUnit :: struct;
alias LLVMOrcMaterializationUnitRef :: *mut LLVMOrcOpaqueMaterializationUnit;
LLVMOrcOpaqueMaterializationResponsibility :: struct;
alias LLVMOrcMaterializationResponsibilityRef :: *mut LLVMOrcOpaqueMaterializationResponsibility;
alias LLVMOrcMaterializationUnitMaterializeFunction :: fn*(*mut void, LLVMOrcMaterializationResponsibilityRef) -> void;
alias LLVMOrcMaterializationUnitDiscardFunction :: fn*(*mut void, LLVMOrcJITDylibRef, LLVMOrcSymbolStringPoolEntryRef) -> void;
alias LLVMOrcMaterializationUnitDestroyFunction :: fn*(*mut void) -> void;
LLVMOrcOpaqueResourceTracker :: struct;
alias LLVMOrcResourceTrackerRef :: *mut LLVMOrcOpaqueResourceTracker;
LLVMOrcOpaqueDefinitionGenerator :: struct;
alias LLVMOrcDefinitionGeneratorRef :: *mut LLVMOrcOpaqueDefinitionGenerator;
LLVMOrcOpaqueLookupState :: struct;
alias LLVMOrcLookupStateRef :: *mut LLVMOrcOpaqueLookupState;
alias LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction :: fn*(LLVMOrcDefinitionGeneratorRef, *mut void, *mut LLVMOrcLookupStateRef, LLVMOrcLookupKind, LLVMOrcJITDylibRef, LLVMOrcJITDylibLookupFlags, LLVMOrcCLookupSet, u64) -> LLVMErrorRef;
alias LLVMOrcDisposeCAPIDefinitionGeneratorFunction :: fn*(*mut void) -> void;
alias LLVMOrcSymbolPredicate :: fn*(*mut void, LLVMOrcSymbolStringPoolEntryRef) -> s32;
LLVMOrcOpaqueThreadSafeContext :: struct;
alias LLVMOrcThreadSafeContextRef :: *mut LLVMOrcOpaqueThreadSafeContext;
LLVMOrcOpaqueThreadSafeModule :: struct;
alias LLVMOrcThreadSafeModuleRef :: *mut LLVMOrcOpaqueThreadSafeModule;
alias LLVMOrcGenericIRModuleOperationFunction :: fn*(*mut void, LLVMModuleRef) -> LLVMErrorRef;
LLVMOrcOpaqueJITTargetMachineBuilder :: struct;
alias LLVMOrcJITTargetMachineBuilderRef :: *mut LLVMOrcOpaqueJITTargetMachineBuilder;
LLVMOrcOpaqueObjectLayer :: struct;
alias LLVMOrcObjectLayerRef :: *mut LLVMOrcOpaqueObjectLayer;
LLVMOrcOpaqueObjectLinkingLayer :: struct;
alias LLVMOrcObjectLinkingLayerRef :: *mut LLVMOrcOpaqueObjectLinkingLayer;
LLVMOrcOpaqueIRTransformLayer :: struct;
alias LLVMOrcIRTransformLayerRef :: *mut LLVMOrcOpaqueIRTransformLayer;
alias LLVMOrcIRTransformLayerTransformFunction :: fn*(*mut void, *mut LLVMOrcThreadSafeModuleRef, LLVMOrcMaterializationResponsibilityRef) -> LLVMErrorRef;
LLVMOrcOpaqueObjectTransformLayer :: struct;
alias LLVMOrcObjectTransformLayerRef :: *mut LLVMOrcOpaqueObjectTransformLayer;
alias LLVMOrcObjectTransformLayerTransformFunction :: fn*(*mut void, *mut LLVMMemoryBufferRef) -> LLVMErrorRef;
LLVMOrcOpaqueIndirectStubsManager :: struct;
alias LLVMOrcIndirectStubsManagerRef :: *mut LLVMOrcOpaqueIndirectStubsManager;
LLVMOrcOpaqueLazyCallThroughManager :: struct;
alias LLVMOrcLazyCallThroughManagerRef :: *mut LLVMOrcOpaqueLazyCallThroughManager;
LLVMOrcOpaqueDumpObjects :: struct;
alias LLVMOrcDumpObjectsRef :: *mut LLVMOrcOpaqueDumpObjects;
#foreign LLVMOrcExecutionSessionSetErrorReporter :: fn(ES: LLVMOrcExecutionSessionRef, ReportError: LLVMOrcErrorReporterFunction, Ctx: *mut void) -> void;
#foreign LLVMOrcExecutionSessionGetSymbolStringPool :: fn(ES: LLVMOrcExecutionSessionRef) -> LLVMOrcSymbolStringPoolRef;
#foreign LLVMOrcSymbolStringPoolClearDeadEntries :: fn(SSP: LLVMOrcSymbolStringPoolRef) -> void;
#foreign LLVMOrcExecutionSessionIntern :: fn(ES: LLVMOrcExecutionSessionRef, Name: *const u8) -> LLVMOrcSymbolStringPoolEntryRef;
alias LLVMOrcExecutionSessionLookupHandleResultFunction :: fn*(LLVMErrorRef, LLVMOrcCSymbolMapPairs, u64, *mut void) -> void;
#foreign LLVMOrcExecutionSessionLookup :: fn(ES: LLVMOrcExecutionSessionRef, K: LLVMOrcLookupKind, SearchOrder: LLVMOrcCJITDylibSearchOrder, SearchOrderSize: u64, Symbols: LLVMOrcCLookupSet, SymbolsSize: u64, HandleResult: LLVMOrcExecutionSessionLookupHandleResultFunction, Ctx: *mut void) -> void;
#foreign LLVMOrcRetainSymbolStringPoolEntry :: fn(S: LLVMOrcSymbolStringPoolEntryRef) -> void;
#foreign LLVMOrcReleaseSymbolStringPoolEntry :: fn(S: LLVMOrcSymbolStringPoolEntryRef) -> void;
#foreign LLVMOrcSymbolStringPoolEntryStr :: fn(S: LLVMOrcSymbolStringPoolEntryRef) -> *const u8;
#foreign LLVMOrcReleaseResourceTracker :: fn(RT: LLVMOrcResourceTrackerRef) -> void;
#foreign LLVMOrcResourceTrackerTransferTo :: fn(SrcRT: LLVMOrcResourceTrackerRef, DstRT: LLVMOrcResourceTrackerRef) -> void;
#foreign LLVMOrcResourceTrackerRemove :: fn(RT: LLVMOrcResourceTrackerRef) -> LLVMErrorRef;
#foreign LLVMOrcDisposeDefinitionGenerator :: fn(DG: LLVMOrcDefinitionGeneratorRef) -> void;
#foreign LLVMOrcDisposeMaterializationUnit :: fn(MU: LLVMOrcMaterializationUnitRef) -> void;
#foreign LLVMOrcCreateCustomMaterializationUnit :: fn(Name: *const u8, Ctx: *mut void, Syms: LLVMOrcCSymbolFlagsMapPairs, NumSyms: u64, InitSym: LLVMOrcSymbolStringPoolEntryRef, Materialize: LLVMOrcMaterializationUnitMaterializeFunction, Discard: LLVMOrcMaterializationUnitDiscardFunction, Destroy: LLVMOrcMaterializationUnitDestroyFunction) -> LLVMOrcMaterializationUnitRef;
#foreign LLVMOrcAbsoluteSymbols :: fn(Syms: LLVMOrcCSymbolMapPairs, NumPairs: u64) -> LLVMOrcMaterializationUnitRef;
#foreign LLVMOrcLazyReexports :: fn(LCTM: LLVMOrcLazyCallThroughManagerRef, ISM: LLVMOrcIndirectStubsManagerRef, SourceRef: LLVMOrcJITDylibRef, CallableAliases: LLVMOrcCSymbolAliasMapPairs, NumPairs: u64) -> LLVMOrcMaterializationUnitRef;
#foreign LLVMOrcDisposeMaterializationResponsibility :: fn(MR: LLVMOrcMaterializationResponsibilityRef) -> void;
#foreign LLVMOrcMaterializationResponsibilityGetTargetDylib :: fn(MR: LLVMOrcMaterializationResponsibilityRef) -> LLVMOrcJITDylibRef;
#foreign LLVMOrcMaterializationResponsibilityGetExecutionSession :: fn(MR: LLVMOrcMaterializationResponsibilityRef) -> LLVMOrcExecutionSessionRef;
#foreign LLVMOrcMaterializationResponsibilityGetSymbols :: fn(MR: LLVMOrcMaterializationResponsibilityRef, NumPairs: *mut u64) -> LLVMOrcCSymbolFlagsMapPairs;
#foreign LLVMOrcDisposeCSymbolFlagsMap :: fn(Pairs: LLVMOrcCSymbolFlagsMapPairs) -> void;
#foreign LLVMOrcMaterializationResponsibilityGetInitializerSymbol :: fn(MR: LLVMOrcMaterializationResponsibilityRef) -> LLVMOrcSymbolStringPoolEntryRef;
#foreign LLVMOrcMaterializationResponsibilityGetRequestedSymbols :: fn(MR: LLVMOrcMaterializationResponsibilityRef, NumSymbols: *mut u64) -> *mut LLVMOrcSymbolStringPoolEntryRef;
#foreign LLVMOrcDisposeSymbols :: fn(Symbols: *mut LLVMOrcSymbolStringPoolEntryRef) -> void;
#foreign LLVMOrcMaterializationResponsibilityNotifyResolved :: fn(MR: LLVMOrcMaterializationResponsibilityRef, Symbols: LLVMOrcCSymbolMapPairs, NumPairs: u64) -> LLVMErrorRef;
#foreign LLVMOrcMaterializationResponsibilityNotifyEmitted :: fn(MR: LLVMOrcMaterializationResponsibilityRef, SymbolDepGroups: *mut LLVMOrcCSymbolDependenceGroup, NumSymbolDepGroups: u64) -> LLVMErrorRef;
#foreign LLVMOrcMaterializationResponsibilityDefineMaterializing :: fn(MR: LLVMOrcMaterializationResponsibilityRef, Pairs: LLVMOrcCSymbolFlagsMapPairs, NumPairs: u64) -> LLVMErrorRef;
#foreign LLVMOrcMaterializationResponsibilityFailMaterialization :: fn(MR: LLVMOrcMaterializationResponsibilityRef) -> void;
#foreign LLVMOrcMaterializationResponsibilityReplace :: fn(MR: LLVMOrcMaterializationResponsibilityRef, MU: LLVMOrcMaterializationUnitRef) -> LLVMErrorRef;
#foreign LLVMOrcMaterializationResponsibilityDelegate :: fn(MR: LLVMOrcMaterializationResponsibilityRef, Symbols: *mut LLVMOrcSymbolStringPoolEntryRef, NumSymbols: u64, Result: *mut LLVMOrcMaterializationResponsibilityRef) -> LLVMErrorRef;
#foreign LLVMOrcExecutionSessionCreateBareJITDylib :: fn(ES: LLVMOrcExecutionSessionRef, Name: *const u8) -> LLVMOrcJITDylibRef;
#foreign LLVMOrcExecutionSessionCreateJITDylib :: fn(ES: LLVMOrcExecutionSessionRef, Result: *mut LLVMOrcJITDylibRef, Name: *const u8) -> LLVMErrorRef;
#foreign LLVMOrcExecutionSessionGetJITDylibByName :: fn(ES: LLVMOrcExecutionSessionRef, Name: *const u8) -> LLVMOrcJITDylibRef;
#foreign LLVMOrcJITDylibCreateResourceTracker :: fn(JD: LLVMOrcJITDylibRef) -> LLVMOrcResourceTrackerRef;
#foreign LLVMOrcJITDylibGetDefaultResourceTracker :: fn(JD: LLVMOrcJITDylibRef) -> LLVMOrcResourceTrackerRef;
#foreign LLVMOrcJITDylibDefine :: fn(JD: LLVMOrcJITDylibRef, MU: LLVMOrcMaterializationUnitRef) -> LLVMErrorRef;
#foreign LLVMOrcJITDylibClear :: fn(JD: LLVMOrcJITDylibRef) -> LLVMErrorRef;
#foreign LLVMOrcJITDylibAddGenerator :: fn(JD: LLVMOrcJITDylibRef, DG: LLVMOrcDefinitionGeneratorRef) -> void;
#foreign LLVMOrcCreateCustomCAPIDefinitionGenerator :: fn(F: LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction, Ctx: *mut void, Dispose: LLVMOrcDisposeCAPIDefinitionGeneratorFunction) -> LLVMOrcDefinitionGeneratorRef;
#foreign LLVMOrcLookupStateContinueLookup :: fn(S: LLVMOrcLookupStateRef, Err: LLVMErrorRef) -> void;
#foreign LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess :: fn(Result: *mut LLVMOrcDefinitionGeneratorRef, GlobalPrefx: u8, Filter: LLVMOrcSymbolPredicate, FilterCtx: *mut void) -> LLVMErrorRef;
#foreign LLVMOrcCreateDynamicLibrarySearchGeneratorForPath :: fn(Result: *mut LLVMOrcDefinitionGeneratorRef, FileName: *const u8, GlobalPrefix: u8, Filter: LLVMOrcSymbolPredicate, FilterCtx: *mut void) -> LLVMErrorRef;
#foreign LLVMOrcCreateStaticLibrarySearchGeneratorForPath :: fn(Result: *mut LLVMOrcDefinitionGeneratorRef, ObjLayer: LLVMOrcObjectLayerRef, FileName: *const u8, TargetTriple: *const u8) -> LLVMErrorRef;
#foreign LLVMOrcCreateNewThreadSafeContext :: fn() -> LLVMOrcThreadSafeContextRef;
#foreign LLVMOrcThreadSafeContextGetContext :: fn(TSCtx: LLVMOrcThreadSafeContextRef) -> LLVMContextRef;
#foreign LLVMOrcDisposeThreadSafeContext :: fn(TSCtx: LLVMOrcThreadSafeContextRef) -> void;
#foreign LLVMOrcCreateNewThreadSafeModule :: fn(M: LLVMModuleRef, TSCtx: LLVMOrcThreadSafeContextRef) -> LLVMOrcThreadSafeModuleRef;
#foreign LLVMOrcDisposeThreadSafeModule :: fn(TSM: LLVMOrcThreadSafeModuleRef) -> void;
#foreign LLVMOrcThreadSafeModuleWithModuleDo :: fn(TSM: LLVMOrcThreadSafeModuleRef, F: LLVMOrcGenericIRModuleOperationFunction, Ctx: *mut void) -> LLVMErrorRef;
#foreign LLVMOrcJITTargetMachineBuilderDetectHost :: fn(Result: *mut LLVMOrcJITTargetMachineBuilderRef) -> LLVMErrorRef;
#foreign LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine :: fn(TM: LLVMTargetMachineRef) -> LLVMOrcJITTargetMachineBuilderRef;
#foreign LLVMOrcDisposeJITTargetMachineBuilder :: fn(JTMB: LLVMOrcJITTargetMachineBuilderRef) -> void;
#foreign LLVMOrcJITTargetMachineBuilderGetTargetTriple :: fn(JTMB: LLVMOrcJITTargetMachineBuilderRef) -> *mut u8;
#foreign LLVMOrcJITTargetMachineBuilderSetTargetTriple :: fn(JTMB: LLVMOrcJITTargetMachineBuilderRef, TargetTriple: *const u8) -> void;
#foreign LLVMOrcObjectLayerAddObjectFile :: fn(ObjLayer: LLVMOrcObjectLayerRef, JD: LLVMOrcJITDylibRef, ObjBuffer: LLVMMemoryBufferRef) -> LLVMErrorRef;
#foreign LLVMOrcObjectLayerAddObjectFileWithRT :: fn(ObjLayer: LLVMOrcObjectLayerRef, RT: LLVMOrcResourceTrackerRef, ObjBuffer: LLVMMemoryBufferRef) -> LLVMErrorRef;
#foreign LLVMOrcObjectLayerEmit :: fn(ObjLayer: LLVMOrcObjectLayerRef, R: LLVMOrcMaterializationResponsibilityRef, ObjBuffer: LLVMMemoryBufferRef) -> void;
#foreign LLVMOrcDisposeObjectLayer :: fn(ObjLayer: LLVMOrcObjectLayerRef) -> void;
#foreign LLVMOrcIRTransformLayerEmit :: fn(IRTransformLayer: LLVMOrcIRTransformLayerRef, MR: LLVMOrcMaterializationResponsibilityRef, TSM: LLVMOrcThreadSafeModuleRef) -> void;
#foreign LLVMOrcIRTransformLayerSetTransform :: fn(IRTransformLayer: LLVMOrcIRTransformLayerRef, TransformFunction: LLVMOrcIRTransformLayerTransformFunction, Ctx: *mut void) -> void;
#foreign LLVMOrcObjectTransformLayerSetTransform :: fn(ObjTransformLayer: LLVMOrcObjectTransformLayerRef, TransformFunction: LLVMOrcObjectTransformLayerTransformFunction, Ctx: *mut void) -> void;
#foreign LLVMOrcCreateLocalIndirectStubsManager :: fn(TargetTriple: *const u8) -> LLVMOrcIndirectStubsManagerRef;
#foreign LLVMOrcDisposeIndirectStubsManager :: fn(ISM: LLVMOrcIndirectStubsManagerRef) -> void;
#foreign LLVMOrcCreateLocalLazyCallThroughManager :: fn(TargetTriple: *const u8, ES: LLVMOrcExecutionSessionRef, ErrorHandlerAddr: LLVMOrcJITTargetAddress, LCTM: *mut LLVMOrcLazyCallThroughManagerRef) -> LLVMErrorRef;
#foreign LLVMOrcDisposeLazyCallThroughManager :: fn(LCTM: LLVMOrcLazyCallThroughManagerRef) -> void;
#foreign LLVMOrcCreateDumpObjects :: fn(DumpDir: *const u8, IdentifierOverride: *const u8) -> LLVMOrcDumpObjectsRef;
#foreign LLVMOrcDisposeDumpObjects :: fn(DumpObjects: LLVMOrcDumpObjectsRef) -> void;
#foreign LLVMOrcDumpObjects_CallOperator :: fn(DumpObjects: LLVMOrcDumpObjectsRef, ObjBuffer: *mut LLVMMemoryBufferRef) -> LLVMErrorRef;
alias LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction :: fn*(*mut void, LLVMOrcExecutionSessionRef, *const u8) -> LLVMOrcObjectLayerRef;
LLVMOrcOpaqueLLJITBuilder :: struct;
alias LLVMOrcLLJITBuilderRef :: *mut LLVMOrcOpaqueLLJITBuilder;
LLVMOrcOpaqueLLJIT :: struct;
alias LLVMOrcLLJITRef :: *mut LLVMOrcOpaqueLLJIT;
#foreign LLVMOrcCreateLLJITBuilder :: fn() -> LLVMOrcLLJITBuilderRef;
#foreign LLVMOrcDisposeLLJITBuilder :: fn(Builder: LLVMOrcLLJITBuilderRef) -> void;
#foreign LLVMOrcLLJITBuilderSetJITTargetMachineBuilder :: fn(Builder: LLVMOrcLLJITBuilderRef, JTMB: LLVMOrcJITTargetMachineBuilderRef) -> void;
#foreign LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator :: fn(Builder: LLVMOrcLLJITBuilderRef, F: LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction, Ctx: *mut void) -> void;
#foreign LLVMOrcCreateLLJIT :: fn(Result: *mut LLVMOrcLLJITRef, Builder: LLVMOrcLLJITBuilderRef) -> LLVMErrorRef;
#foreign LLVMOrcDisposeLLJIT :: fn(J: LLVMOrcLLJITRef) -> LLVMErrorRef;
#foreign LLVMOrcLLJITGetExecutionSession :: fn(J: LLVMOrcLLJITRef) -> LLVMOrcExecutionSessionRef;
#foreign LLVMOrcLLJITGetMainJITDylib :: fn(J: LLVMOrcLLJITRef) -> LLVMOrcJITDylibRef;
#foreign LLVMOrcLLJITGetTripleString :: fn(J: LLVMOrcLLJITRef) -> *const u8;
#foreign LLVMOrcLLJITGetGlobalPrefix :: fn(J: LLVMOrcLLJITRef) -> u8;
#foreign LLVMOrcLLJITMangleAndIntern :: fn(J: LLVMOrcLLJITRef, UnmangledName: *const u8) -> LLVMOrcSymbolStringPoolEntryRef;
#foreign LLVMOrcLLJITAddObjectFile :: fn(J: LLVMOrcLLJITRef, JD: LLVMOrcJITDylibRef, ObjBuffer: LLVMMemoryBufferRef) -> LLVMErrorRef;
#foreign LLVMOrcLLJITAddObjectFileWithRT :: fn(J: LLVMOrcLLJITRef, RT: LLVMOrcResourceTrackerRef, ObjBuffer: LLVMMemoryBufferRef) -> LLVMErrorRef;
#foreign LLVMOrcLLJITAddLLVMIRModule :: fn(J: LLVMOrcLLJITRef, JD: LLVMOrcJITDylibRef, TSM: LLVMOrcThreadSafeModuleRef) -> LLVMErrorRef;
#foreign LLVMOrcLLJITAddLLVMIRModuleWithRT :: fn(J: LLVMOrcLLJITRef, JD: LLVMOrcResourceTrackerRef, TSM: LLVMOrcThreadSafeModuleRef) -> LLVMErrorRef;
#foreign LLVMOrcLLJITLookup :: fn(J: LLVMOrcLLJITRef, Result: *mut LLVMOrcExecutorAddress, Name: *const u8) -> LLVMErrorRef;
#foreign LLVMOrcLLJITGetObjLinkingLayer :: fn(J: LLVMOrcLLJITRef) -> LLVMOrcObjectLayerRef;
#foreign LLVMOrcLLJITGetObjTransformLayer :: fn(J: LLVMOrcLLJITRef) -> LLVMOrcObjectTransformLayerRef;
#foreign LLVMOrcLLJITGetIRTransformLayer :: fn(J: LLVMOrcLLJITRef) -> LLVMOrcIRTransformLayerRef;
#foreign LLVMOrcLLJITGetDataLayoutStr :: fn(J: LLVMOrcLLJITRef) -> *const u8;
#foreign LLVMOrcLLJITEnableDebugSupport :: fn(J: LLVMOrcLLJITRef) -> LLVMErrorRef;

LLVMOpaqueSectionIterator :: struct;
alias LLVMSectionIteratorRef :: *mut LLVMOpaqueSectionIterator;
LLVMOpaqueSymbolIterator :: struct;
alias LLVMSymbolIteratorRef :: *mut LLVMOpaqueSymbolIterator;
LLVMOpaqueRelocationIterator :: struct;
alias LLVMRelocationIteratorRef :: *mut LLVMOpaqueRelocationIterator;
LLVMBinaryType :: enum {
  LLVMBinaryTypeArchive = 0,
  LLVMBinaryTypeMachOUniversalBinary = 1,
  LLVMBinaryTypeCOFFImportFile = 2,
  LLVMBinaryTypeIR = 3,
  LLVMBinaryTypeWinRes = 4,
  LLVMBinaryTypeCOFF = 5,
  LLVMBinaryTypeELF32L = 6,
  LLVMBinaryTypeELF32B = 7,
  LLVMBinaryTypeELF64L = 8,
  LLVMBinaryTypeELF64B = 9,
  LLVMBinaryTypeMachO32L = 10,
  LLVMBinaryTypeMachO32B = 11,
  LLVMBinaryTypeMachO64L = 12,
  LLVMBinaryTypeMachO64B = 13,
  LLVMBinaryTypeWasm = 14,
  LLVMBinaryTypeOffload = 15,
};
#foreign LLVMCreateBinary :: fn(MemBuf: LLVMMemoryBufferRef, Context: LLVMContextRef, ErrorMessage: *mut *mut u8) -> LLVMBinaryRef;
#foreign LLVMDisposeBinary :: fn(BR: LLVMBinaryRef) -> void;
#foreign LLVMBinaryCopyMemoryBuffer :: fn(BR: LLVMBinaryRef) -> LLVMMemoryBufferRef;
#foreign LLVMBinaryGetType :: fn(BR: LLVMBinaryRef) -> LLVMBinaryType;
#foreign LLVMMachOUniversalBinaryCopyObjectForArch :: fn(BR: LLVMBinaryRef, Arch: *const u8, ArchLen: u64, ErrorMessage: *mut *mut u8) -> LLVMBinaryRef;
#foreign LLVMObjectFileCopySectionIterator :: fn(BR: LLVMBinaryRef) -> LLVMSectionIteratorRef;
#foreign LLVMObjectFileIsSectionIteratorAtEnd :: fn(BR: LLVMBinaryRef, SI: LLVMSectionIteratorRef) -> LLVMBool;
#foreign LLVMObjectFileCopySymbolIterator :: fn(BR: LLVMBinaryRef) -> LLVMSymbolIteratorRef;
#foreign LLVMObjectFileIsSymbolIteratorAtEnd :: fn(BR: LLVMBinaryRef, SI: LLVMSymbolIteratorRef) -> LLVMBool;
#foreign LLVMDisposeSectionIterator :: fn(SI: LLVMSectionIteratorRef) -> void;
#foreign LLVMMoveToNextSection :: fn(SI: LLVMSectionIteratorRef) -> void;
#foreign LLVMMoveToContainingSection :: fn(Sect: LLVMSectionIteratorRef, Sym: LLVMSymbolIteratorRef) -> void;
#foreign LLVMDisposeSymbolIterator :: fn(SI: LLVMSymbolIteratorRef) -> void;
#foreign LLVMMoveToNextSymbol :: fn(SI: LLVMSymbolIteratorRef) -> void;
#foreign LLVMGetSectionName :: fn(SI: LLVMSectionIteratorRef) -> *const u8;
#foreign LLVMGetSectionSize :: fn(SI: LLVMSectionIteratorRef) -> u64;
#foreign LLVMGetSectionContents :: fn(SI: LLVMSectionIteratorRef) -> *const u8;
#foreign LLVMGetSectionAddress :: fn(SI: LLVMSectionIteratorRef) -> u64;
#foreign LLVMGetSectionContainsSymbol :: fn(SI: LLVMSectionIteratorRef, Sym: LLVMSymbolIteratorRef) -> LLVMBool;
#foreign LLVMGetRelocations :: fn(Section: LLVMSectionIteratorRef) -> LLVMRelocationIteratorRef;
#foreign LLVMDisposeRelocationIterator :: fn(RI: LLVMRelocationIteratorRef) -> void;
#foreign LLVMIsRelocationIteratorAtEnd :: fn(Section: LLVMSectionIteratorRef, RI: LLVMRelocationIteratorRef) -> LLVMBool;
#foreign LLVMMoveToNextRelocation :: fn(RI: LLVMRelocationIteratorRef) -> void;
#foreign LLVMGetSymbolName :: fn(SI: LLVMSymbolIteratorRef) -> *const u8;
#foreign LLVMGetSymbolAddress :: fn(SI: LLVMSymbolIteratorRef) -> u64;
#foreign LLVMGetSymbolSize :: fn(SI: LLVMSymbolIteratorRef) -> u64;
#foreign LLVMGetRelocationOffset :: fn(RI: LLVMRelocationIteratorRef) -> u64;
#foreign LLVMGetRelocationSymbol :: fn(RI: LLVMRelocationIteratorRef) -> LLVMSymbolIteratorRef;
#foreign LLVMGetRelocationType :: fn(RI: LLVMRelocationIteratorRef) -> u64;
#foreign LLVMGetRelocationTypeName :: fn(RI: LLVMRelocationIteratorRef) -> *const u8;
#foreign LLVMGetRelocationValueString :: fn(RI: LLVMRelocationIteratorRef) -> *const u8;
LLVMOpaqueObjectFile :: struct;
alias LLVMObjectFileRef :: *mut LLVMOpaqueObjectFile;
#foreign LLVMCreateObjectFile :: fn(MemBuf: LLVMMemoryBufferRef) -> LLVMObjectFileRef;
#foreign LLVMDisposeObjectFile :: fn(ObjectFile: LLVMObjectFileRef) -> void;
#foreign LLVMGetSections :: fn(ObjectFile: LLVMObjectFileRef) -> LLVMSectionIteratorRef;
#foreign LLVMIsSectionIteratorAtEnd :: fn(ObjectFile: LLVMObjectFileRef, SI: LLVMSectionIteratorRef) -> LLVMBool;
#foreign LLVMGetSymbols :: fn(ObjectFile: LLVMObjectFileRef) -> LLVMSymbolIteratorRef;
#foreign LLVMIsSymbolIteratorAtEnd :: fn(ObjectFile: LLVMObjectFileRef, SI: LLVMSymbolIteratorRef) -> LLVMBool;
alias LLVMMemoryManagerCreateContextCallback :: fn*(*mut void) -> *mut void;
alias LLVMMemoryManagerNotifyTerminatingCallback :: fn*(*mut void) -> void;
#foreign LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager :: fn(ES: LLVMOrcExecutionSessionRef) -> LLVMOrcObjectLayerRef;
#foreign LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks :: fn(ES: LLVMOrcExecutionSessionRef, CreateContextCtx: *mut void, CreateContext: LLVMMemoryManagerCreateContextCallback, NotifyTerminating: LLVMMemoryManagerNotifyTerminatingCallback, AllocateCodeSection: LLVMMemoryManagerAllocateCodeSectionCallback, AllocateDataSection: LLVMMemoryManagerAllocateDataSectionCallback, FinalizeMemory: LLVMMemoryManagerFinalizeMemoryCallback, Destroy: LLVMMemoryManagerDestroyCallback) -> LLVMOrcObjectLayerRef;
#foreign LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener :: fn(RTDyldObjLinkingLayer: LLVMOrcObjectLayerRef, Listener: LLVMJITEventListenerRef) -> void;
LLVMRemarkType :: enum {
  LLVMRemarkTypeUnknown = 0,
  LLVMRemarkTypePassed = 1,
  LLVMRemarkTypeMissed = 2,
  LLVMRemarkTypeAnalysis = 3,
  LLVMRemarkTypeAnalysisFPCommute = 4,
  LLVMRemarkTypeAnalysisAliasing = 5,
  LLVMRemarkTypeFailure = 6,
};
LLVMRemarkOpaqueString :: struct;
alias LLVMRemarkStringRef :: *mut LLVMRemarkOpaqueString;
#foreign LLVMRemarkStringGetData :: fn(String: LLVMRemarkStringRef) -> *const u8;
#foreign LLVMRemarkStringGetLen :: fn(String: LLVMRemarkStringRef) -> u32;
LLVMRemarkOpaqueDebugLoc :: struct;
alias LLVMRemarkDebugLocRef :: *mut LLVMRemarkOpaqueDebugLoc;
#foreign LLVMRemarkDebugLocGetSourceFilePath :: fn(DL: LLVMRemarkDebugLocRef) -> LLVMRemarkStringRef;
#foreign LLVMRemarkDebugLocGetSourceLine :: fn(DL: LLVMRemarkDebugLocRef) -> u32;
#foreign LLVMRemarkDebugLocGetSourceColumn :: fn(DL: LLVMRemarkDebugLocRef) -> u32;
LLVMRemarkOpaqueArg :: struct;
alias LLVMRemarkArgRef :: *mut LLVMRemarkOpaqueArg;
#foreign LLVMRemarkArgGetKey :: fn(Arg: LLVMRemarkArgRef) -> LLVMRemarkStringRef;
#foreign LLVMRemarkArgGetValue :: fn(Arg: LLVMRemarkArgRef) -> LLVMRemarkStringRef;
#foreign LLVMRemarkArgGetDebugLoc :: fn(Arg: LLVMRemarkArgRef) -> LLVMRemarkDebugLocRef;
LLVMRemarkOpaqueEntry :: struct;
alias LLVMRemarkEntryRef :: *mut LLVMRemarkOpaqueEntry;
#foreign LLVMRemarkEntryDispose :: fn(Remark: LLVMRemarkEntryRef) -> void;
#foreign LLVMRemarkEntryGetType :: fn(Remark: LLVMRemarkEntryRef) -> LLVMRemarkType;
#foreign LLVMRemarkEntryGetPassName :: fn(Remark: LLVMRemarkEntryRef) -> LLVMRemarkStringRef;
#foreign LLVMRemarkEntryGetRemarkName :: fn(Remark: LLVMRemarkEntryRef) -> LLVMRemarkStringRef;
#foreign LLVMRemarkEntryGetFunctionName :: fn(Remark: LLVMRemarkEntryRef) -> LLVMRemarkStringRef;
#foreign LLVMRemarkEntryGetDebugLoc :: fn(Remark: LLVMRemarkEntryRef) -> LLVMRemarkDebugLocRef;
#foreign LLVMRemarkEntryGetHotness :: fn(Remark: LLVMRemarkEntryRef) -> u64;
#foreign LLVMRemarkEntryGetNumArgs :: fn(Remark: LLVMRemarkEntryRef) -> u32;
#foreign LLVMRemarkEntryGetFirstArg :: fn(Remark: LLVMRemarkEntryRef) -> LLVMRemarkArgRef;
#foreign LLVMRemarkEntryGetNextArg :: fn(It: LLVMRemarkArgRef, Remark: LLVMRemarkEntryRef) -> LLVMRemarkArgRef;
LLVMRemarkOpaqueParser :: struct;
alias LLVMRemarkParserRef :: *mut LLVMRemarkOpaqueParser;
#foreign LLVMRemarkParserCreateYAML :: fn(Buf: *const void, Size: u64) -> LLVMRemarkParserRef;
#foreign LLVMRemarkParserCreateBitstream :: fn(Buf: *const void, Size: u64) -> LLVMRemarkParserRef;
#foreign LLVMRemarkParserGetNext :: fn(Parser: LLVMRemarkParserRef) -> LLVMRemarkEntryRef;
#foreign LLVMRemarkParserHasError :: fn(Parser: LLVMRemarkParserRef) -> LLVMBool;
#foreign LLVMRemarkParserGetErrorMessage :: fn(Parser: LLVMRemarkParserRef) -> *const u8;
#foreign LLVMRemarkParserDispose :: fn(Parser: LLVMRemarkParserRef) -> void;
#foreign LLVMRemarkVersion :: fn() -> u32;
#foreign LLVMLoadLibraryPermanently :: fn(Filename: *const u8) -> LLVMBool;
#foreign LLVMParseCommandLineOptions :: fn(argc: s32, argv: *const *const u8, Overview: *const u8) -> void;
#foreign LLVMSearchForAddressOfSymbol :: fn(symbolName: *const u8) -> *mut void;
#foreign LLVMAddSymbol :: fn(symbolName: *const u8, symbolValue: *mut void) -> void;

LLVMOpaquePassBuilderOptions :: struct;

alias LLVMPassBuilderOptionsRef :: *mut LLVMOpaquePassBuilderOptions;
#foreign LLVMRunPasses :: fn(M: LLVMModuleRef, Passes: *const u8, TM: LLVMTargetMachineRef, Options: LLVMPassBuilderOptionsRef) -> LLVMErrorRef;
#foreign LLVMCreatePassBuilderOptions :: fn() -> LLVMPassBuilderOptionsRef;
#foreign LLVMPassBuilderOptionsSetVerifyEach :: fn(Options: LLVMPassBuilderOptionsRef, VerifyEach: LLVMBool) -> void;
#foreign LLVMPassBuilderOptionsSetDebugLogging :: fn(Options: LLVMPassBuilderOptionsRef, DebugLogging: LLVMBool) -> void;
#foreign LLVMPassBuilderOptionsSetLoopInterleaving :: fn(Options: LLVMPassBuilderOptionsRef, LoopInterleaving: LLVMBool) -> void;
#foreign LLVMPassBuilderOptionsSetLoopVectorization :: fn(Options: LLVMPassBuilderOptionsRef, LoopVectorization: LLVMBool) -> void;
#foreign LLVMPassBuilderOptionsSetSLPVectorization :: fn(Options: LLVMPassBuilderOptionsRef, SLPVectorization: LLVMBool) -> void;
#foreign LLVMPassBuilderOptionsSetLoopUnrolling :: fn(Options: LLVMPassBuilderOptionsRef, LoopUnrolling: LLVMBool) -> void;
#foreign LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll :: fn(Options: LLVMPassBuilderOptionsRef, ForgetAllSCEVInLoopUnroll: LLVMBool) -> void;
#foreign LLVMPassBuilderOptionsSetLicmMssaOptCap :: fn(Options: LLVMPassBuilderOptionsRef, LicmMssaOptCap: u32) -> void;
#foreign LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap :: fn(Options: LLVMPassBuilderOptionsRef, LicmMssaNoAccForPromotionCap: u32) -> void;
#foreign LLVMPassBuilderOptionsSetCallGraphProfile :: fn(Options: LLVMPassBuilderOptionsRef, CallGraphProfile: LLVMBool) -> void;
#foreign LLVMPassBuilderOptionsSetMergeFunctions :: fn(Options: LLVMPassBuilderOptionsRef, MergeFunctions: LLVMBool) -> void;
#foreign LLVMPassBuilderOptionsSetInlinerThreshold :: fn(Options: LLVMPassBuilderOptionsRef, Threshold: s32) -> void;
#foreign LLVMDisposePassBuilderOptions :: fn(Options: LLVMPassBuilderOptionsRef) -> void;


main :: fn() {

}