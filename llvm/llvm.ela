
#c_flags " $(llvm-config --cflags --ldflags --libs) "

/*
  These bindings were auto generated by 'ela-bindings-generator', from 'llvm.c' at 2025-04-01 16:10:48. 
*/

type bool :: s32;
struct LLVMOpaqueMemoryBuffer;
type LLVMMemoryBufferRef :: *mut LLVMOpaqueMemoryBuffer;
struct LLVMOpaqueContext;
type LLVMContextRef :: *mut LLVMOpaqueContext;
struct LLVMOpaqueModule;
type LLVMModuleRef :: *mut LLVMOpaqueModule;
struct LLVMOpaqueType;
type LLVMTypeRef :: *mut LLVMOpaqueType;
struct LLVMOpaqueValue;
type LLVMValueRef :: *mut LLVMOpaqueValue;
struct LLVMOpaqueBasicBlock;
type LLVMBasicBlockRef :: *mut LLVMOpaqueBasicBlock;
struct LLVMOpaqueMetadata;
type LLVMMetadataRef :: *mut LLVMOpaqueMetadata;
struct LLVMOpaqueNamedMDNode;
type LLVMNamedMDNodeRef :: *mut LLVMOpaqueNamedMDNode;
struct LLVMOpaqueValueMetadataEntry;
type LLVMValueMetadataEntry :: LLVMOpaqueValueMetadataEntry;
struct LLVMOpaqueBuilder;
type LLVMBuilderRef :: *mut LLVMOpaqueBuilder;
struct LLVMOpaqueDIBuilder;
type LLVMDIBuilderRef :: *mut LLVMOpaqueDIBuilder;
struct LLVMOpaqueModuleProvider;
type LLVMModuleProviderRef :: *mut LLVMOpaqueModuleProvider;
struct LLVMOpaquePassManager;
type LLVMPassManagerRef :: *mut LLVMOpaquePassManager;
struct LLVMOpaqueUse;
type LLVMUseRef :: *mut LLVMOpaqueUse;
struct LLVMOpaqueOperandBundle;
type LLVMOperandBundleRef :: *mut LLVMOpaqueOperandBundle;
struct LLVMOpaqueAttributeRef;
type LLVMAttributeRef :: *mut LLVMOpaqueAttributeRef;
struct LLVMOpaqueDiagnosticInfo;
type LLVMDiagnosticInfoRef :: *mut LLVMOpaqueDiagnosticInfo;
struct LLVMComdat;
type LLVMComdatRef :: *mut LLVMComdat;
struct LLVMOpaqueModuleFlagEntry;
type LLVMModuleFlagEntry :: LLVMOpaqueModuleFlagEntry;
struct LLVMOpaqueJITEventListener;
type LLVMJITEventListenerRef :: *mut LLVMOpaqueJITEventListener;
struct LLVMOpaqueBinary;
type LLVMBinaryRef :: *mut LLVMOpaqueBinary;
struct LLVMOpaqueDbgRecord;
type LLVMDbgRecordRef :: *mut LLVMOpaqueDbgRecord;
enum LLVMVerifierFailureAction {
  LLVMAbortProcessAction = 0,
  LLVMPrintMessageAction = 1,
  LLVMReturnStatusAction = 2,
};
extern fn LLVMVerifyModule(M: LLVMModuleRef, Action: LLVMVerifierFailureAction, OutMessage: *mut *mut u8) -> bool;
extern fn LLVMVerifyFunction(Fn: LLVMValueRef, Action: LLVMVerifierFailureAction) -> bool;
extern fn LLVMViewFunctionCFG(Fn: LLVMValueRef) -> void;
extern fn LLVMViewFunctionCFGOnly(Fn: LLVMValueRef) -> void;
extern fn LLVMParseBitcode(MemBuf: LLVMMemoryBufferRef, OutModule: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> bool;
extern fn LLVMParseBitcode2(MemBuf: LLVMMemoryBufferRef, OutModule: *mut LLVMModuleRef) -> bool;
extern fn LLVMParseBitcodeInContext(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutModule: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> bool;
extern fn LLVMParseBitcodeInContext2(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutModule: *mut LLVMModuleRef) -> bool;
extern fn LLVMGetBitcodeModuleInContext(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> bool;
extern fn LLVMGetBitcodeModuleInContext2(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef) -> bool;
extern fn LLVMGetBitcodeModule(MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> bool;
extern fn LLVMGetBitcodeModule2(MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef) -> bool;
extern fn LLVMWriteBitcodeToFile(M: LLVMModuleRef, Path: *const u8) -> s32;
extern fn LLVMWriteBitcodeToFD(M: LLVMModuleRef, FD: s32, ShouldClose: s32, Unbuffered: s32) -> s32;
extern fn LLVMWriteBitcodeToFileHandle(M: LLVMModuleRef, Handle: s32) -> s32;
extern fn LLVMWriteBitcodeToMemoryBuffer(M: LLVMModuleRef) -> LLVMMemoryBufferRef;
enum LLVMComdatSelectionKind {
  LLVMAnyComdatSelectionKind = 0,
  LLVMExactMatchComdatSelectionKind = 1,
  LLVMLargestComdatSelectionKind = 2,
  LLVMNoDeduplicateComdatSelectionKind = 3,
  LLVMSameSizeComdatSelectionKind = 4,
};
extern fn LLVMGetOrInsertComdat(M: LLVMModuleRef, Name: *const u8) -> LLVMComdatRef;
extern fn LLVMGetComdat(V: LLVMValueRef) -> LLVMComdatRef;
extern fn LLVMSetComdat(V: LLVMValueRef, C: LLVMComdatRef) -> void;
extern fn LLVMGetComdatSelectionKind(C: LLVMComdatRef) -> LLVMComdatSelectionKind;
extern fn LLVMSetComdatSelectionKind(C: LLVMComdatRef, Kind: LLVMComdatSelectionKind) -> void;
type LLVMFatalErrorHandler :: fn(*const u8) -> void;
extern fn LLVMInstallFatalErrorHandler(Handler: LLVMFatalErrorHandler) -> void;
extern fn LLVMResetFatalErrorHandler() -> void;
extern fn LLVMEnablePrettyStackTrace() -> void;
enum LLVMOpcode {
  LLVMRet = 1,
  LLVMBr = 2,
  LLVMSwitch = 3,
  LLVMIndirectBr = 4,
  LLVMInvoke = 5,
  LLVMUnreachable = 7,
  LLVMCallBr = 67,
  LLVMFNeg = 66,
  LLVMAdd = 8,
  LLVMFAdd = 9,
  LLVMSub = 10,
  LLVMFSub = 11,
  LLVMMul = 12,
  LLVMFMul = 13,
  LLVMUDiv = 14,
  LLVMSDiv = 15,
  LLVMFDiv = 16,
  LLVMURem = 17,
  LLVMSRem = 18,
  LLVMFRem = 19,
  LLVMShl = 20,
  LLVMLShr = 21,
  LLVMAShr = 22,
  LLVMAnd = 23,
  LLVMOr = 24,
  LLVMXor = 25,
  LLVMAlloca = 26,
  LLVMLoad = 27,
  LLVMStore = 28,
  LLVMGetElementPtr = 29,
  LLVMTrunc = 30,
  LLVMZExt = 31,
  LLVMSExt = 32,
  LLVMFPToUI = 33,
  LLVMFPToSI = 34,
  LLVMUIToFP = 35,
  LLVMSIToFP = 36,
  LLVMFPTrunc = 37,
  LLVMFPExt = 38,
  LLVMPtrToInt = 39,
  LLVMIntToPtr = 40,
  LLVMBitCast = 41,
  LLVMAddrSpaceCast = 60,
  LLVMICmp = 42,
  LLVMFCmp = 43,
  LLVMPHI = 44,
  LLVMCall = 45,
  LLVMSelect = 46,
  LLVMUserOp1 = 47,
  LLVMUserOp2 = 48,
  LLVMVAArg = 49,
  LLVMExtractElement = 50,
  LLVMInsertElement = 51,
  LLVMShuffleVector = 52,
  LLVMExtractValue = 53,
  LLVMInsertValue = 54,
  LLVMFreeze = 68,
  LLVMFence = 55,
  LLVMAtomicCmpXchg = 56,
  LLVMAtomicRMW = 57,
  LLVMResume = 58,
  LLVMLandingPad = 59,
  LLVMCleanupRet = 61,
  LLVMCatchRet = 62,
  LLVMCatchPad = 63,
  LLVMCleanupPad = 64,
  LLVMCatchSwitch = 65,
};
enum LLVMTypeKind {
  LLVMVoidTypeKind = 0,
  LLVMHalfTypeKind = 1,
  LLVMFloatTypeKind = 2,
  LLVMDoubleTypeKind = 3,
  LLVMX86_FP80TypeKind = 4,
  LLVMFP128TypeKind = 5,
  LLVMPPC_FP128TypeKind = 6,
  LLVMLabelTypeKind = 7,
  LLVMIntegerTypeKind = 8,
  LLVMFunctionTypeKind = 9,
  LLVMStructTypeKind = 10,
  LLVMArrayTypeKind = 11,
  LLVMPointerTypeKind = 12,
  LLVMVectorTypeKind = 13,
  LLVMMetadataTypeKind = 14,
  LLVMX86_MMXTypeKind = 15,
  LLVMTokenTypeKind = 16,
  LLVMScalableVectorTypeKind = 17,
  LLVMBFloatTypeKind = 18,
  LLVMX86_AMXTypeKind = 19,
  LLVMTargetExtTypeKind = 20,
};
enum LLVMLinkage {
  LLVMExternalLinkage = 0,
  LLVMAvailableExternallyLinkage = 1,
  LLVMLinkOnceAnyLinkage = 2,
  LLVMLinkOnceODRLinkage = 3,
  LLVMLinkOnceODRAutoHideLinkage = 4,
  LLVMWeakAnyLinkage = 5,
  LLVMWeakODRLinkage = 6,
  LLVMAppendingLinkage = 7,
  LLVMInternalLinkage = 8,
  LLVMPrivateLinkage = 9,
  LLVMDLLImportLinkage = 10,
  LLVMDLLExportLinkage = 11,
  LLVMExternalWeakLinkage = 12,
  LLVMGhostLinkage = 13,
  LLVMCommonLinkage = 14,
  LLVMLinkerPrivateLinkage = 15,
  LLVMLinkerPrivateWeakLinkage = 16,
};
enum LLVMVisibility {
  LLVMDefaultVisibility = 0,
  LLVMHiddenVisibility = 1,
  LLVMProtectedVisibility = 2,
};
enum LLVMUnnamedAddr {
  LLVMNoUnnamedAddr = 0,
  LLVMLocalUnnamedAddr = 1,
  LLVMGlobalUnnamedAddr = 2,
};
enum LLVMDLLStorageClass {
  LLVMDefaultStorageClass = 0,
  LLVMDLLImportStorageClass = 1,
  LLVMDLLExportStorageClass = 2,
};
enum LLVMCallConv {
  LLVMCCallConv = 0,
  LLVMFastCallConv = 8,
  LLVMColdCallConv = 9,
  LLVMGHCCallConv = 10,
  LLVMHiPECallConv = 11,
  LLVMAnyRegCallConv = 13,
  LLVMPreserveMostCallConv = 14,
  LLVMPreserveAllCallConv = 15,
  LLVMSwiftCallConv = 16,
  LLVMCXXFASTTLSCallConv = 17,
  LLVMX86StdcallCallConv = 64,
  LLVMX86FastcallCallConv = 65,
  LLVMARMAPCSCallConv = 66,
  LLVMARMAAPCSCallConv = 67,
  LLVMARMAAPCSVFPCallConv = 68,
  LLVMMSP430INTRCallConv = 69,
  LLVMX86ThisCallCallConv = 70,
  LLVMPTXKernelCallConv = 71,
  LLVMPTXDeviceCallConv = 72,
  LLVMSPIRFUNCCallConv = 75,
  LLVMSPIRKERNELCallConv = 76,
  LLVMIntelOCLBICallConv = 77,
  LLVMX8664SysVCallConv = 78,
  LLVMWin64CallConv = 79,
  LLVMX86VectorCallCallConv = 80,
  LLVMHHVMCallConv = 81,
  LLVMHHVMCCallConv = 82,
  LLVMX86INTRCallConv = 83,
  LLVMAVRINTRCallConv = 84,
  LLVMAVRSIGNALCallConv = 85,
  LLVMAVRBUILTINCallConv = 86,
  LLVMAMDGPUVSCallConv = 87,
  LLVMAMDGPUGSCallConv = 88,
  LLVMAMDGPUPSCallConv = 89,
  LLVMAMDGPUCSCallConv = 90,
  LLVMAMDGPUKERNELCallConv = 91,
  LLVMX86RegCallCallConv = 92,
  LLVMAMDGPUHSCallConv = 93,
  LLVMMSP430BUILTINCallConv = 94,
  LLVMAMDGPULSCallConv = 95,
  LLVMAMDGPUESCallConv = 96,
};
enum LLVMValueKind {
  LLVMArgumentValueKind = 0,
  LLVMBasicBlockValueKind = 1,
  LLVMMemoryUseValueKind = 2,
  LLVMMemoryDefValueKind = 3,
  LLVMMemoryPhiValueKind = 4,
  LLVMFunctionValueKind = 5,
  LLVMGlobalAliasValueKind = 6,
  LLVMGlobalIFuncValueKind = 7,
  LLVMGlobalVariableValueKind = 8,
  LLVMBlockAddressValueKind = 9,
  LLVMConstantExprValueKind = 10,
  LLVMConstantArrayValueKind = 11,
  LLVMConstantStructValueKind = 12,
  LLVMConstantVectorValueKind = 13,
  LLVMUndefValueValueKind = 14,
  LLVMConstantAggregateZeroValueKind = 15,
  LLVMConstantDataArrayValueKind = 16,
  LLVMConstantDataVectorValueKind = 17,
  LLVMConstantIntValueKind = 18,
  LLVMConstantFPValueKind = 19,
  LLVMConstantPointerNullValueKind = 20,
  LLVMConstantTokenNoneValueKind = 21,
  LLVMMetadataAsValueValueKind = 22,
  LLVMInlineAsmValueKind = 23,
  LLVMInstructionValueKind = 24,
  LLVMPoisonValueValueKind = 25,
  LLVMConstantTargetNoneValueKind = 26,
  LLVMConstantPtrAuthValueKind = 27,
};
enum LLVMIntPredicate {
  LLVMIntEQ = 32,
  LLVMIntNE = 33,
  LLVMIntUGT = 34,
  LLVMIntUGE = 35,
  LLVMIntULT = 36,
  LLVMIntULE = 37,
  LLVMIntSGT = 38,
  LLVMIntSGE = 39,
  LLVMIntSLT = 40,
  LLVMIntSLE = 41,
};
enum LLVMRealPredicate {
  LLVMRealPredicateFalse = 0,
  LLVMRealOEQ = 1,
  LLVMRealOGT = 2,
  LLVMRealOGE = 3,
  LLVMRealOLT = 4,
  LLVMRealOLE = 5,
  LLVMRealONE = 6,
  LLVMRealORD = 7,
  LLVMRealUNO = 8,
  LLVMRealUEQ = 9,
  LLVMRealUGT = 10,
  LLVMRealUGE = 11,
  LLVMRealULT = 12,
  LLVMRealULE = 13,
  LLVMRealUNE = 14,
  LLVMRealPredicateTrue = 15,
};
enum LLVMLandingPadClauseTy {
  LLVMLandingPadCatch = 0,
  LLVMLandingPadFilter = 1,
};
enum LLVMThreadLocalMode {
  LLVMNotThreadLocal = 0,
  LLVMGeneralDynamicTLSModel = 1,
  LLVMLocalDynamicTLSModel = 2,
  LLVMInitialExecTLSModel = 3,
  LLVMLocalExecTLSModel = 4,
};
enum LLVMAtomicOrdering {
  LLVMAtomicOrderingNotAtomic = 0,
  LLVMAtomicOrderingUnordered = 1,
  LLVMAtomicOrderingMonotonic = 2,
  LLVMAtomicOrderingAcquire = 4,
  LLVMAtomicOrderingRelease = 5,
  LLVMAtomicOrderingAcquireRelease = 6,
  LLVMAtomicOrderingSequentiallyConsistent = 7,
};
enum LLVMAtomicRMWBinOp {
  LLVMAtomicRMWBinOpXchg = 0,
  LLVMAtomicRMWBinOpAdd = 1,
  LLVMAtomicRMWBinOpSub = 2,
  LLVMAtomicRMWBinOpAnd = 3,
  LLVMAtomicRMWBinOpNand = 4,
  LLVMAtomicRMWBinOpOr = 5,
  LLVMAtomicRMWBinOpXor = 6,
  LLVMAtomicRMWBinOpMax = 7,
  LLVMAtomicRMWBinOpMin = 8,
  LLVMAtomicRMWBinOpUMax = 9,
  LLVMAtomicRMWBinOpUMin = 10,
  LLVMAtomicRMWBinOpFAdd = 11,
  LLVMAtomicRMWBinOpFSub = 12,
  LLVMAtomicRMWBinOpFMax = 13,
  LLVMAtomicRMWBinOpFMin = 14,
  LLVMAtomicRMWBinOpUIncWrap = 15,
  LLVMAtomicRMWBinOpUDecWrap = 16,
};
enum LLVMDiagnosticSeverity {
  LLVMDSError = 0,
  LLVMDSWarning = 1,
  LLVMDSRemark = 2,
  LLVMDSNote = 3,
};
enum LLVMInlineAsmDialect {
  LLVMInlineAsmDialectATT = 0,
  LLVMInlineAsmDialectIntel = 1,
};
enum LLVMModuleFlagBehavior {
  LLVMModuleFlagBehaviorError = 0,
  LLVMModuleFlagBehaviorWarning = 1,
  LLVMModuleFlagBehaviorRequire = 2,
  LLVMModuleFlagBehaviorOverride = 3,
  LLVMModuleFlagBehaviorAppend = 4,
  LLVMModuleFlagBehaviorAppendUnique = 5,
};
enum __bind_gen__anon_D4 {
  LLVMAttributeReturnIndex = 0,
  LLVMAttributeFunctionIndex = -1,
};
type LLVMAttributeIndex :: u32;
enum LLVMTailCallKind {
  LLVMTailCallKindNone = 0,
  LLVMTailCallKindTail = 1,
  LLVMTailCallKindMustTail = 2,
  LLVMTailCallKindNoTail = 3,
};
enum __bind_gen__anon_D5 {
  LLVMFastMathAllowReassoc = 1,
  LLVMFastMathNoNaNs = 2,
  LLVMFastMathNoInfs = 4,
  LLVMFastMathNoSignedZeros = 8,
  LLVMFastMathAllowReciprocal = 16,
  LLVMFastMathAllowContract = 32,
  LLVMFastMathApproxFunc = 64,
  LLVMFastMathNone = 0,
  LLVMFastMathAll = 127,
};
type LLVMFastMathFlags :: u32;
enum __bind_gen__anon_D6 {
  LLVMGEPFlagInBounds = 1,
  LLVMGEPFlagNUSW = 2,
  LLVMGEPFlagNUW = 4,
};
type LLVMGEPNoWrapFlags :: u32;
extern fn LLVMShutdown() -> void;
extern fn LLVMGetVersion(Major: *mut u32, Minor: *mut u32, Patch: *mut u32) -> void;
extern fn LLVMCreateMessage(Message: *const u8) -> *mut u8;
extern fn LLVMDisposeMessage(Message: *mut u8) -> void;
type LLVMDiagnosticHandler :: fn(LLVMDiagnosticInfoRef, *mut void) -> void;
type LLVMYieldCallback :: fn(LLVMContextRef, *mut void) -> void;
extern fn LLVMContextCreate() -> LLVMContextRef;
extern fn LLVMGetGlobalContext() -> LLVMContextRef;
extern fn LLVMContextSetDiagnosticHandler(C: LLVMContextRef, Handler: LLVMDiagnosticHandler, DiagnosticContext: *mut void) -> void;
extern fn LLVMContextGetDiagnosticHandler(C: LLVMContextRef) -> LLVMDiagnosticHandler;
extern fn LLVMContextGetDiagnosticContext(C: LLVMContextRef) -> *mut void;
extern fn LLVMContextSetYieldCallback(C: LLVMContextRef, Callback: LLVMYieldCallback, OpaqueHandle: *mut void) -> void;
extern fn LLVMContextShouldDiscardValueNames(C: LLVMContextRef) -> bool;
extern fn LLVMContextSetDiscardValueNames(C: LLVMContextRef, Discard: bool) -> void;
extern fn LLVMContextDispose(C: LLVMContextRef) -> void;
extern fn LLVMGetDiagInfoDescription(DI: LLVMDiagnosticInfoRef) -> *mut u8;
extern fn LLVMGetDiagInfoSeverity(DI: LLVMDiagnosticInfoRef) -> LLVMDiagnosticSeverity;
extern fn LLVMGetMDKindIDInContext(C: LLVMContextRef, Name: *const u8, SLen: u32) -> u32;
extern fn LLVMGetMDKindID(Name: *const u8, SLen: u32) -> u32;
extern fn LLVMGetEnumAttributeKindForName(Name: *const u8, SLen: u64) -> u32;
extern fn LLVMGetLastEnumAttributeKind() -> u32;
extern fn LLVMCreateEnumAttribute(C: LLVMContextRef, KindID: u32, Val: u64) -> LLVMAttributeRef;
extern fn LLVMGetEnumAttributeKind(A: LLVMAttributeRef) -> u32;
extern fn LLVMGetEnumAttributeValue(A: LLVMAttributeRef) -> u64;
extern fn LLVMCreateTypeAttribute(C: LLVMContextRef, KindID: u32, type_ref: LLVMTypeRef) -> LLVMAttributeRef;
extern fn LLVMGetTypeAttributeValue(A: LLVMAttributeRef) -> LLVMTypeRef;
extern fn LLVMCreateConstantRangeAttribute(C: LLVMContextRef, KindID: u32, NumBits: u32, LowerWords: *const u64, UpperWords: *const u64) -> LLVMAttributeRef;
extern fn LLVMCreateStringAttribute(C: LLVMContextRef, K: *const u8, KLength: u32, V: *const u8, VLength: u32) -> LLVMAttributeRef;
extern fn LLVMGetStringAttributeKind(A: LLVMAttributeRef, Length: *mut u32) -> *const u8;
extern fn LLVMGetStringAttributeValue(A: LLVMAttributeRef, Length: *mut u32) -> *const u8;
extern fn LLVMIsEnumAttribute(A: LLVMAttributeRef) -> bool;
extern fn LLVMIsStringAttribute(A: LLVMAttributeRef) -> bool;
extern fn LLVMIsTypeAttribute(A: LLVMAttributeRef) -> bool;
extern fn LLVMGetTypeByName2(C: LLVMContextRef, Name: *const u8) -> LLVMTypeRef;
extern fn LLVMModuleCreateWithName(ModuleID: *const u8) -> LLVMModuleRef;
extern fn LLVMModuleCreateWithNameInContext(ModuleID: *const u8, C: LLVMContextRef) -> LLVMModuleRef;
extern fn LLVMCloneModule(M: LLVMModuleRef) -> LLVMModuleRef;
extern fn LLVMDisposeModule(M: LLVMModuleRef) -> void;
extern fn LLVMIsNewDbgInfoFormat(M: LLVMModuleRef) -> bool;
extern fn LLVMSetIsNewDbgInfoFormat(M: LLVMModuleRef, UseNewFormat: bool) -> void;
extern fn LLVMGetModuleIdentifier(M: LLVMModuleRef, Len: *mut u64) -> *const u8;
extern fn LLVMSetModuleIdentifier(M: LLVMModuleRef, Ident: *const u8, Len: u64) -> void;
extern fn LLVMGetSourceFileName(M: LLVMModuleRef, Len: *mut u64) -> *const u8;
extern fn LLVMSetSourceFileName(M: LLVMModuleRef, Name: *const u8, Len: u64) -> void;
extern fn LLVMGetDataLayoutStr(M: LLVMModuleRef) -> *const u8;
extern fn LLVMGetDataLayout(M: LLVMModuleRef) -> *const u8;
extern fn LLVMSetDataLayout(M: LLVMModuleRef, DataLayoutStr: *const u8) -> void;
extern fn LLVMGetTarget(M: LLVMModuleRef) -> *const u8;
extern fn LLVMSetTarget(M: LLVMModuleRef, Triple: *const u8) -> void;
extern fn LLVMCopyModuleFlagsMetadata(M: LLVMModuleRef, Len: *mut u64) -> *mut LLVMModuleFlagEntry;
extern fn LLVMDisposeModuleFlagsMetadata(Entries: *mut LLVMModuleFlagEntry) -> void;
extern fn LLVMModuleFlagEntriesGetFlagBehavior(Entries: *mut LLVMModuleFlagEntry, Index: u32) -> LLVMModuleFlagBehavior;
extern fn LLVMModuleFlagEntriesGetKey(Entries: *mut LLVMModuleFlagEntry, Index: u32, Len: *mut u64) -> *const u8;
extern fn LLVMModuleFlagEntriesGetMetadata(Entries: *mut LLVMModuleFlagEntry, Index: u32) -> LLVMMetadataRef;
extern fn LLVMGetModuleFlag(M: LLVMModuleRef, Key: *const u8, KeyLen: u64) -> LLVMMetadataRef;
extern fn LLVMAddModuleFlag(M: LLVMModuleRef, Behavior: LLVMModuleFlagBehavior, Key: *const u8, KeyLen: u64, Val: LLVMMetadataRef) -> void;
extern fn LLVMDumpModule(M: LLVMModuleRef) -> void;
extern fn LLVMPrintModuleToFile(M: LLVMModuleRef, Filename: *const u8, ErrorMessage: *mut *mut u8) -> bool;
extern fn LLVMPrintModuleToString(M: LLVMModuleRef) -> *mut u8;
extern fn LLVMGetModuleInlineAsm(M: LLVMModuleRef, Len: *mut u64) -> *const u8;
extern fn LLVMSetModuleInlineAsm2(M: LLVMModuleRef, Asm: *const u8, Len: u64) -> void;
extern fn LLVMAppendModuleInlineAsm(M: LLVMModuleRef, Asm: *const u8, Len: u64) -> void;
extern fn LLVMGetInlineAsm(Ty: LLVMTypeRef, AsmString: *const u8, AsmStringSize: u64, Constraints: *const u8, ConstraintsSize: u64, HasSideEffects: bool, IsAlignStack: bool, Dialect: LLVMInlineAsmDialect, CanThrow: bool) -> LLVMValueRef;
extern fn LLVMGetInlineAsmAsmString(InlineAsmVal: LLVMValueRef, Len: *mut u64) -> *const u8;
extern fn LLVMGetInlineAsmConstraintString(InlineAsmVal: LLVMValueRef, Len: *mut u64) -> *const u8;
extern fn LLVMGetInlineAsmDialect(InlineAsmVal: LLVMValueRef) -> LLVMInlineAsmDialect;
extern fn LLVMGetInlineAsmFunctionType(InlineAsmVal: LLVMValueRef) -> LLVMTypeRef;
extern fn LLVMGetInlineAsmHasSideEffects(InlineAsmVal: LLVMValueRef) -> bool;
extern fn LLVMGetInlineAsmNeedsAlignedStack(InlineAsmVal: LLVMValueRef) -> bool;
extern fn LLVMGetInlineAsmCanUnwind(InlineAsmVal: LLVMValueRef) -> bool;
extern fn LLVMGetModuleContext(M: LLVMModuleRef) -> LLVMContextRef;
extern fn LLVMGetTypeByName(M: LLVMModuleRef, Name: *const u8) -> LLVMTypeRef;
extern fn LLVMGetFirstNamedMetadata(M: LLVMModuleRef) -> LLVMNamedMDNodeRef;
extern fn LLVMGetLastNamedMetadata(M: LLVMModuleRef) -> LLVMNamedMDNodeRef;
extern fn LLVMGetNextNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef) -> LLVMNamedMDNodeRef;
extern fn LLVMGetPreviousNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef) -> LLVMNamedMDNodeRef;
extern fn LLVMGetNamedMetadata(M: LLVMModuleRef, Name: *const u8, NameLen: u64) -> LLVMNamedMDNodeRef;
extern fn LLVMGetOrInsertNamedMetadata(M: LLVMModuleRef, Name: *const u8, NameLen: u64) -> LLVMNamedMDNodeRef;
extern fn LLVMGetNamedMetadataName(NamedMD: LLVMNamedMDNodeRef, NameLen: *mut u64) -> *const u8;
extern fn LLVMGetNamedMetadataNumOperands(M: LLVMModuleRef, Name: *const u8) -> u32;
extern fn LLVMGetNamedMetadataOperands(M: LLVMModuleRef, Name: *const u8, Dest: *mut LLVMValueRef) -> void;
extern fn LLVMAddNamedMetadataOperand(M: LLVMModuleRef, Name: *const u8, Val: LLVMValueRef) -> void;
extern fn LLVMGetDebugLocDirectory(Val: LLVMValueRef, Length: *mut u32) -> *const u8;
extern fn LLVMGetDebugLocFilename(Val: LLVMValueRef, Length: *mut u32) -> *const u8;
extern fn LLVMGetDebugLocLine(Val: LLVMValueRef) -> u32;
extern fn LLVMGetDebugLocColumn(Val: LLVMValueRef) -> u32;
extern fn LLVMAddFunction(M: LLVMModuleRef, Name: *const u8, FunctionTy: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMGetNamedFunction(M: LLVMModuleRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMGetFirstFunction(M: LLVMModuleRef) -> LLVMValueRef;
extern fn LLVMGetLastFunction(M: LLVMModuleRef) -> LLVMValueRef;
extern fn LLVMGetNextFunction(Fn: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetPreviousFunction(Fn: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMSetModuleInlineAsm(M: LLVMModuleRef, Asm: *const u8) -> void;
extern fn LLVMGetTypeKind(Ty: LLVMTypeRef) -> LLVMTypeKind;
extern fn LLVMTypeIsSized(Ty: LLVMTypeRef) -> bool;
extern fn LLVMGetTypeContext(Ty: LLVMTypeRef) -> LLVMContextRef;
extern fn LLVMDumpType(Val: LLVMTypeRef) -> void;
extern fn LLVMPrintTypeToString(Val: LLVMTypeRef) -> *mut u8;
extern fn LLVMInt1TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMInt8TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMInt16TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMInt32TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMInt64TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMInt128TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMIntTypeInContext(C: LLVMContextRef, NumBits: u32) -> LLVMTypeRef;
extern fn LLVMInt1Type() -> LLVMTypeRef;
extern fn LLVMInt8Type() -> LLVMTypeRef;
extern fn LLVMInt16Type() -> LLVMTypeRef;
extern fn LLVMInt32Type() -> LLVMTypeRef;
extern fn LLVMInt64Type() -> LLVMTypeRef;
extern fn LLVMInt128Type() -> LLVMTypeRef;
extern fn LLVMIntType(NumBits: u32) -> LLVMTypeRef;
extern fn LLVMGetIntTypeWidth(IntegerTy: LLVMTypeRef) -> u32;
extern fn LLVMHalfTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMBFloatTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMFloatTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMDoubleTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMX86FP80TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMFP128TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMPPCFP128TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMHalfType() -> LLVMTypeRef;
extern fn LLVMBFloatType() -> LLVMTypeRef;
extern fn LLVMFloatType() -> LLVMTypeRef;
extern fn LLVMDoubleType() -> LLVMTypeRef;
extern fn LLVMX86FP80Type() -> LLVMTypeRef;
extern fn LLVMFP128Type() -> LLVMTypeRef;
extern fn LLVMPPCFP128Type() -> LLVMTypeRef;
extern fn LLVMFunctionType(ReturnType: LLVMTypeRef, ParamTypes: *mut LLVMTypeRef, ParamCount: u32, IsVarArg: bool) -> LLVMTypeRef;
extern fn LLVMIsFunctionVarArg(FunctionTy: LLVMTypeRef) -> bool;
extern fn LLVMGetReturnType(FunctionTy: LLVMTypeRef) -> LLVMTypeRef;
extern fn LLVMCountParamTypes(FunctionTy: LLVMTypeRef) -> u32;
extern fn LLVMGetParamTypes(FunctionTy: LLVMTypeRef, Dest: *mut LLVMTypeRef) -> void;
extern fn LLVMStructTypeInContext(C: LLVMContextRef, ElementTypes: *mut LLVMTypeRef, ElementCount: u32, Packed: bool) -> LLVMTypeRef;
extern fn LLVMStructType(ElementTypes: *mut LLVMTypeRef, ElementCount: u32, Packed: bool) -> LLVMTypeRef;
extern fn LLVMStructCreateNamed(C: LLVMContextRef, Name: *const u8) -> LLVMTypeRef;
extern fn LLVMGetStructName(Ty: LLVMTypeRef) -> *const u8;
extern fn LLVMStructSetBody(StructTy: LLVMTypeRef, ElementTypes: *mut LLVMTypeRef, ElementCount: u32, Packed: bool) -> void;
extern fn LLVMCountStructElementTypes(StructTy: LLVMTypeRef) -> u32;
extern fn LLVMGetStructElementTypes(StructTy: LLVMTypeRef, Dest: *mut LLVMTypeRef) -> void;
extern fn LLVMStructGetTypeAtIndex(StructTy: LLVMTypeRef, i: u32) -> LLVMTypeRef;
extern fn LLVMIsPackedStruct(StructTy: LLVMTypeRef) -> bool;
extern fn LLVMIsOpaqueStruct(StructTy: LLVMTypeRef) -> bool;
extern fn LLVMIsLiteralStruct(StructTy: LLVMTypeRef) -> bool;
extern fn LLVMGetElementType(Ty: LLVMTypeRef) -> LLVMTypeRef;
extern fn LLVMGetSubtypes(Tp: LLVMTypeRef, Arr: *mut LLVMTypeRef) -> void;
extern fn LLVMGetNumContainedTypes(Tp: LLVMTypeRef) -> u32;
extern fn LLVMArrayType(ElementType: LLVMTypeRef, ElementCount: u32) -> LLVMTypeRef;
extern fn LLVMArrayType2(ElementType: LLVMTypeRef, ElementCount: u64) -> LLVMTypeRef;
extern fn LLVMGetArrayLength(ArrayTy: LLVMTypeRef) -> u32;
extern fn LLVMGetArrayLength2(ArrayTy: LLVMTypeRef) -> u64;
extern fn LLVMPointerType(ElementType: LLVMTypeRef, AddressSpace: u32) -> LLVMTypeRef;
extern fn LLVMPointerTypeIsOpaque(Ty: LLVMTypeRef) -> bool;
extern fn LLVMPointerTypeInContext(C: LLVMContextRef, AddressSpace: u32) -> LLVMTypeRef;
extern fn LLVMGetPointerAddressSpace(PointerTy: LLVMTypeRef) -> u32;
extern fn LLVMVectorType(ElementType: LLVMTypeRef, ElementCount: u32) -> LLVMTypeRef;
extern fn LLVMScalableVectorType(ElementType: LLVMTypeRef, ElementCount: u32) -> LLVMTypeRef;
extern fn LLVMGetVectorSize(VectorTy: LLVMTypeRef) -> u32;
extern fn LLVMGetConstantPtrAuthPointer(PtrAuth: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetConstantPtrAuthKey(PtrAuth: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetConstantPtrAuthDiscriminator(PtrAuth: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetConstantPtrAuthAddrDiscriminator(PtrAuth: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMVoidTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMLabelTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMX86MMXTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMX86AMXTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMTokenTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMMetadataTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern fn LLVMVoidType() -> LLVMTypeRef;
extern fn LLVMLabelType() -> LLVMTypeRef;
extern fn LLVMX86MMXType() -> LLVMTypeRef;
extern fn LLVMX86AMXType() -> LLVMTypeRef;
extern fn LLVMTargetExtTypeInContext(C: LLVMContextRef, Name: *const u8, TypeParams: *mut LLVMTypeRef, TypeParamCount: u32, IntParams: *mut u32, IntParamCount: u32) -> LLVMTypeRef;
extern fn LLVMGetTargetExtTypeName(TargetExtTy: LLVMTypeRef) -> *const u8;
extern fn LLVMGetTargetExtTypeNumTypeParams(TargetExtTy: LLVMTypeRef) -> u32;
extern fn LLVMGetTargetExtTypeTypeParam(TargetExtTy: LLVMTypeRef, Idx: u32) -> LLVMTypeRef;
extern fn LLVMGetTargetExtTypeNumIntParams(TargetExtTy: LLVMTypeRef) -> u32;
extern fn LLVMGetTargetExtTypeIntParam(TargetExtTy: LLVMTypeRef, Idx: u32) -> u32;
extern fn LLVMTypeOf(Val: LLVMValueRef) -> LLVMTypeRef;
extern fn LLVMGetValueKind(Val: LLVMValueRef) -> LLVMValueKind;
extern fn LLVMGetValueName2(Val: LLVMValueRef, Length: *mut u64) -> *const u8;
extern fn LLVMSetValueName2(Val: LLVMValueRef, Name: *const u8, NameLen: u64) -> void;
extern fn LLVMDumpValue(Val: LLVMValueRef) -> void;
extern fn LLVMPrintValueToString(Val: LLVMValueRef) -> *mut u8;
extern fn LLVMPrintDbgRecordToString(Record: LLVMDbgRecordRef) -> *mut u8;
extern fn LLVMReplaceAllUsesWith(OldVal: LLVMValueRef, NewVal: LLVMValueRef) -> void;
extern fn LLVMIsConstant(Val: LLVMValueRef) -> bool;
extern fn LLVMIsUndef(Val: LLVMValueRef) -> bool;
extern fn LLVMIsPoison(Val: LLVMValueRef) -> bool;
extern fn LLVMIsAArgument(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsABasicBlock(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAInlineAsm(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAUser(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstant(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsABlockAddress(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstantAggregateZero(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstantArray(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstantDataSequential(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstantDataArray(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstantDataVector(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstantExpr(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstantFP(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstantInt(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstantPointerNull(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstantStruct(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstantTokenNone(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstantVector(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAConstantPtrAuth(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAGlobalValue(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAGlobalAlias(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAGlobalObject(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAFunction(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAGlobalVariable(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAGlobalIFunc(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAUndefValue(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAPoisonValue(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAInstruction(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAUnaryOperator(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsABinaryOperator(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsACallInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAIntrinsicInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsADbgInfoIntrinsic(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsADbgVariableIntrinsic(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsADbgDeclareInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsADbgLabelInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAMemIntrinsic(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAMemCpyInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAMemMoveInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAMemSetInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsACmpInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAFCmpInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAICmpInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAExtractElementInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAGetElementPtrInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAInsertElementInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAInsertValueInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsALandingPadInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAPHINode(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsASelectInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAShuffleVectorInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAStoreInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsABranchInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAIndirectBrInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAInvokeInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAReturnInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsASwitchInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAUnreachableInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAResumeInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsACleanupReturnInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsACatchReturnInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsACatchSwitchInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsACallBrInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAFuncletPadInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsACatchPadInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsACleanupPadInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAUnaryInstruction(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAAllocaInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsACastInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAAddrSpaceCastInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsABitCastInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAFPExtInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAFPToSIInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAFPToUIInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAFPTruncInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAIntToPtrInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAPtrToIntInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsASExtInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsASIToFPInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsATruncInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAUIToFPInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAZExtInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAExtractValueInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsALoadInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAVAArgInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAFreezeInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAAtomicCmpXchgInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAAtomicRMWInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAFenceInst(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAMDNode(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAValueAsMetadata(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsAMDString(Val: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetValueName(Val: LLVMValueRef) -> *const u8;
extern fn LLVMSetValueName(Val: LLVMValueRef, Name: *const u8) -> void;
extern fn LLVMGetFirstUse(Val: LLVMValueRef) -> LLVMUseRef;
extern fn LLVMGetNextUse(U: LLVMUseRef) -> LLVMUseRef;
extern fn LLVMGetUser(U: LLVMUseRef) -> LLVMValueRef;
extern fn LLVMGetUsedValue(U: LLVMUseRef) -> LLVMValueRef;
extern fn LLVMGetOperand(Val: LLVMValueRef, Index: u32) -> LLVMValueRef;
extern fn LLVMGetOperandUse(Val: LLVMValueRef, Index: u32) -> LLVMUseRef;
extern fn LLVMSetOperand(User: LLVMValueRef, Index: u32, Val: LLVMValueRef) -> void;
extern fn LLVMGetNumOperands(Val: LLVMValueRef) -> s32;
extern fn LLVMConstNull(Ty: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMConstAllOnes(Ty: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMGetUndef(Ty: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMGetPoison(Ty: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMIsNull(Val: LLVMValueRef) -> bool;
extern fn LLVMConstPointerNull(Ty: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMConstInt(IntTy: LLVMTypeRef, N: u64, SignExtend: bool) -> LLVMValueRef;
extern fn LLVMConstIntOfArbitraryPrecision(IntTy: LLVMTypeRef, NumWords: u32, Words: *const u64) -> LLVMValueRef;
extern fn LLVMConstIntOfString(IntTy: LLVMTypeRef, Text: *const u8, Radix: u8) -> LLVMValueRef;
extern fn LLVMConstIntOfStringAndSize(IntTy: LLVMTypeRef, Text: *const u8, SLen: u32, Radix: u8) -> LLVMValueRef;
extern fn LLVMConstReal(RealTy: LLVMTypeRef, N: f64) -> LLVMValueRef;
extern fn LLVMConstRealOfString(RealTy: LLVMTypeRef, Text: *const u8) -> LLVMValueRef;
extern fn LLVMConstRealOfStringAndSize(RealTy: LLVMTypeRef, Text: *const u8, SLen: u32) -> LLVMValueRef;
extern fn LLVMConstIntGetZExtValue(ConstantVal: LLVMValueRef) -> u64;
extern fn LLVMConstIntGetSExtValue(ConstantVal: LLVMValueRef) -> s64;
extern fn LLVMConstRealGetDouble(ConstantVal: LLVMValueRef, losesInfo: *mut bool) -> f64;
extern fn LLVMConstStringInContext(C: LLVMContextRef, Str: *const u8, Length: u32, DontNullTerminate: bool) -> LLVMValueRef;
extern fn LLVMConstStringInContext2(C: LLVMContextRef, Str: *const u8, Length: u64, DontNullTerminate: bool) -> LLVMValueRef;
extern fn LLVMConstString(Str: *const u8, Length: u32, DontNullTerminate: bool) -> LLVMValueRef;
extern fn LLVMIsConstantString(c: LLVMValueRef) -> bool;
extern fn LLVMGetAsString(c: LLVMValueRef, Length: *mut u64) -> *const u8;
extern fn LLVMConstStructInContext(C: LLVMContextRef, ConstantVals: *mut LLVMValueRef, Count: u32, Packed: bool) -> LLVMValueRef;
extern fn LLVMConstStruct(ConstantVals: *mut LLVMValueRef, Count: u32, Packed: bool) -> LLVMValueRef;
extern fn LLVMConstArray(ElementTy: LLVMTypeRef, ConstantVals: *mut LLVMValueRef, Length: u32) -> LLVMValueRef;
extern fn LLVMConstArray2(ElementTy: LLVMTypeRef, ConstantVals: *mut LLVMValueRef, Length: u64) -> LLVMValueRef;
extern fn LLVMConstNamedStruct(StructTy: LLVMTypeRef, ConstantVals: *mut LLVMValueRef, Count: u32) -> LLVMValueRef;
extern fn LLVMGetAggregateElement(C: LLVMValueRef, Idx: u32) -> LLVMValueRef;
extern fn LLVMGetElementAsConstant(C: LLVMValueRef, idx: u32) -> LLVMValueRef;
extern fn LLVMConstVector(ScalarConstantVals: *mut LLVMValueRef, Size: u32) -> LLVMValueRef;
extern fn LLVMConstantPtrAuth(Ptr: LLVMValueRef, Key: LLVMValueRef, Disc: LLVMValueRef, AddrDisc: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetConstOpcode(ConstantVal: LLVMValueRef) -> LLVMOpcode;
extern fn LLVMAlignOf(Ty: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMSizeOf(Ty: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMConstNeg(ConstantVal: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstNSWNeg(ConstantVal: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstNUWNeg(ConstantVal: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstNot(ConstantVal: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstNSWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstNUWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstNSWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstNUWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstNSWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstNUWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstXor(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstGEP2(Ty: LLVMTypeRef, ConstantVal: LLVMValueRef, ConstantIndices: *mut LLVMValueRef, NumIndices: u32) -> LLVMValueRef;
extern fn LLVMConstInBoundsGEP2(Ty: LLVMTypeRef, ConstantVal: LLVMValueRef, ConstantIndices: *mut LLVMValueRef, NumIndices: u32) -> LLVMValueRef;
extern fn LLVMConstGEPWithNoWrapFlags(Ty: LLVMTypeRef, ConstantVal: LLVMValueRef, ConstantIndices: *mut LLVMValueRef, NumIndices: u32, NoWrapFlags: LLVMGEPNoWrapFlags) -> LLVMValueRef;
extern fn LLVMConstTrunc(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMConstPtrToInt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMConstIntToPtr(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMConstBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMConstAddrSpaceCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMConstTruncOrBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMConstPointerCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern fn LLVMConstExtractElement(VectorConstant: LLVMValueRef, IndexConstant: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstInsertElement(VectorConstant: LLVMValueRef, ElementValueConstant: LLVMValueRef, IndexConstant: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMConstShuffleVector(VectorAConstant: LLVMValueRef, VectorBConstant: LLVMValueRef, MaskConstant: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMBlockAddress(F: LLVMValueRef, BB: LLVMBasicBlockRef) -> LLVMValueRef;
extern fn LLVMGetBlockAddressFunction(BlockAddr: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetBlockAddressBasicBlock(BlockAddr: LLVMValueRef) -> LLVMBasicBlockRef;
extern fn LLVMConstInlineAsm(Ty: LLVMTypeRef, AsmString: *const u8, Constraints: *const u8, HasSideEffects: bool, IsAlignStack: bool) -> LLVMValueRef;
extern fn LLVMGetGlobalParent(Global: LLVMValueRef) -> LLVMModuleRef;
extern fn LLVMIsDeclaration(Global: LLVMValueRef) -> bool;
extern fn LLVMGetLinkage(Global: LLVMValueRef) -> LLVMLinkage;
extern fn LLVMSetLinkage(Global: LLVMValueRef, Linkage: LLVMLinkage) -> void;
extern fn LLVMGetSection(Global: LLVMValueRef) -> *const u8;
extern fn LLVMSetSection(Global: LLVMValueRef, Section: *const u8) -> void;
extern fn LLVMGetVisibility(Global: LLVMValueRef) -> LLVMVisibility;
extern fn LLVMSetVisibility(Global: LLVMValueRef, Viz: LLVMVisibility) -> void;
extern fn LLVMGetDLLStorageClass(Global: LLVMValueRef) -> LLVMDLLStorageClass;
extern fn LLVMSetDLLStorageClass(Global: LLVMValueRef, Class: LLVMDLLStorageClass) -> void;
extern fn LLVMGetUnnamedAddress(Global: LLVMValueRef) -> LLVMUnnamedAddr;
extern fn LLVMSetUnnamedAddress(Global: LLVMValueRef, UnnamedAddr: LLVMUnnamedAddr) -> void;
extern fn LLVMGlobalGetValueType(Global: LLVMValueRef) -> LLVMTypeRef;
extern fn LLVMHasUnnamedAddr(Global: LLVMValueRef) -> bool;
extern fn LLVMSetUnnamedAddr(Global: LLVMValueRef, HasUnnamedAddr: bool) -> void;
extern fn LLVMGetAlignment(V: LLVMValueRef) -> u32;
extern fn LLVMSetAlignment(V: LLVMValueRef, Bytes: u32) -> void;
extern fn LLVMGlobalSetMetadata(Global: LLVMValueRef, Kind: u32, MD: LLVMMetadataRef) -> void;
extern fn LLVMGlobalEraseMetadata(Global: LLVMValueRef, Kind: u32) -> void;
extern fn LLVMGlobalClearMetadata(Global: LLVMValueRef) -> void;
extern fn LLVMGlobalCopyAllMetadata(Value: LLVMValueRef, NumEntries: *mut u64) -> *mut LLVMValueMetadataEntry;
extern fn LLVMDisposeValueMetadataEntries(Entries: *mut LLVMValueMetadataEntry) -> void;
extern fn LLVMValueMetadataEntriesGetKind(Entries: *mut LLVMValueMetadataEntry, Index: u32) -> u32;
extern fn LLVMValueMetadataEntriesGetMetadata(Entries: *mut LLVMValueMetadataEntry, Index: u32) -> LLVMMetadataRef;
extern fn LLVMAddGlobal(M: LLVMModuleRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMAddGlobalInAddressSpace(M: LLVMModuleRef, Ty: LLVMTypeRef, Name: *const u8, AddressSpace: u32) -> LLVMValueRef;
extern fn LLVMGetNamedGlobal(M: LLVMModuleRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMGetFirstGlobal(M: LLVMModuleRef) -> LLVMValueRef;
extern fn LLVMGetLastGlobal(M: LLVMModuleRef) -> LLVMValueRef;
extern fn LLVMGetNextGlobal(GlobalVar: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetPreviousGlobal(GlobalVar: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMDeleteGlobal(GlobalVar: LLVMValueRef) -> void;
extern fn LLVMGetInitializer(GlobalVar: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMSetInitializer(GlobalVar: LLVMValueRef, ConstantVal: LLVMValueRef) -> void;
extern fn LLVMIsThreadLocal(GlobalVar: LLVMValueRef) -> bool;
extern fn LLVMSetThreadLocal(GlobalVar: LLVMValueRef, IsThreadLocal: bool) -> void;
extern fn LLVMIsGlobalConstant(GlobalVar: LLVMValueRef) -> bool;
extern fn LLVMSetGlobalConstant(GlobalVar: LLVMValueRef, IsConstant: bool) -> void;
extern fn LLVMGetThreadLocalMode(GlobalVar: LLVMValueRef) -> LLVMThreadLocalMode;
extern fn LLVMSetThreadLocalMode(GlobalVar: LLVMValueRef, Mode: LLVMThreadLocalMode) -> void;
extern fn LLVMIsExternallyInitialized(GlobalVar: LLVMValueRef) -> bool;
extern fn LLVMSetExternallyInitialized(GlobalVar: LLVMValueRef, IsExtInit: bool) -> void;
extern fn LLVMAddAlias2(M: LLVMModuleRef, ValueTy: LLVMTypeRef, AddrSpace: u32, Aliasee: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMGetNamedGlobalAlias(M: LLVMModuleRef, Name: *const u8, NameLen: u64) -> LLVMValueRef;
extern fn LLVMGetFirstGlobalAlias(M: LLVMModuleRef) -> LLVMValueRef;
extern fn LLVMGetLastGlobalAlias(M: LLVMModuleRef) -> LLVMValueRef;
extern fn LLVMGetNextGlobalAlias(GA: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetPreviousGlobalAlias(GA: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMAliasGetAliasee(Alias: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMAliasSetAliasee(Alias: LLVMValueRef, Aliasee: LLVMValueRef) -> void;
extern fn LLVMDeleteFunction(Fn: LLVMValueRef) -> void;
extern fn LLVMHasPersonalityFn(Fn: LLVMValueRef) -> bool;
extern fn LLVMGetPersonalityFn(Fn: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMSetPersonalityFn(Fn: LLVMValueRef, PersonalityFn: LLVMValueRef) -> void;
extern fn LLVMLookupIntrinsicID(Name: *const u8, NameLen: u64) -> u32;
extern fn LLVMGetIntrinsicID(Fn: LLVMValueRef) -> u32;
extern fn LLVMGetIntrinsicDeclaration(Mod: LLVMModuleRef, ID: u32, ParamTypes: *mut LLVMTypeRef, ParamCount: u64) -> LLVMValueRef;
extern fn LLVMIntrinsicGetType(Ctx: LLVMContextRef, ID: u32, ParamTypes: *mut LLVMTypeRef, ParamCount: u64) -> LLVMTypeRef;
extern fn LLVMIntrinsicGetName(ID: u32, NameLength: *mut u64) -> *const u8;
extern fn LLVMIntrinsicCopyOverloadedName(ID: u32, ParamTypes: *mut LLVMTypeRef, ParamCount: u64, NameLength: *mut u64) -> *const u8;
extern fn LLVMIntrinsicCopyOverloadedName2(Mod: LLVMModuleRef, ID: u32, ParamTypes: *mut LLVMTypeRef, ParamCount: u64, NameLength: *mut u64) -> *const u8;
extern fn LLVMIntrinsicIsOverloaded(ID: u32) -> bool;
extern fn LLVMGetFunctionCallConv(Fn: LLVMValueRef) -> u32;
extern fn LLVMSetFunctionCallConv(Fn: LLVMValueRef, CC: u32) -> void;
extern fn LLVMGetGC(Fn: LLVMValueRef) -> *const u8;
extern fn LLVMSetGC(Fn: LLVMValueRef, Name: *const u8) -> void;
extern fn LLVMGetPrefixData(Fn: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMHasPrefixData(Fn: LLVMValueRef) -> bool;
extern fn LLVMSetPrefixData(Fn: LLVMValueRef, prefixData: LLVMValueRef) -> void;
extern fn LLVMGetPrologueData(Fn: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMHasPrologueData(Fn: LLVMValueRef) -> bool;
extern fn LLVMSetPrologueData(Fn: LLVMValueRef, prologueData: LLVMValueRef) -> void;
extern fn LLVMAddAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, A: LLVMAttributeRef) -> void;
extern fn LLVMGetAttributeCountAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex) -> u32;
extern fn LLVMGetAttributesAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, Attrs: *mut LLVMAttributeRef) -> void;
extern fn LLVMGetEnumAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: u32) -> LLVMAttributeRef;
extern fn LLVMGetStringAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, K: *const u8, KLen: u32) -> LLVMAttributeRef;
extern fn LLVMRemoveEnumAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: u32) -> void;
extern fn LLVMRemoveStringAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, K: *const u8, KLen: u32) -> void;
extern fn LLVMAddTargetDependentFunctionAttr(Fn: LLVMValueRef, A: *const u8, V: *const u8) -> void;
extern fn LLVMCountParams(Fn: LLVMValueRef) -> u32;
extern fn LLVMGetParams(Fn: LLVMValueRef, Params: *mut LLVMValueRef) -> void;
extern fn LLVMGetParam(Fn: LLVMValueRef, Index: u32) -> LLVMValueRef;
extern fn LLVMGetParamParent(Inst: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetFirstParam(Fn: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetLastParam(Fn: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetNextParam(Arg: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetPreviousParam(Arg: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMSetParamAlignment(Arg: LLVMValueRef, Align: u32) -> void;
extern fn LLVMAddGlobalIFunc(M: LLVMModuleRef, Name: *const u8, NameLen: u64, Ty: LLVMTypeRef, AddrSpace: u32, Resolver: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetNamedGlobalIFunc(M: LLVMModuleRef, Name: *const u8, NameLen: u64) -> LLVMValueRef;
extern fn LLVMGetFirstGlobalIFunc(M: LLVMModuleRef) -> LLVMValueRef;
extern fn LLVMGetLastGlobalIFunc(M: LLVMModuleRef) -> LLVMValueRef;
extern fn LLVMGetNextGlobalIFunc(IFunc: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetPreviousGlobalIFunc(IFunc: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetGlobalIFuncResolver(IFunc: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMSetGlobalIFuncResolver(IFunc: LLVMValueRef, Resolver: LLVMValueRef) -> void;
extern fn LLVMEraseGlobalIFunc(IFunc: LLVMValueRef) -> void;
extern fn LLVMRemoveGlobalIFunc(IFunc: LLVMValueRef) -> void;
extern fn LLVMMDStringInContext2(C: LLVMContextRef, Str: *const u8, SLen: u64) -> LLVMMetadataRef;
extern fn LLVMMDNodeInContext2(C: LLVMContextRef, MDs: *mut LLVMMetadataRef, Count: u64) -> LLVMMetadataRef;
extern fn LLVMMetadataAsValue(C: LLVMContextRef, MD: LLVMMetadataRef) -> LLVMValueRef;
extern fn LLVMValueAsMetadata(Val: LLVMValueRef) -> LLVMMetadataRef;
extern fn LLVMGetMDString(V: LLVMValueRef, Length: *mut u32) -> *const u8;
extern fn LLVMGetMDNodeNumOperands(V: LLVMValueRef) -> u32;
extern fn LLVMGetMDNodeOperands(V: LLVMValueRef, Dest: *mut LLVMValueRef) -> void;
extern fn LLVMReplaceMDNodeOperandWith(V: LLVMValueRef, Index: u32, Replacement: LLVMMetadataRef) -> void;
extern fn LLVMMDStringInContext(C: LLVMContextRef, Str: *const u8, SLen: u32) -> LLVMValueRef;
extern fn LLVMMDString(Str: *const u8, SLen: u32) -> LLVMValueRef;
extern fn LLVMMDNodeInContext(C: LLVMContextRef, Vals: *mut LLVMValueRef, Count: u32) -> LLVMValueRef;
extern fn LLVMMDNode(Vals: *mut LLVMValueRef, Count: u32) -> LLVMValueRef;
extern fn LLVMCreateOperandBundle(Tag: *const u8, TagLen: u64, Args: *mut LLVMValueRef, NumArgs: u32) -> LLVMOperandBundleRef;
extern fn LLVMDisposeOperandBundle(Bundle: LLVMOperandBundleRef) -> void;
extern fn LLVMGetOperandBundleTag(Bundle: LLVMOperandBundleRef, Len: *mut u64) -> *const u8;
extern fn LLVMGetNumOperandBundleArgs(Bundle: LLVMOperandBundleRef) -> u32;
extern fn LLVMGetOperandBundleArgAtIndex(Bundle: LLVMOperandBundleRef, Index: u32) -> LLVMValueRef;
extern fn LLVMBasicBlockAsValue(BB: LLVMBasicBlockRef) -> LLVMValueRef;
extern fn LLVMValueIsBasicBlock(Val: LLVMValueRef) -> bool;
extern fn LLVMValueAsBasicBlock(Val: LLVMValueRef) -> LLVMBasicBlockRef;
extern fn LLVMGetBasicBlockName(BB: LLVMBasicBlockRef) -> *const u8;
extern fn LLVMGetBasicBlockParent(BB: LLVMBasicBlockRef) -> LLVMValueRef;
extern fn LLVMGetBasicBlockTerminator(BB: LLVMBasicBlockRef) -> LLVMValueRef;
extern fn LLVMCountBasicBlocks(Fn: LLVMValueRef) -> u32;
extern fn LLVMGetBasicBlocks(Fn: LLVMValueRef, BasicBlocks: *mut LLVMBasicBlockRef) -> void;
extern fn LLVMGetFirstBasicBlock(Fn: LLVMValueRef) -> LLVMBasicBlockRef;
extern fn LLVMGetLastBasicBlock(Fn: LLVMValueRef) -> LLVMBasicBlockRef;
extern fn LLVMGetNextBasicBlock(BB: LLVMBasicBlockRef) -> LLVMBasicBlockRef;
extern fn LLVMGetPreviousBasicBlock(BB: LLVMBasicBlockRef) -> LLVMBasicBlockRef;
extern fn LLVMGetEntryBasicBlock(Fn: LLVMValueRef) -> LLVMBasicBlockRef;
extern fn LLVMInsertExistingBasicBlockAfterInsertBlock(Builder: LLVMBuilderRef, BB: LLVMBasicBlockRef) -> void;
extern fn LLVMAppendExistingBasicBlock(Fn: LLVMValueRef, BB: LLVMBasicBlockRef) -> void;
extern fn LLVMCreateBasicBlockInContext(C: LLVMContextRef, Name: *const u8) -> LLVMBasicBlockRef;
extern fn LLVMAppendBasicBlockInContext(C: LLVMContextRef, Fn: LLVMValueRef, Name: *const u8) -> LLVMBasicBlockRef;
extern fn LLVMAppendBasicBlock(Fn: LLVMValueRef, Name: *const u8) -> LLVMBasicBlockRef;
extern fn LLVMInsertBasicBlockInContext(C: LLVMContextRef, BB: LLVMBasicBlockRef, Name: *const u8) -> LLVMBasicBlockRef;
extern fn LLVMInsertBasicBlock(InsertBeforeBB: LLVMBasicBlockRef, Name: *const u8) -> LLVMBasicBlockRef;
extern fn LLVMDeleteBasicBlock(BB: LLVMBasicBlockRef) -> void;
extern fn LLVMRemoveBasicBlockFromParent(BB: LLVMBasicBlockRef) -> void;
extern fn LLVMMoveBasicBlockBefore(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef) -> void;
extern fn LLVMMoveBasicBlockAfter(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef) -> void;
extern fn LLVMGetFirstInstruction(BB: LLVMBasicBlockRef) -> LLVMValueRef;
extern fn LLVMGetLastInstruction(BB: LLVMBasicBlockRef) -> LLVMValueRef;
extern fn LLVMHasMetadata(Val: LLVMValueRef) -> s32;
extern fn LLVMGetMetadata(Val: LLVMValueRef, KindID: u32) -> LLVMValueRef;
extern fn LLVMSetMetadata(Val: LLVMValueRef, KindID: u32, Node: LLVMValueRef) -> void;
extern fn LLVMInstructionGetAllMetadataOtherThanDebugLoc(Instr: LLVMValueRef, NumEntries: *mut u64) -> *mut LLVMValueMetadataEntry;
extern fn LLVMGetInstructionParent(Inst: LLVMValueRef) -> LLVMBasicBlockRef;
extern fn LLVMGetNextInstruction(Inst: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetPreviousInstruction(Inst: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMInstructionRemoveFromParent(Inst: LLVMValueRef) -> void;
extern fn LLVMInstructionEraseFromParent(Inst: LLVMValueRef) -> void;
extern fn LLVMDeleteInstruction(Inst: LLVMValueRef) -> void;
extern fn LLVMGetInstructionOpcode(Inst: LLVMValueRef) -> LLVMOpcode;
extern fn LLVMGetICmpPredicate(Inst: LLVMValueRef) -> LLVMIntPredicate;
extern fn LLVMGetFCmpPredicate(Inst: LLVMValueRef) -> LLVMRealPredicate;
extern fn LLVMInstructionClone(Inst: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMIsATerminatorInst(Inst: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetNumArgOperands(Instr: LLVMValueRef) -> u32;
extern fn LLVMSetInstructionCallConv(Instr: LLVMValueRef, CC: u32) -> void;
extern fn LLVMGetInstructionCallConv(Instr: LLVMValueRef) -> u32;
extern fn LLVMSetInstrParamAlignment(Instr: LLVMValueRef, Idx: LLVMAttributeIndex, Align: u32) -> void;
extern fn LLVMAddCallSiteAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, A: LLVMAttributeRef) -> void;
extern fn LLVMGetCallSiteAttributeCount(C: LLVMValueRef, Idx: LLVMAttributeIndex) -> u32;
extern fn LLVMGetCallSiteAttributes(C: LLVMValueRef, Idx: LLVMAttributeIndex, Attrs: *mut LLVMAttributeRef) -> void;
extern fn LLVMGetCallSiteEnumAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: u32) -> LLVMAttributeRef;
extern fn LLVMGetCallSiteStringAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, K: *const u8, KLen: u32) -> LLVMAttributeRef;
extern fn LLVMRemoveCallSiteEnumAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: u32) -> void;
extern fn LLVMRemoveCallSiteStringAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, K: *const u8, KLen: u32) -> void;
extern fn LLVMGetCalledFunctionType(C: LLVMValueRef) -> LLVMTypeRef;
extern fn LLVMGetCalledValue(Instr: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMGetNumOperandBundles(C: LLVMValueRef) -> u32;
extern fn LLVMGetOperandBundleAtIndex(C: LLVMValueRef, Index: u32) -> LLVMOperandBundleRef;
extern fn LLVMIsTailCall(CallInst: LLVMValueRef) -> bool;
extern fn LLVMSetTailCall(CallInst: LLVMValueRef, IsTailCall: bool) -> void;
extern fn LLVMGetTailCallKind(CallInst: LLVMValueRef) -> LLVMTailCallKind;
extern fn LLVMSetTailCallKind(CallInst: LLVMValueRef, kind: LLVMTailCallKind) -> void;
extern fn LLVMGetNormalDest(InvokeInst: LLVMValueRef) -> LLVMBasicBlockRef;
extern fn LLVMGetUnwindDest(InvokeInst: LLVMValueRef) -> LLVMBasicBlockRef;
extern fn LLVMSetNormalDest(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef) -> void;
extern fn LLVMSetUnwindDest(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef) -> void;
extern fn LLVMGetCallBrDefaultDest(CallBr: LLVMValueRef) -> LLVMBasicBlockRef;
extern fn LLVMGetCallBrNumIndirectDests(CallBr: LLVMValueRef) -> u32;
extern fn LLVMGetCallBrIndirectDest(CallBr: LLVMValueRef, Idx: u32) -> LLVMBasicBlockRef;
extern fn LLVMGetNumSuccessors(Term: LLVMValueRef) -> u32;
extern fn LLVMGetSuccessor(Term: LLVMValueRef, i: u32) -> LLVMBasicBlockRef;
extern fn LLVMSetSuccessor(Term: LLVMValueRef, i: u32, block: LLVMBasicBlockRef) -> void;
extern fn LLVMIsConditional(Branch: LLVMValueRef) -> bool;
extern fn LLVMGetCondition(Branch: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMSetCondition(Branch: LLVMValueRef, Cond: LLVMValueRef) -> void;
extern fn LLVMGetSwitchDefaultDest(SwitchInstr: LLVMValueRef) -> LLVMBasicBlockRef;
extern fn LLVMGetAllocatedType(Alloca: LLVMValueRef) -> LLVMTypeRef;
extern fn LLVMIsInBounds(GEP: LLVMValueRef) -> bool;
extern fn LLVMSetIsInBounds(GEP: LLVMValueRef, InBounds: bool) -> void;
extern fn LLVMGetGEPSourceElementType(GEP: LLVMValueRef) -> LLVMTypeRef;
extern fn LLVMGEPGetNoWrapFlags(GEP: LLVMValueRef) -> LLVMGEPNoWrapFlags;
extern fn LLVMGEPSetNoWrapFlags(GEP: LLVMValueRef, NoWrapFlags: LLVMGEPNoWrapFlags) -> void;
extern fn LLVMAddIncoming(PhiNode: LLVMValueRef, IncomingValues: *mut LLVMValueRef, IncomingBlocks: *mut LLVMBasicBlockRef, Count: u32) -> void;
extern fn LLVMCountIncoming(PhiNode: LLVMValueRef) -> u32;
extern fn LLVMGetIncomingValue(PhiNode: LLVMValueRef, Index: u32) -> LLVMValueRef;
extern fn LLVMGetIncomingBlock(PhiNode: LLVMValueRef, Index: u32) -> LLVMBasicBlockRef;
extern fn LLVMGetNumIndices(Inst: LLVMValueRef) -> u32;
extern fn LLVMGetIndices(Inst: LLVMValueRef) -> *const u32;
extern fn LLVMCreateBuilderInContext(C: LLVMContextRef) -> LLVMBuilderRef;
extern fn LLVMCreateBuilder() -> LLVMBuilderRef;
extern fn LLVMPositionBuilder(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef, Instr: LLVMValueRef) -> void;
extern fn LLVMPositionBuilderBeforeDbgRecords(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef, Inst: LLVMValueRef) -> void;
extern fn LLVMPositionBuilderBefore(Builder: LLVMBuilderRef, Instr: LLVMValueRef) -> void;
extern fn LLVMPositionBuilderBeforeInstrAndDbgRecords(Builder: LLVMBuilderRef, Instr: LLVMValueRef) -> void;
extern fn LLVMPositionBuilderAtEnd(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef) -> void;
extern fn LLVMGetInsertBlock(Builder: LLVMBuilderRef) -> LLVMBasicBlockRef;
extern fn LLVMClearInsertionPosition(Builder: LLVMBuilderRef) -> void;
extern fn LLVMInsertIntoBuilder(Builder: LLVMBuilderRef, Instr: LLVMValueRef) -> void;
extern fn LLVMInsertIntoBuilderWithName(Builder: LLVMBuilderRef, Instr: LLVMValueRef, Name: *const u8) -> void;
extern fn LLVMDisposeBuilder(Builder: LLVMBuilderRef) -> void;
extern fn LLVMGetCurrentDebugLocation2(Builder: LLVMBuilderRef) -> LLVMMetadataRef;
extern fn LLVMSetCurrentDebugLocation2(Builder: LLVMBuilderRef, Loc: LLVMMetadataRef) -> void;
extern fn LLVMSetInstDebugLocation(Builder: LLVMBuilderRef, Inst: LLVMValueRef) -> void;
extern fn LLVMAddMetadataToInst(Builder: LLVMBuilderRef, Inst: LLVMValueRef) -> void;
extern fn LLVMBuilderGetDefaultFPMathTag(Builder: LLVMBuilderRef) -> LLVMMetadataRef;
extern fn LLVMBuilderSetDefaultFPMathTag(Builder: LLVMBuilderRef, FPMathTag: LLVMMetadataRef) -> void;
extern fn LLVMSetCurrentDebugLocation(Builder: LLVMBuilderRef, L: LLVMValueRef) -> void;
extern fn LLVMGetCurrentDebugLocation(Builder: LLVMBuilderRef) -> LLVMValueRef;
extern fn LLVMBuildRetVoid(param0: LLVMBuilderRef) -> LLVMValueRef;
extern fn LLVMBuildRet(param0: LLVMBuilderRef, V: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMBuildAggregateRet(param0: LLVMBuilderRef, RetVals: *mut LLVMValueRef, N: u32) -> LLVMValueRef;
extern fn LLVMBuildBr(param0: LLVMBuilderRef, Dest: LLVMBasicBlockRef) -> LLVMValueRef;
extern fn LLVMBuildCondBr(param0: LLVMBuilderRef, If: LLVMValueRef, Then: LLVMBasicBlockRef, Else: LLVMBasicBlockRef) -> LLVMValueRef;
extern fn LLVMBuildSwitch(param0: LLVMBuilderRef, V: LLVMValueRef, Else: LLVMBasicBlockRef, NumCases: u32) -> LLVMValueRef;
extern fn LLVMBuildIndirectBr(B: LLVMBuilderRef, Addr: LLVMValueRef, NumDests: u32) -> LLVMValueRef;
extern fn LLVMBuildCallBr(B: LLVMBuilderRef, Ty: LLVMTypeRef, Fn: LLVMValueRef, DefaultDest: LLVMBasicBlockRef, IndirectDests: *mut LLVMBasicBlockRef, NumIndirectDests: u32, Args: *mut LLVMValueRef, NumArgs: u32, Bundles: *mut LLVMOperandBundleRef, NumBundles: u32, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildInvoke2(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Fn: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Then: LLVMBasicBlockRef, Catch: LLVMBasicBlockRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildInvokeWithOperandBundles(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Fn: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Then: LLVMBasicBlockRef, Catch: LLVMBasicBlockRef, Bundles: *mut LLVMOperandBundleRef, NumBundles: u32, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildUnreachable(param0: LLVMBuilderRef) -> LLVMValueRef;
extern fn LLVMBuildResume(B: LLVMBuilderRef, Exn: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMBuildLandingPad(B: LLVMBuilderRef, Ty: LLVMTypeRef, PersFn: LLVMValueRef, NumClauses: u32, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildCleanupRet(B: LLVMBuilderRef, CatchPad: LLVMValueRef, BB: LLVMBasicBlockRef) -> LLVMValueRef;
extern fn LLVMBuildCatchRet(B: LLVMBuilderRef, CatchPad: LLVMValueRef, BB: LLVMBasicBlockRef) -> LLVMValueRef;
extern fn LLVMBuildCatchPad(B: LLVMBuilderRef, ParentPad: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildCleanupPad(B: LLVMBuilderRef, ParentPad: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildCatchSwitch(B: LLVMBuilderRef, ParentPad: LLVMValueRef, UnwindBB: LLVMBasicBlockRef, NumHandlers: u32, Name: *const u8) -> LLVMValueRef;
extern fn LLVMAddCase(Switch: LLVMValueRef, OnVal: LLVMValueRef, Dest: LLVMBasicBlockRef) -> void;
extern fn LLVMAddDestination(IndirectBr: LLVMValueRef, Dest: LLVMBasicBlockRef) -> void;
extern fn LLVMGetNumClauses(LandingPad: LLVMValueRef) -> u32;
extern fn LLVMGetClause(LandingPad: LLVMValueRef, Idx: u32) -> LLVMValueRef;
extern fn LLVMAddClause(LandingPad: LLVMValueRef, ClauseVal: LLVMValueRef) -> void;
extern fn LLVMIsCleanup(LandingPad: LLVMValueRef) -> bool;
extern fn LLVMSetCleanup(LandingPad: LLVMValueRef, Val: bool) -> void;
extern fn LLVMAddHandler(CatchSwitch: LLVMValueRef, Dest: LLVMBasicBlockRef) -> void;
extern fn LLVMGetNumHandlers(CatchSwitch: LLVMValueRef) -> u32;
extern fn LLVMGetHandlers(CatchSwitch: LLVMValueRef, Handlers: *mut LLVMBasicBlockRef) -> void;
extern fn LLVMGetArgOperand(Funclet: LLVMValueRef, i: u32) -> LLVMValueRef;
extern fn LLVMSetArgOperand(Funclet: LLVMValueRef, i: u32, value: LLVMValueRef) -> void;
extern fn LLVMGetParentCatchSwitch(CatchPad: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMSetParentCatchSwitch(CatchPad: LLVMValueRef, CatchSwitch: LLVMValueRef) -> void;
extern fn LLVMBuildAdd(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildNSWAdd(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildNUWAdd(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFAdd(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildSub(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildNSWSub(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildNUWSub(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFSub(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildMul(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildNSWMul(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildNUWMul(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFMul(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildUDiv(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildExactUDiv(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildSDiv(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildExactSDiv(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFDiv(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildURem(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildSRem(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFRem(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildShl(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildLShr(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildAShr(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildAnd(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildOr(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildXor(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildBinOp(B: LLVMBuilderRef, Op: LLVMOpcode, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildNeg(param0: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildNSWNeg(B: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildNUWNeg(B: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFNeg(param0: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildNot(param0: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMGetNUW(ArithInst: LLVMValueRef) -> bool;
extern fn LLVMSetNUW(ArithInst: LLVMValueRef, HasNUW: bool) -> void;
extern fn LLVMGetNSW(ArithInst: LLVMValueRef) -> bool;
extern fn LLVMSetNSW(ArithInst: LLVMValueRef, HasNSW: bool) -> void;
extern fn LLVMGetExact(DivOrShrInst: LLVMValueRef) -> bool;
extern fn LLVMSetExact(DivOrShrInst: LLVMValueRef, IsExact: bool) -> void;
extern fn LLVMGetNNeg(NonNegInst: LLVMValueRef) -> bool;
extern fn LLVMSetNNeg(NonNegInst: LLVMValueRef, IsNonNeg: bool) -> void;
extern fn LLVMGetFastMathFlags(FPMathInst: LLVMValueRef) -> LLVMFastMathFlags;
extern fn LLVMSetFastMathFlags(FPMathInst: LLVMValueRef, FMF: LLVMFastMathFlags) -> void;
extern fn LLVMCanValueUseFastMathFlags(Inst: LLVMValueRef) -> bool;
extern fn LLVMGetIsDisjoint(Inst: LLVMValueRef) -> bool;
extern fn LLVMSetIsDisjoint(Inst: LLVMValueRef, IsDisjoint: bool) -> void;
extern fn LLVMBuildMalloc(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildArrayMalloc(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildMemSet(B: LLVMBuilderRef, Ptr: LLVMValueRef, Val: LLVMValueRef, Len: LLVMValueRef, Align: u32) -> LLVMValueRef;
extern fn LLVMBuildMemCpy(B: LLVMBuilderRef, Dst: LLVMValueRef, DstAlign: u32, Src: LLVMValueRef, SrcAlign: u32, Size: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMBuildMemMove(B: LLVMBuilderRef, Dst: LLVMValueRef, DstAlign: u32, Src: LLVMValueRef, SrcAlign: u32, Size: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMBuildAlloca(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildArrayAlloca(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFree(param0: LLVMBuilderRef, PointerVal: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMBuildLoad2(param0: LLVMBuilderRef, Ty: LLVMTypeRef, PointerVal: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildStore(param0: LLVMBuilderRef, Val: LLVMValueRef, Ptr: LLVMValueRef) -> LLVMValueRef;
extern fn LLVMBuildGEP2(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: *mut LLVMValueRef, NumIndices: u32, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildInBoundsGEP2(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: *mut LLVMValueRef, NumIndices: u32, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildGEPWithNoWrapFlags(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: *mut LLVMValueRef, NumIndices: u32, Name: *const u8, NoWrapFlags: LLVMGEPNoWrapFlags) -> LLVMValueRef;
extern fn LLVMBuildStructGEP2(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Idx: u32, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildGlobalString(B: LLVMBuilderRef, Str: *const u8, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildGlobalStringPtr(B: LLVMBuilderRef, Str: *const u8, Name: *const u8) -> LLVMValueRef;
extern fn LLVMGetVolatile(MemoryAccessInst: LLVMValueRef) -> bool;
extern fn LLVMSetVolatile(MemoryAccessInst: LLVMValueRef, IsVolatile: bool) -> void;
extern fn LLVMGetWeak(CmpXchgInst: LLVMValueRef) -> bool;
extern fn LLVMSetWeak(CmpXchgInst: LLVMValueRef, IsWeak: bool) -> void;
extern fn LLVMGetOrdering(MemoryAccessInst: LLVMValueRef) -> LLVMAtomicOrdering;
extern fn LLVMSetOrdering(MemoryAccessInst: LLVMValueRef, Ordering: LLVMAtomicOrdering) -> void;
extern fn LLVMGetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef) -> LLVMAtomicRMWBinOp;
extern fn LLVMSetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef, BinOp: LLVMAtomicRMWBinOp) -> void;
extern fn LLVMBuildTrunc(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildZExt(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildSExt(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFPToUI(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFPToSI(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildUIToFP(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildSIToFP(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFPTrunc(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFPExt(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildPtrToInt(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildIntToPtr(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildBitCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildAddrSpaceCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildZExtOrBitCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildSExtOrBitCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildTruncOrBitCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildCast(B: LLVMBuilderRef, Op: LLVMOpcode, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildPointerCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildIntCast2(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, IsSigned: bool, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFPCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildIntCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMGetCastOpcode(Src: LLVMValueRef, SrcIsSigned: bool, DestTy: LLVMTypeRef, DestIsSigned: bool) -> LLVMOpcode;
extern fn LLVMBuildICmp(param0: LLVMBuilderRef, Op: LLVMIntPredicate, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFCmp(param0: LLVMBuilderRef, Op: LLVMRealPredicate, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildPhi(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildCall2(param0: LLVMBuilderRef, param1: LLVMTypeRef, Fn: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildCallWithOperandBundles(param0: LLVMBuilderRef, param1: LLVMTypeRef, Fn: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Bundles: *mut LLVMOperandBundleRef, NumBundles: u32, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildSelect(param0: LLVMBuilderRef, If: LLVMValueRef, Then: LLVMValueRef, Else: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildVAArg(param0: LLVMBuilderRef, List: LLVMValueRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildExtractElement(param0: LLVMBuilderRef, VecVal: LLVMValueRef, Index: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildInsertElement(param0: LLVMBuilderRef, VecVal: LLVMValueRef, EltVal: LLVMValueRef, Index: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildShuffleVector(param0: LLVMBuilderRef, V1: LLVMValueRef, V2: LLVMValueRef, Mask: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildExtractValue(param0: LLVMBuilderRef, AggVal: LLVMValueRef, Index: u32, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildInsertValue(param0: LLVMBuilderRef, AggVal: LLVMValueRef, EltVal: LLVMValueRef, Index: u32, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFreeze(param0: LLVMBuilderRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildIsNull(param0: LLVMBuilderRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildIsNotNull(param0: LLVMBuilderRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildPtrDiff2(param0: LLVMBuilderRef, ElemTy: LLVMTypeRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildFence(B: LLVMBuilderRef, ordering: LLVMAtomicOrdering, singleThread: bool, Name: *const u8) -> LLVMValueRef;
extern fn LLVMBuildAtomicRMW(B: LLVMBuilderRef, op: LLVMAtomicRMWBinOp, PTR: LLVMValueRef, Val: LLVMValueRef, ordering: LLVMAtomicOrdering, singleThread: bool) -> LLVMValueRef;
extern fn LLVMBuildAtomicCmpXchg(B: LLVMBuilderRef, Ptr: LLVMValueRef, Cmp: LLVMValueRef, New: LLVMValueRef, SuccessOrdering: LLVMAtomicOrdering, FailureOrdering: LLVMAtomicOrdering, SingleThread: bool) -> LLVMValueRef;
extern fn LLVMGetNumMaskElements(ShuffleVectorInst: LLVMValueRef) -> u32;
extern fn LLVMGetUndefMaskElem() -> s32;
extern fn LLVMGetMaskValue(ShuffleVectorInst: LLVMValueRef, Elt: u32) -> s32;
extern fn LLVMIsAtomicSingleThread(AtomicInst: LLVMValueRef) -> bool;
extern fn LLVMSetAtomicSingleThread(AtomicInst: LLVMValueRef, SingleThread: bool) -> void;
extern fn LLVMGetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef) -> LLVMAtomicOrdering;
extern fn LLVMSetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering) -> void;
extern fn LLVMGetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef) -> LLVMAtomicOrdering;
extern fn LLVMSetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering) -> void;
extern fn LLVMCreateModuleProviderForExistingModule(M: LLVMModuleRef) -> LLVMModuleProviderRef;
extern fn LLVMDisposeModuleProvider(M: LLVMModuleProviderRef) -> void;
extern fn LLVMCreateMemoryBufferWithContentsOfFile(Path: *const u8, OutMemBuf: *mut LLVMMemoryBufferRef, OutMessage: *mut *mut u8) -> bool;
extern fn LLVMCreateMemoryBufferWithSTDIN(OutMemBuf: *mut LLVMMemoryBufferRef, OutMessage: *mut *mut u8) -> bool;
extern fn LLVMCreateMemoryBufferWithMemoryRange(InputData: *const u8, InputDataLength: u64, BufferName: *const u8, RequiresNullTerminator: bool) -> LLVMMemoryBufferRef;
extern fn LLVMCreateMemoryBufferWithMemoryRangeCopy(InputData: *const u8, InputDataLength: u64, BufferName: *const u8) -> LLVMMemoryBufferRef;
extern fn LLVMGetBufferStart(MemBuf: LLVMMemoryBufferRef) -> *const u8;
extern fn LLVMGetBufferSize(MemBuf: LLVMMemoryBufferRef) -> u64;
extern fn LLVMDisposeMemoryBuffer(MemBuf: LLVMMemoryBufferRef) -> void;
extern fn LLVMCreatePassManager() -> LLVMPassManagerRef;
extern fn LLVMCreateFunctionPassManagerForModule(M: LLVMModuleRef) -> LLVMPassManagerRef;
extern fn LLVMCreateFunctionPassManager(MP: LLVMModuleProviderRef) -> LLVMPassManagerRef;
extern fn LLVMRunPassManager(PM: LLVMPassManagerRef, M: LLVMModuleRef) -> bool;
extern fn LLVMInitializeFunctionPassManager(FPM: LLVMPassManagerRef) -> bool;
extern fn LLVMRunFunctionPassManager(FPM: LLVMPassManagerRef, F: LLVMValueRef) -> bool;
extern fn LLVMFinalizeFunctionPassManager(FPM: LLVMPassManagerRef) -> bool;
extern fn LLVMDisposePassManager(PM: LLVMPassManagerRef) -> void;
extern fn LLVMStartMultithreaded() -> bool;
extern fn LLVMStopMultithreaded() -> void;
extern fn LLVMIsMultithreaded() -> bool;
enum LLVMDIFlags {
  LLVMDIFlagZero = 0,
  LLVMDIFlagPrivate = 1,
  LLVMDIFlagProtected = 2,
  LLVMDIFlagPublic = 3,
  LLVMDIFlagFwdDecl = 4,
  LLVMDIFlagAppleBlock = 8,
  LLVMDIFlagReservedBit4 = 16,
  LLVMDIFlagVirtual = 32,
  LLVMDIFlagArtificial = 64,
  LLVMDIFlagExplicit = 128,
  LLVMDIFlagPrototyped = 256,
  LLVMDIFlagObjcClassComplete = 512,
  LLVMDIFlagObjectPointer = 1024,
  LLVMDIFlagVector = 2048,
  LLVMDIFlagStaticMember = 4096,
  LLVMDIFlagLValueReference = 8192,
  LLVMDIFlagRValueReference = 16384,
  LLVMDIFlagReserved = 32768,
  LLVMDIFlagSingleInheritance = 65536,
  LLVMDIFlagMultipleInheritance = 131072,
  LLVMDIFlagVirtualInheritance = 196608,
  LLVMDIFlagIntroducedVirtual = 262144,
  LLVMDIFlagBitField = 524288,
  LLVMDIFlagNoReturn = 1048576,
  LLVMDIFlagTypePassByValue = 4194304,
  LLVMDIFlagTypePassByReference = 8388608,
  LLVMDIFlagEnumClass = 16777216,
  LLVMDIFlagFixedEnum = 16777216,
  LLVMDIFlagThunk = 33554432,
  LLVMDIFlagNonTrivial = 67108864,
  LLVMDIFlagBigEndian = 134217728,
  LLVMDIFlagLittleEndian = 268435456,
  LLVMDIFlagIndirectVirtualBase = 36,
  LLVMDIFlagAccessibility = 3,
  LLVMDIFlagPtrToMemberRep = 196608,
};
enum LLVMDWARFSourceLanguage {
  LLVMDWARFSourceLanguageC89 = 0,
  LLVMDWARFSourceLanguageC = 1,
  LLVMDWARFSourceLanguageAda83 = 2,
  LLVMDWARFSourceLanguageC_plus_plus = 3,
  LLVMDWARFSourceLanguageCobol74 = 4,
  LLVMDWARFSourceLanguageCobol85 = 5,
  LLVMDWARFSourceLanguageFortran77 = 6,
  LLVMDWARFSourceLanguageFortran90 = 7,
  LLVMDWARFSourceLanguagePascal83 = 8,
  LLVMDWARFSourceLanguageModula2 = 9,
  LLVMDWARFSourceLanguageJava = 10,
  LLVMDWARFSourceLanguageC99 = 11,
  LLVMDWARFSourceLanguageAda95 = 12,
  LLVMDWARFSourceLanguageFortran95 = 13,
  LLVMDWARFSourceLanguagePLI = 14,
  LLVMDWARFSourceLanguageObjC = 15,
  LLVMDWARFSourceLanguageObjC_plus_plus = 16,
  LLVMDWARFSourceLanguageUPC = 17,
  LLVMDWARFSourceLanguageD = 18,
  LLVMDWARFSourceLanguagePython = 19,
  LLVMDWARFSourceLanguageOpenCL = 20,
  LLVMDWARFSourceLanguageGo = 21,
  LLVMDWARFSourceLanguageModula3 = 22,
  LLVMDWARFSourceLanguageHaskell = 23,
  LLVMDWARFSourceLanguageC_plus_plus_03 = 24,
  LLVMDWARFSourceLanguageC_plus_plus_11 = 25,
  LLVMDWARFSourceLanguageOCaml = 26,
  LLVMDWARFSourceLanguageRust = 27,
  LLVMDWARFSourceLanguageC11 = 28,
  LLVMDWARFSourceLanguageSwift = 29,
  LLVMDWARFSourceLanguageJulia = 30,
  LLVMDWARFSourceLanguageDylan = 31,
  LLVMDWARFSourceLanguageC_plus_plus_14 = 32,
  LLVMDWARFSourceLanguageFortran03 = 33,
  LLVMDWARFSourceLanguageFortran08 = 34,
  LLVMDWARFSourceLanguageRenderScript = 35,
  LLVMDWARFSourceLanguageBLISS = 36,
  LLVMDWARFSourceLanguageKotlin = 37,
  LLVMDWARFSourceLanguageZig = 38,
  LLVMDWARFSourceLanguageCrystal = 39,
  LLVMDWARFSourceLanguageC_plus_plus_17 = 40,
  LLVMDWARFSourceLanguageC_plus_plus_20 = 41,
  LLVMDWARFSourceLanguageC17 = 42,
  LLVMDWARFSourceLanguageFortran18 = 43,
  LLVMDWARFSourceLanguageAda2005 = 44,
  LLVMDWARFSourceLanguageAda2012 = 45,
  LLVMDWARFSourceLanguageHIP = 46,
  LLVMDWARFSourceLanguageAssembly = 47,
  LLVMDWARFSourceLanguageC_sharp = 48,
  LLVMDWARFSourceLanguageMojo = 49,
  LLVMDWARFSourceLanguageGLSL = 50,
  LLVMDWARFSourceLanguageGLSL_ES = 51,
  LLVMDWARFSourceLanguageHLSL = 52,
  LLVMDWARFSourceLanguageOpenCL_CPP = 53,
  LLVMDWARFSourceLanguageCPP_for_OpenCL = 54,
  LLVMDWARFSourceLanguageSYCL = 55,
  LLVMDWARFSourceLanguageRuby = 56,
  LLVMDWARFSourceLanguageMove = 57,
  LLVMDWARFSourceLanguageHylo = 58,
  LLVMDWARFSourceLanguageMips_Assembler = 59,
  LLVMDWARFSourceLanguageGOOGLE_RenderScript = 60,
  LLVMDWARFSourceLanguageBORLAND_Delphi = 61,
};
enum LLVMDWARFEmissionKind {
  LLVMDWARFEmissionNone = 0,
  LLVMDWARFEmissionFull = 1,
  LLVMDWARFEmissionLineTablesOnly = 2,
};
enum __bind_gen__anon_D7 {
  LLVMMDStringMetadataKind = 0,
  LLVMConstantAsMetadataMetadataKind = 1,
  LLVMLocalAsMetadataMetadataKind = 2,
  LLVMDistinctMDOperandPlaceholderMetadataKind = 3,
  LLVMMDTupleMetadataKind = 4,
  LLVMDILocationMetadataKind = 5,
  LLVMDIExpressionMetadataKind = 6,
  LLVMDIGlobalVariableExpressionMetadataKind = 7,
  LLVMGenericDINodeMetadataKind = 8,
  LLVMDISubrangeMetadataKind = 9,
  LLVMDIEnumeratorMetadataKind = 10,
  LLVMDIBasicTypeMetadataKind = 11,
  LLVMDIDerivedTypeMetadataKind = 12,
  LLVMDICompositeTypeMetadataKind = 13,
  LLVMDISubroutineTypeMetadataKind = 14,
  LLVMDIFileMetadataKind = 15,
  LLVMDICompileUnitMetadataKind = 16,
  LLVMDISubprogramMetadataKind = 17,
  LLVMDILexicalBlockMetadataKind = 18,
  LLVMDILexicalBlockFileMetadataKind = 19,
  LLVMDINamespaceMetadataKind = 20,
  LLVMDIModuleMetadataKind = 21,
  LLVMDITemplateTypeParameterMetadataKind = 22,
  LLVMDITemplateValueParameterMetadataKind = 23,
  LLVMDIGlobalVariableMetadataKind = 24,
  LLVMDILocalVariableMetadataKind = 25,
  LLVMDILabelMetadataKind = 26,
  LLVMDIObjCPropertyMetadataKind = 27,
  LLVMDIImportedEntityMetadataKind = 28,
  LLVMDIMacroMetadataKind = 29,
  LLVMDIMacroFileMetadataKind = 30,
  LLVMDICommonBlockMetadataKind = 31,
  LLVMDIStringTypeMetadataKind = 32,
  LLVMDIGenericSubrangeMetadataKind = 33,
  LLVMDIArgListMetadataKind = 34,
  LLVMDIAssignIDMetadataKind = 35,
};
type LLVMMetadataKind :: u32;
type LLVMDWARFTypeEncoding :: u32;
enum LLVMDWARFMacinfoRecordType {
  LLVMDWARFMacinfoRecordTypeDefine = 1,
  LLVMDWARFMacinfoRecordTypeMacro = 2,
  LLVMDWARFMacinfoRecordTypeStartFile = 3,
  LLVMDWARFMacinfoRecordTypeEndFile = 4,
  LLVMDWARFMacinfoRecordTypeVendorExt = 255,
};
extern fn LLVMDebugMetadataVersion() -> u32;
extern fn LLVMGetModuleDebugMetadataVersion(Module: LLVMModuleRef) -> u32;
extern fn LLVMStripModuleDebugInfo(Module: LLVMModuleRef) -> bool;
extern fn LLVMCreateDIBuilderDisallowUnresolved(M: LLVMModuleRef) -> LLVMDIBuilderRef;
extern fn LLVMCreateDIBuilder(M: LLVMModuleRef) -> LLVMDIBuilderRef;
extern fn LLVMDisposeDIBuilder(Builder: LLVMDIBuilderRef) -> void;
extern fn LLVMDIBuilderFinalize(Builder: LLVMDIBuilderRef) -> void;
extern fn LLVMDIBuilderFinalizeSubprogram(Builder: LLVMDIBuilderRef, Subprogram: LLVMMetadataRef) -> void;
extern fn LLVMDIBuilderCreateCompileUnit(Builder: LLVMDIBuilderRef, Lang: LLVMDWARFSourceLanguage, FileRef: LLVMMetadataRef, Producer: *const u8, ProducerLen: u64, isOptimized: bool, Flags: *const u8, FlagsLen: u64, RuntimeVer: u32, SplitName: *const u8, SplitNameLen: u64, Kind: LLVMDWARFEmissionKind, DWOId: u32, SplitDebugInlining: bool, DebugInfoForProfiling: bool, SysRoot: *const u8, SysRootLen: u64, SDK: *const u8, SDKLen: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateFile(Builder: LLVMDIBuilderRef, Filename: *const u8, FilenameLen: u64, Directory: *const u8, DirectoryLen: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateModule(Builder: LLVMDIBuilderRef, ParentScope: LLVMMetadataRef, Name: *const u8, NameLen: u64, ConfigMacros: *const u8, ConfigMacrosLen: u64, IncludePath: *const u8, IncludePathLen: u64, APINotesFile: *const u8, APINotesFileLen: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateNameSpace(Builder: LLVMDIBuilderRef, ParentScope: LLVMMetadataRef, Name: *const u8, NameLen: u64, ExportSymbols: bool) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateLexicalBlock(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, Column: u32) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateLexicalBlockFile(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Discriminator: u32) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateImportedModuleFromNamespace(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, NS: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateImportedModuleFromAlias(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, ImportedEntity: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, Elements: *mut LLVMMetadataRef, NumElements: u32) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateImportedModuleFromModule(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, M: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, Elements: *mut LLVMMetadataRef, NumElements: u32) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateImportedDeclaration(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Decl: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, Name: *const u8, NameLen: u64, Elements: *mut LLVMMetadataRef, NumElements: u32) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateDebugLocation(Ctx: LLVMContextRef, Line: u32, Column: u32, Scope: LLVMMetadataRef, InlinedAt: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDILocationGetLine(Location: LLVMMetadataRef) -> u32;
extern fn LLVMDILocationGetColumn(Location: LLVMMetadataRef) -> u32;
extern fn LLVMDILocationGetScope(Location: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDILocationGetInlinedAt(Location: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIScopeGetFile(Scope: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIFileGetDirectory(File: LLVMMetadataRef, Len: *mut u32) -> *const u8;
extern fn LLVMDIFileGetFilename(File: LLVMMetadataRef, Len: *mut u32) -> *const u8;
extern fn LLVMDIFileGetSource(File: LLVMMetadataRef, Len: *mut u32) -> *const u8;
extern fn LLVMDIBuilderGetOrCreateTypeArray(Builder: LLVMDIBuilderRef, Data: *mut LLVMMetadataRef, NumElements: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateSubroutineType(Builder: LLVMDIBuilderRef, File: LLVMMetadataRef, ParameterTypes: *mut LLVMMetadataRef, NumParameterTypes: u32, Flags: LLVMDIFlags) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateMacro(Builder: LLVMDIBuilderRef, ParentMacroFile: LLVMMetadataRef, Line: u32, RecordType: LLVMDWARFMacinfoRecordType, Name: *const u8, NameLen: u64, Value: *const u8, ValueLen: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateTempMacroFile(Builder: LLVMDIBuilderRef, ParentMacroFile: LLVMMetadataRef, Line: u32, File: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateEnumerator(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64, Value: s64, IsUnsigned: bool) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateEnumerationType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, Elements: *mut LLVMMetadataRef, NumElements: u32, ClassTy: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateUnionType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags, Elements: *mut LLVMMetadataRef, NumElements: u32, RunTimeLang: u32, UniqueId: *const u8, UniqueIdLen: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateArrayType(Builder: LLVMDIBuilderRef, Size: u64, AlignInBits: u32, Ty: LLVMMetadataRef, Subscripts: *mut LLVMMetadataRef, NumSubscripts: u32) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateVectorType(Builder: LLVMDIBuilderRef, Size: u64, AlignInBits: u32, Ty: LLVMMetadataRef, Subscripts: *mut LLVMMetadataRef, NumSubscripts: u32) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateUnspecifiedType(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateBasicType(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64, SizeInBits: u64, Encoding: LLVMDWARFTypeEncoding, Flags: LLVMDIFlags) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreatePointerType(Builder: LLVMDIBuilderRef, PointeeTy: LLVMMetadataRef, SizeInBits: u64, AlignInBits: u32, AddressSpace: u32, Name: *const u8, NameLen: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateStructType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags, DerivedFrom: LLVMMetadataRef, Elements: *mut LLVMMetadataRef, NumElements: u32, RunTimeLang: u32, VTableHolder: LLVMMetadataRef, UniqueId: *const u8, UniqueIdLen: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateMemberType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, SizeInBits: u64, AlignInBits: u32, OffsetInBits: u64, Flags: LLVMDIFlags, Ty: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateStaticMemberType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, Type: LLVMMetadataRef, Flags: LLVMDIFlags, ConstantVal: LLVMValueRef, AlignInBits: u32) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateMemberPointerType(Builder: LLVMDIBuilderRef, PointeeType: LLVMMetadataRef, ClassType: LLVMMetadataRef, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateObjCIVar(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, SizeInBits: u64, AlignInBits: u32, OffsetInBits: u64, Flags: LLVMDIFlags, Ty: LLVMMetadataRef, PropertyNode: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateObjCProperty(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, GetterName: *const u8, GetterNameLen: u64, SetterName: *const u8, SetterNameLen: u64, PropertyAttributes: u32, Ty: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateObjectPointerType(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateQualifiedType(Builder: LLVMDIBuilderRef, Tag: u32, Type: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateReferenceType(Builder: LLVMDIBuilderRef, Tag: u32, Type: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateNullPtrType(Builder: LLVMDIBuilderRef) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateTypedef(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, Scope: LLVMMetadataRef, AlignInBits: u32) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateInheritance(Builder: LLVMDIBuilderRef, Ty: LLVMMetadataRef, BaseTy: LLVMMetadataRef, BaseOffset: u64, VBPtrOffset: u32, Flags: LLVMDIFlags) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateForwardDecl(Builder: LLVMDIBuilderRef, Tag: u32, Name: *const u8, NameLen: u64, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, RuntimeLang: u32, SizeInBits: u64, AlignInBits: u32, UniqueIdentifier: *const u8, UniqueIdentifierLen: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateReplaceableCompositeType(Builder: LLVMDIBuilderRef, Tag: u32, Name: *const u8, NameLen: u64, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, RuntimeLang: u32, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags, UniqueIdentifier: *const u8, UniqueIdentifierLen: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateBitFieldMemberType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, OffsetInBits: u64, StorageOffsetInBits: u64, Flags: LLVMDIFlags, Type: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateClassType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, OffsetInBits: u64, Flags: LLVMDIFlags, DerivedFrom: LLVMMetadataRef, Elements: *mut LLVMMetadataRef, NumElements: u32, VTableHolder: LLVMMetadataRef, TemplateParamsNode: LLVMMetadataRef, UniqueIdentifier: *const u8, UniqueIdentifierLen: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateArtificialType(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDITypeGetName(DType: LLVMMetadataRef, Length: *mut u64) -> *const u8;
extern fn LLVMDITypeGetSizeInBits(DType: LLVMMetadataRef) -> u64;
extern fn LLVMDITypeGetOffsetInBits(DType: LLVMMetadataRef) -> u64;
extern fn LLVMDITypeGetAlignInBits(DType: LLVMMetadataRef) -> u32;
extern fn LLVMDITypeGetLine(DType: LLVMMetadataRef) -> u32;
extern fn LLVMDITypeGetFlags(DType: LLVMMetadataRef) -> LLVMDIFlags;
extern fn LLVMDIBuilderGetOrCreateSubrange(Builder: LLVMDIBuilderRef, LowerBound: s64, Count: s64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderGetOrCreateArray(Builder: LLVMDIBuilderRef, Data: *mut LLVMMetadataRef, NumElements: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateExpression(Builder: LLVMDIBuilderRef, Addr: *mut u64, Length: u64) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateConstantValueExpression(Builder: LLVMDIBuilderRef, Value: u64) -> LLVMMetadataRef;
extern fn LLVMGetDINodeTag(MD: LLVMMetadataRef) -> u16;
extern fn LLVMDIGlobalVariableExpressionGetVariable(GVE: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIGlobalVariableExpressionGetExpression(GVE: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIVariableGetFile(Var: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIVariableGetScope(Var: LLVMMetadataRef) -> LLVMMetadataRef;
extern fn LLVMDIVariableGetLine(Var: LLVMMetadataRef) -> u32;
extern fn LLVMTemporaryMDNode(Ctx: LLVMContextRef, Data: *mut LLVMMetadataRef, NumElements: u64) -> LLVMMetadataRef;
extern fn LLVMDisposeTemporaryMDNode(TempNode: LLVMMetadataRef) -> void;
extern fn LLVMMetadataReplaceAllUsesWith(TempTargetMetadata: LLVMMetadataRef, Replacement: LLVMMetadataRef) -> void;
extern fn LLVMDIBuilderInsertDeclareRecordBefore(Builder: LLVMDIBuilderRef, Storage: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Instr: LLVMValueRef) -> LLVMDbgRecordRef;
extern fn LLVMDIBuilderInsertDeclareRecordAtEnd(Builder: LLVMDIBuilderRef, Storage: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Block: LLVMBasicBlockRef) -> LLVMDbgRecordRef;
extern fn LLVMDIBuilderInsertDbgValueRecordBefore(Builder: LLVMDIBuilderRef, Val: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Instr: LLVMValueRef) -> LLVMDbgRecordRef;
extern fn LLVMDIBuilderInsertDbgValueRecordAtEnd(Builder: LLVMDIBuilderRef, Val: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Block: LLVMBasicBlockRef) -> LLVMDbgRecordRef;
extern fn LLVMDIBuilderCreateAutoVariable(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, Ty: LLVMMetadataRef, AlwaysPreserve: bool, Flags: LLVMDIFlags, AlignInBits: u32) -> LLVMMetadataRef;
extern fn LLVMDIBuilderCreateParameterVariable(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, ArgNo: u32, File: LLVMMetadataRef, LineNo: u32, Ty: LLVMMetadataRef, AlwaysPreserve: bool, Flags: LLVMDIFlags) -> LLVMMetadataRef;
extern fn LLVMGetSubprogram(Func: LLVMValueRef) -> LLVMMetadataRef;
extern fn LLVMSetSubprogram(Func: LLVMValueRef, SP: LLVMMetadataRef) -> void;
extern fn LLVMDISubprogramGetLine(Subprogram: LLVMMetadataRef) -> u32;
extern fn LLVMInstructionGetDebugLoc(Inst: LLVMValueRef) -> LLVMMetadataRef;
extern fn LLVMInstructionSetDebugLoc(Inst: LLVMValueRef, Loc: LLVMMetadataRef) -> void;
extern fn LLVMGetMetadataKind(Metadata: LLVMMetadataRef) -> LLVMMetadataKind;
type LLVMDisasmContextRef :: *mut void;
type LLVMOpInfoCallback :: fn(*mut void, u64, u64, u64, u64, s32, *mut void) -> s32;
struct LLVMOpInfoSymbol1 {
  Present: u64,
  Name: *const u8,
  Value: u64,
};
struct LLVMOpInfo1 {
  AddSymbol: LLVMOpInfoSymbol1,
  SubtractSymbol: LLVMOpInfoSymbol1,
  Value: u64,
  VariantKind: u64,
};
type LLVMSymbolLookupCallback :: fn(*mut void, u64, *mut u64, u64, *mut *const u8) -> *const u8;
extern fn LLVMCreateDisasm(TripleName: *const u8, DisInfo: *mut void, TagType: s32, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback) -> LLVMDisasmContextRef;
extern fn LLVMCreateDisasmCPU(Triple: *const u8, CPU: *const u8, DisInfo: *mut void, TagType: s32, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback) -> LLVMDisasmContextRef;
extern fn LLVMCreateDisasmCPUFeatures(Triple: *const u8, CPU: *const u8, Features: *const u8, DisInfo: *mut void, TagType: s32, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback) -> LLVMDisasmContextRef;
extern fn LLVMSetDisasmOptions(DC: LLVMDisasmContextRef, Options: u64) -> s32;
extern fn LLVMDisasmDispose(DC: LLVMDisasmContextRef) -> void;
extern fn LLVMDisasmInstruction(DC: LLVMDisasmContextRef, Bytes: *mut u8, BytesSize: u64, PC: u64, OutString: *mut u8, OutStringSize: u64) -> u64;
struct LLVMOpaqueError;
type LLVMErrorRef :: *mut LLVMOpaqueError;
type LLVMErrorTypeId :: *const void;
extern fn LLVMGetErrorTypeId(Err: LLVMErrorRef) -> LLVMErrorTypeId;
extern fn LLVMConsumeError(Err: LLVMErrorRef) -> void;
extern fn LLVMGetErrorMessage(Err: LLVMErrorRef) -> *mut u8;
extern fn LLVMDisposeErrorMessage(ErrMsg: *mut u8) -> void;
extern fn LLVMGetStringErrorTypeId() -> LLVMErrorTypeId;
extern fn LLVMCreateStringError(ErrMsg: *const u8) -> LLVMErrorRef;
enum LLVMByteOrdering {
  LLVMBigEndian = 0,
  LLVMLittleEndian = 1,
};
struct LLVMOpaqueTargetData;
type LLVMTargetDataRef :: *mut LLVMOpaqueTargetData;
struct LLVMOpaqueTargetLibraryInfotData;
type LLVMTargetLibraryInfoRef :: *mut LLVMOpaqueTargetLibraryInfotData;
extern fn LLVMInitializeAArch64TargetInfo() -> void;
extern fn LLVMInitializeAMDGPUTargetInfo() -> void;
extern fn LLVMInitializeARMTargetInfo() -> void;
extern fn LLVMInitializeAVRTargetInfo() -> void;
extern fn LLVMInitializeBPFTargetInfo() -> void;
extern fn LLVMInitializeHexagonTargetInfo() -> void;
extern fn LLVMInitializeLanaiTargetInfo() -> void;
extern fn LLVMInitializeLoongArchTargetInfo() -> void;
extern fn LLVMInitializeMipsTargetInfo() -> void;
extern fn LLVMInitializeMSP430TargetInfo() -> void;
extern fn LLVMInitializeNVPTXTargetInfo() -> void;
extern fn LLVMInitializePowerPCTargetInfo() -> void;
extern fn LLVMInitializeRISCVTargetInfo() -> void;
extern fn LLVMInitializeSparcTargetInfo() -> void;
extern fn LLVMInitializeSystemZTargetInfo() -> void;
extern fn LLVMInitializeVETargetInfo() -> void;
extern fn LLVMInitializeWebAssemblyTargetInfo() -> void;
extern fn LLVMInitializeX86TargetInfo() -> void;
extern fn LLVMInitializeXCoreTargetInfo() -> void;
extern fn LLVMInitializeAArch64Target() -> void;
extern fn LLVMInitializeAMDGPUTarget() -> void;
extern fn LLVMInitializeARMTarget() -> void;
extern fn LLVMInitializeAVRTarget() -> void;
extern fn LLVMInitializeBPFTarget() -> void;
extern fn LLVMInitializeHexagonTarget() -> void;
extern fn LLVMInitializeLanaiTarget() -> void;
extern fn LLVMInitializeLoongArchTarget() -> void;
extern fn LLVMInitializeMipsTarget() -> void;
extern fn LLVMInitializeMSP430Target() -> void;
extern fn LLVMInitializeNVPTXTarget() -> void;
extern fn LLVMInitializePowerPCTarget() -> void;
extern fn LLVMInitializeRISCVTarget() -> void;
extern fn LLVMInitializeSparcTarget() -> void;
extern fn LLVMInitializeSystemZTarget() -> void;
extern fn LLVMInitializeVETarget() -> void;
extern fn LLVMInitializeWebAssemblyTarget() -> void;
extern fn LLVMInitializeX86Target() -> void;
extern fn LLVMInitializeXCoreTarget() -> void;
extern fn LLVMInitializeAArch64TargetMC() -> void;
extern fn LLVMInitializeAMDGPUTargetMC() -> void;
extern fn LLVMInitializeARMTargetMC() -> void;
extern fn LLVMInitializeAVRTargetMC() -> void;
extern fn LLVMInitializeBPFTargetMC() -> void;
extern fn LLVMInitializeHexagonTargetMC() -> void;
extern fn LLVMInitializeLanaiTargetMC() -> void;
extern fn LLVMInitializeLoongArchTargetMC() -> void;
extern fn LLVMInitializeMipsTargetMC() -> void;
extern fn LLVMInitializeMSP430TargetMC() -> void;
extern fn LLVMInitializeNVPTXTargetMC() -> void;
extern fn LLVMInitializePowerPCTargetMC() -> void;
extern fn LLVMInitializeRISCVTargetMC() -> void;
extern fn LLVMInitializeSparcTargetMC() -> void;
extern fn LLVMInitializeSystemZTargetMC() -> void;
extern fn LLVMInitializeVETargetMC() -> void;
extern fn LLVMInitializeWebAssemblyTargetMC() -> void;
extern fn LLVMInitializeX86TargetMC() -> void;
extern fn LLVMInitializeXCoreTargetMC() -> void;
extern fn LLVMInitializeAArch64AsmPrinter() -> void;
extern fn LLVMInitializeAMDGPUAsmPrinter() -> void;
extern fn LLVMInitializeARMAsmPrinter() -> void;
extern fn LLVMInitializeAVRAsmPrinter() -> void;
extern fn LLVMInitializeBPFAsmPrinter() -> void;
extern fn LLVMInitializeHexagonAsmPrinter() -> void;
extern fn LLVMInitializeLanaiAsmPrinter() -> void;
extern fn LLVMInitializeLoongArchAsmPrinter() -> void;
extern fn LLVMInitializeMipsAsmPrinter() -> void;
extern fn LLVMInitializeMSP430AsmPrinter() -> void;
extern fn LLVMInitializeNVPTXAsmPrinter() -> void;
extern fn LLVMInitializePowerPCAsmPrinter() -> void;
extern fn LLVMInitializeRISCVAsmPrinter() -> void;
extern fn LLVMInitializeSparcAsmPrinter() -> void;
extern fn LLVMInitializeSystemZAsmPrinter() -> void;
extern fn LLVMInitializeVEAsmPrinter() -> void;
extern fn LLVMInitializeWebAssemblyAsmPrinter() -> void;
extern fn LLVMInitializeX86AsmPrinter() -> void;
extern fn LLVMInitializeXCoreAsmPrinter() -> void;
extern fn LLVMInitializeAArch64AsmParser() -> void;
extern fn LLVMInitializeAMDGPUAsmParser() -> void;
extern fn LLVMInitializeARMAsmParser() -> void;
extern fn LLVMInitializeAVRAsmParser() -> void;
extern fn LLVMInitializeBPFAsmParser() -> void;
extern fn LLVMInitializeHexagonAsmParser() -> void;
extern fn LLVMInitializeLanaiAsmParser() -> void;
extern fn LLVMInitializeLoongArchAsmParser() -> void;
extern fn LLVMInitializeMipsAsmParser() -> void;
extern fn LLVMInitializeMSP430AsmParser() -> void;
extern fn LLVMInitializePowerPCAsmParser() -> void;
extern fn LLVMInitializeRISCVAsmParser() -> void;
extern fn LLVMInitializeSparcAsmParser() -> void;
extern fn LLVMInitializeSystemZAsmParser() -> void;
extern fn LLVMInitializeVEAsmParser() -> void;
extern fn LLVMInitializeWebAssemblyAsmParser() -> void;
extern fn LLVMInitializeX86AsmParser() -> void;
extern fn LLVMInitializeAArch64Disassembler() -> void;
extern fn LLVMInitializeAMDGPUDisassembler() -> void;
extern fn LLVMInitializeARMDisassembler() -> void;
extern fn LLVMInitializeAVRDisassembler() -> void;
extern fn LLVMInitializeBPFDisassembler() -> void;
extern fn LLVMInitializeHexagonDisassembler() -> void;
extern fn LLVMInitializeLanaiDisassembler() -> void;
extern fn LLVMInitializeLoongArchDisassembler() -> void;
extern fn LLVMInitializeMipsDisassembler() -> void;
extern fn LLVMInitializeMSP430Disassembler() -> void;
extern fn LLVMInitializePowerPCDisassembler() -> void;
extern fn LLVMInitializeRISCVDisassembler() -> void;
extern fn LLVMInitializeSparcDisassembler() -> void;
extern fn LLVMInitializeSystemZDisassembler() -> void;
extern fn LLVMInitializeVEDisassembler() -> void;
extern fn LLVMInitializeWebAssemblyDisassembler() -> void;
extern fn LLVMInitializeX86Disassembler() -> void;
extern fn LLVMInitializeXCoreDisassembler() -> void;
extern fn LLVMInitializeAllTargetInfos() -> void;
extern fn LLVMInitializeAllTargets() -> void;
extern fn LLVMInitializeAllTargetMCs() -> void;
extern fn LLVMInitializeAllAsmPrinters() -> void;
extern fn LLVMInitializeAllAsmParsers() -> void;
extern fn LLVMInitializeAllDisassemblers() -> void;
extern fn LLVMInitializeNativeTarget() -> bool;
extern fn LLVMInitializeNativeAsmParser() -> bool;
extern fn LLVMInitializeNativeAsmPrinter() -> bool;
extern fn LLVMInitializeNativeDisassembler() -> bool;
extern fn LLVMGetModuleDataLayout(M: LLVMModuleRef) -> LLVMTargetDataRef;
extern fn LLVMSetModuleDataLayout(M: LLVMModuleRef, DL: LLVMTargetDataRef) -> void;
extern fn LLVMCreateTargetData(StringRep: *const u8) -> LLVMTargetDataRef;
extern fn LLVMDisposeTargetData(TD: LLVMTargetDataRef) -> void;
extern fn LLVMAddTargetLibraryInfo(TLI: LLVMTargetLibraryInfoRef, PM: LLVMPassManagerRef) -> void;
extern fn LLVMCopyStringRepOfTargetData(TD: LLVMTargetDataRef) -> *mut u8;
extern fn LLVMByteOrder(TD: LLVMTargetDataRef) -> LLVMByteOrdering;
extern fn LLVMPointerSize(TD: LLVMTargetDataRef) -> u32;
extern fn LLVMPointerSizeForAS(TD: LLVMTargetDataRef, AS: u32) -> u32;
extern fn LLVMIntPtrType(TD: LLVMTargetDataRef) -> LLVMTypeRef;
extern fn LLVMIntPtrTypeForAS(TD: LLVMTargetDataRef, AS: u32) -> LLVMTypeRef;
extern fn LLVMIntPtrTypeInContext(C: LLVMContextRef, TD: LLVMTargetDataRef) -> LLVMTypeRef;
extern fn LLVMIntPtrTypeForASInContext(C: LLVMContextRef, TD: LLVMTargetDataRef, AS: u32) -> LLVMTypeRef;
extern fn LLVMSizeOfTypeInBits(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u64;
extern fn LLVMStoreSizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u64;
extern fn LLVMABISizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u64;
extern fn LLVMABIAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u32;
extern fn LLVMCallFrameAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u32;
extern fn LLVMPreferredAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u32;
extern fn LLVMPreferredAlignmentOfGlobal(TD: LLVMTargetDataRef, GlobalVar: LLVMValueRef) -> u32;
extern fn LLVMElementAtOffset(TD: LLVMTargetDataRef, StructTy: LLVMTypeRef, Offset: u64) -> u32;
extern fn LLVMOffsetOfElement(TD: LLVMTargetDataRef, StructTy: LLVMTypeRef, Element: u32) -> u64;
struct LLVMOpaqueTargetMachineOptions;
type LLVMTargetMachineOptionsRef :: *mut LLVMOpaqueTargetMachineOptions;
struct LLVMOpaqueTargetMachine;
type LLVMTargetMachineRef :: *mut LLVMOpaqueTargetMachine;
struct LLVMTarget;
type LLVMTargetRef :: *mut LLVMTarget;

enum LLVMCodeGenFileType {
  LLVMAssemblyFile = 0,
  LLVMObjectFile = 1,
};
enum LLVMGlobalISelAbortMode {
  LLVMGlobalISelAbortEnable = 0,
  LLVMGlobalISelAbortDisable = 1,
  LLVMGlobalISelAbortDisableWithDiag = 2,
};
extern fn LLVMGetFirstTarget() -> LLVMTargetRef;
extern fn LLVMGetNextTarget(T: LLVMTargetRef) -> LLVMTargetRef;
extern fn LLVMGetTargetFromName(Name: *const u8) -> LLVMTargetRef;
extern fn LLVMGetTargetFromTriple(Triple: *const u8, T: *mut LLVMTargetRef, ErrorMessage: *mut *mut u8) -> bool;
extern fn LLVMGetTargetName(T: LLVMTargetRef) -> *const u8;
extern fn LLVMGetTargetDescription(T: LLVMTargetRef) -> *const u8;
extern fn LLVMTargetHasJIT(T: LLVMTargetRef) -> bool;
extern fn LLVMTargetHasTargetMachine(T: LLVMTargetRef) -> bool;
extern fn LLVMTargetHasAsmBackend(T: LLVMTargetRef) -> bool;
extern fn LLVMCreateTargetMachineOptions() -> LLVMTargetMachineOptionsRef;
extern fn LLVMDisposeTargetMachineOptions(Options: LLVMTargetMachineOptionsRef) -> void;
extern fn LLVMTargetMachineOptionsSetCPU(Options: LLVMTargetMachineOptionsRef, CPU: *const u8) -> void;
extern fn LLVMTargetMachineOptionsSetFeatures(Options: LLVMTargetMachineOptionsRef, Features: *const u8) -> void;
extern fn LLVMTargetMachineOptionsSetABI(Options: LLVMTargetMachineOptionsRef, ABI: *const u8) -> void;
extern fn LLVMTargetMachineOptionsSetCodeGenOptLevel(Options: LLVMTargetMachineOptionsRef, Level: LLVMCodeGenOptLevel) -> void;
extern fn LLVMTargetMachineOptionsSetRelocMode(Options: LLVMTargetMachineOptionsRef, Reloc: LLVMRelocMode) -> void;
extern fn LLVMTargetMachineOptionsSetCodeModel(Options: LLVMTargetMachineOptionsRef, CodeModel: LLVMCodeModel) -> void;
extern fn LLVMCreateTargetMachineWithOptions(T: LLVMTargetRef, Triple: *const u8, Options: LLVMTargetMachineOptionsRef) -> LLVMTargetMachineRef;
extern fn LLVMCreateTargetMachine(T: LLVMTargetRef, Triple: *const u8, CPU: *const u8, Features: *const u8, Level: LLVMCodeGenOptLevel, Reloc: LLVMRelocMode, CodeModel: LLVMCodeModel) -> LLVMTargetMachineRef;
extern fn LLVMDisposeTargetMachine(T: LLVMTargetMachineRef) -> void;
extern fn LLVMGetTargetMachineTarget(T: LLVMTargetMachineRef) -> LLVMTargetRef;
extern fn LLVMGetTargetMachineTriple(T: LLVMTargetMachineRef) -> *mut u8;
extern fn LLVMGetTargetMachineCPU(T: LLVMTargetMachineRef) -> *mut u8;
extern fn LLVMGetTargetMachineFeatureString(T: LLVMTargetMachineRef) -> *mut u8;
extern fn LLVMCreateTargetDataLayout(T: LLVMTargetMachineRef) -> LLVMTargetDataRef;
extern fn LLVMSetTargetMachineAsmVerbosity(T: LLVMTargetMachineRef, VerboseAsm: bool) -> void;
extern fn LLVMSetTargetMachineFastISel(T: LLVMTargetMachineRef, Enable: bool) -> void;
extern fn LLVMSetTargetMachineGlobalISel(T: LLVMTargetMachineRef, Enable: bool) -> void;
extern fn LLVMSetTargetMachineGlobalISelAbort(T: LLVMTargetMachineRef, Mode: LLVMGlobalISelAbortMode) -> void;
extern fn LLVMSetTargetMachineMachineOutliner(T: LLVMTargetMachineRef, Enable: bool) -> void;
extern fn LLVMTargetMachineEmitToFile(T: LLVMTargetMachineRef, M: LLVMModuleRef, Filename: *const u8, codegen: LLVMCodeGenFileType, ErrorMessage: *mut *mut u8) -> bool;
extern fn LLVMTargetMachineEmitToMemoryBuffer(T: LLVMTargetMachineRef, M: LLVMModuleRef, codegen: LLVMCodeGenFileType, ErrorMessage: *mut *mut u8, OutMemBuf: *mut LLVMMemoryBufferRef) -> bool;
extern fn LLVMGetDefaultTargetTriple() -> *mut u8;
extern fn LLVMNormalizeTargetTriple(triple: *const u8) -> *mut u8;
extern fn LLVMGetHostCPUName() -> *mut u8;
extern fn LLVMGetHostCPUFeatures() -> *mut u8;
extern fn LLVMAddAnalysisPasses(T: LLVMTargetMachineRef, PM: LLVMPassManagerRef) -> void;
extern fn LLVMLinkInMCJIT() -> void;
extern fn LLVMLinkInInterpreter() -> void;
struct LLVMOpaqueGenericValue;
type LLVMGenericValueRef :: *mut LLVMOpaqueGenericValue;
struct LLVMOpaqueExecutionEngine;
type LLVMExecutionEngineRef :: *mut LLVMOpaqueExecutionEngine;
struct LLVMOpaqueMCJITMemoryManager;
type LLVMMCJITMemoryManagerRef :: *mut LLVMOpaqueMCJITMemoryManager;
struct LLVMMCJITCompilerOptions {
  OptLevel: u32,
  CodeModel: LLVMCodeModel,
  NoFramePointerElim: bool,
  EnableFastISel: bool,
  MCJMM: LLVMMCJITMemoryManagerRef,
};
extern fn LLVMCreateGenericValueOfInt(Ty: LLVMTypeRef, N: u64, IsSigned: bool) -> LLVMGenericValueRef;
extern fn LLVMCreateGenericValueOfPointer(P: *mut void) -> LLVMGenericValueRef;
extern fn LLVMCreateGenericValueOfFloat(Ty: LLVMTypeRef, N: f64) -> LLVMGenericValueRef;
extern fn LLVMGenericValueIntWidth(GenValRef: LLVMGenericValueRef) -> u32;
extern fn LLVMGenericValueToInt(GenVal: LLVMGenericValueRef, IsSigned: bool) -> u64;
extern fn LLVMGenericValueToPointer(GenVal: LLVMGenericValueRef) -> *mut void;
extern fn LLVMGenericValueToFloat(TyRef: LLVMTypeRef, GenVal: LLVMGenericValueRef) -> f64;
extern fn LLVMDisposeGenericValue(GenVal: LLVMGenericValueRef) -> void;
extern fn LLVMCreateExecutionEngineForModule(OutEE: *mut LLVMExecutionEngineRef, M: LLVMModuleRef, OutError: *mut *mut u8) -> bool;
extern fn LLVMCreateInterpreterForModule(OutInterp: *mut LLVMExecutionEngineRef, M: LLVMModuleRef, OutError: *mut *mut u8) -> bool;
extern fn LLVMCreateJITCompilerForModule(OutJIT: *mut LLVMExecutionEngineRef, M: LLVMModuleRef, OptLevel: u32, OutError: *mut *mut u8) -> bool;
extern fn LLVMInitializeMCJITCompilerOptions(Options: *mut LLVMMCJITCompilerOptions, SizeOfOptions: u64) -> void;
extern fn LLVMCreateMCJITCompilerForModule(OutJIT: *mut LLVMExecutionEngineRef, M: LLVMModuleRef, Options: *mut LLVMMCJITCompilerOptions, SizeOfOptions: u64, OutError: *mut *mut u8) -> bool;
extern fn LLVMDisposeExecutionEngine(EE: LLVMExecutionEngineRef) -> void;
extern fn LLVMRunStaticConstructors(EE: LLVMExecutionEngineRef) -> void;
extern fn LLVMRunStaticDestructors(EE: LLVMExecutionEngineRef) -> void;
extern fn LLVMRunFunctionAsMain(EE: LLVMExecutionEngineRef, F: LLVMValueRef, ArgC: u32, ArgV: *const *const u8, EnvP: *const *const u8) -> s32;
extern fn LLVMRunFunction(EE: LLVMExecutionEngineRef, F: LLVMValueRef, NumArgs: u32, Args: *mut LLVMGenericValueRef) -> LLVMGenericValueRef;
extern fn LLVMFreeMachineCodeForFunction(EE: LLVMExecutionEngineRef, F: LLVMValueRef) -> void;
extern fn LLVMAddModule(EE: LLVMExecutionEngineRef, M: LLVMModuleRef) -> void;
extern fn LLVMRemoveModule(EE: LLVMExecutionEngineRef, M: LLVMModuleRef, OutMod: *mut LLVMModuleRef, OutError: *mut *mut u8) -> bool;
extern fn LLVMFindFunction(EE: LLVMExecutionEngineRef, Name: *const u8, OutFn: *mut LLVMValueRef) -> bool;
extern fn LLVMRecompileAndRelinkFunction(EE: LLVMExecutionEngineRef, Fn: LLVMValueRef) -> *mut void;
extern fn LLVMGetExecutionEngineTargetData(EE: LLVMExecutionEngineRef) -> LLVMTargetDataRef;
extern fn LLVMGetExecutionEngineTargetMachine(EE: LLVMExecutionEngineRef) -> LLVMTargetMachineRef;
extern fn LLVMAddGlobalMapping(EE: LLVMExecutionEngineRef, Global: LLVMValueRef, Addr: *mut void) -> void;
extern fn LLVMGetPointerToGlobal(EE: LLVMExecutionEngineRef, Global: LLVMValueRef) -> *mut void;
extern fn LLVMGetGlobalValueAddress(EE: LLVMExecutionEngineRef, Name: *const u8) -> u64;
extern fn LLVMGetFunctionAddress(EE: LLVMExecutionEngineRef, Name: *const u8) -> u64;
extern fn LLVMExecutionEngineGetErrMsg(EE: LLVMExecutionEngineRef, OutError: *mut *mut u8) -> bool;
type LLVMMemoryManagerAllocateCodeSectionCallback :: fn(*mut void, u64, u32, u32, *const u8) -> *mut u8;
type LLVMMemoryManagerAllocateDataSectionCallback :: fn(*mut void, u64, u32, u32, *const u8, bool) -> *mut u8;
type LLVMMemoryManagerFinalizeMemoryCallback :: fn(*mut void, *mut *mut u8) -> bool;
type LLVMMemoryManagerDestroyCallback :: fn(*mut void) -> void;
extern fn LLVMCreateSimpleMCJITMemoryManager(Opaque: *mut void, AllocateCodeSection: LLVMMemoryManagerAllocateCodeSectionCallback, AllocateDataSection: LLVMMemoryManagerAllocateDataSectionCallback, FinalizeMemory: LLVMMemoryManagerFinalizeMemoryCallback, Destroy: LLVMMemoryManagerDestroyCallback) -> LLVMMCJITMemoryManagerRef;
extern fn LLVMDisposeMCJITMemoryManager(MM: LLVMMCJITMemoryManagerRef) -> void;
extern fn LLVMCreateGDBRegistrationListener() -> LLVMJITEventListenerRef;
extern fn LLVMCreateIntelJITEventListener() -> LLVMJITEventListenerRef;
extern fn LLVMCreateOProfileJITEventListener() -> LLVMJITEventListenerRef;
extern fn LLVMCreatePerfJITEventListener() -> LLVMJITEventListenerRef;
extern fn LLVMParseIRInContext(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> bool;
enum LLVMLinkerMode {
  LLVMLinkerDestroySource = 0,
  LLVMLinkerPreserveSource_Removed = 1,
};
extern fn LLVMLinkModules2(Dest: LLVMModuleRef, Src: LLVMModuleRef) -> bool;
type LLVMOrcJITTargetAddress :: u64;
type LLVMOrcExecutorAddress :: u64;
enum LLVMJITSymbolGenericFlags {
  LLVMJITSymbolGenericFlagsNone = 0,
  LLVMJITSymbolGenericFlagsExported = 1,
  LLVMJITSymbolGenericFlagsWeak = 2,
  LLVMJITSymbolGenericFlagsCallable = 4,
  LLVMJITSymbolGenericFlagsMaterializationSideEffectsOnly = 8,
};
type LLVMJITSymbolTargetFlags :: u8;
struct LLVMJITSymbolFlags {
  GenericFlags: u8,
  TargetFlags: u8,
};
struct LLVMJITEvaluatedSymbol {
  Address: LLVMOrcExecutorAddress,
  Flags: LLVMJITSymbolFlags,
};
struct LLVMOrcOpaqueExecutionSession;
type LLVMOrcExecutionSessionRef :: *mut LLVMOrcOpaqueExecutionSession;
type LLVMOrcErrorReporterFunction :: fn(*mut void, LLVMErrorRef) -> void;
struct LLVMOrcOpaqueSymbolStringPool;
type LLVMOrcSymbolStringPoolRef :: *mut LLVMOrcOpaqueSymbolStringPool;
struct LLVMOrcOpaqueSymbolStringPoolEntry;
type LLVMOrcSymbolStringPoolEntryRef :: *mut LLVMOrcOpaqueSymbolStringPoolEntry;
struct LLVMOrcCSymbolFlagsMapPair {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  Flags: LLVMJITSymbolFlags,
};
type LLVMOrcCSymbolFlagsMapPairs :: *mut LLVMOrcCSymbolFlagsMapPair;
struct LLVMOrcCSymbolMapPair {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  Sym: LLVMJITEvaluatedSymbol,
};
type LLVMOrcCSymbolMapPairs :: *mut LLVMOrcCSymbolMapPair;
struct LLVMOrcCSymbolAliasMapEntry {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  Flags: LLVMJITSymbolFlags,
};
struct LLVMOrcCSymbolAliasMapPair {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  Entry: LLVMOrcCSymbolAliasMapEntry,
};
type LLVMOrcCSymbolAliasMapPairs :: *mut LLVMOrcCSymbolAliasMapPair;
struct LLVMOrcOpaqueJITDylib;
type LLVMOrcJITDylibRef :: *mut LLVMOrcOpaqueJITDylib;
struct LLVMOrcCSymbolsList {
  Symbols: *mut LLVMOrcSymbolStringPoolEntryRef,
  Length: u64,
};
struct LLVMOrcCDependenceMapPair {
  JD: LLVMOrcJITDylibRef,
  Names: LLVMOrcCSymbolsList,
};
type LLVMOrcCDependenceMapPairs :: *mut LLVMOrcCDependenceMapPair;
struct LLVMOrcCSymbolDependenceGroup {
  Symbols: LLVMOrcCSymbolsList,
  Dependencies: LLVMOrcCDependenceMapPairs,
  NumDependencies: u64,
};
enum LLVMOrcLookupKind {
  LLVMOrcLookupKindStatic = 0,
  LLVMOrcLookupKindDLSym = 1,
};
enum LLVMOrcJITDylibLookupFlags {
  LLVMOrcJITDylibLookupFlagsMatchExportedSymbolsOnly = 0,
  LLVMOrcJITDylibLookupFlagsMatchAllSymbols = 1,
};
struct LLVMOrcCJITDylibSearchOrderElement {
  JD: LLVMOrcJITDylibRef,
  JDLookupFlags: LLVMOrcJITDylibLookupFlags,
};
type LLVMOrcCJITDylibSearchOrder :: *mut LLVMOrcCJITDylibSearchOrderElement;
enum LLVMOrcSymbolLookupFlags {
  LLVMOrcSymbolLookupFlagsRequiredSymbol = 0,
  LLVMOrcSymbolLookupFlagsWeaklyReferencedSymbol = 1,
};
struct LLVMOrcCLookupSetElement {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  LookupFlags: LLVMOrcSymbolLookupFlags,
};
type LLVMOrcCLookupSet :: *mut LLVMOrcCLookupSetElement;
struct LLVMOrcOpaqueMaterializationUnit;
type LLVMOrcMaterializationUnitRef :: *mut LLVMOrcOpaqueMaterializationUnit;
struct LLVMOrcOpaqueMaterializationResponsibility;
type LLVMOrcMaterializationResponsibilityRef :: *mut LLVMOrcOpaqueMaterializationResponsibility;
type LLVMOrcMaterializationUnitMaterializeFunction :: fn(*mut void, LLVMOrcMaterializationResponsibilityRef) -> void;
type LLVMOrcMaterializationUnitDiscardFunction :: fn(*mut void, LLVMOrcJITDylibRef, LLVMOrcSymbolStringPoolEntryRef) -> void;
type LLVMOrcMaterializationUnitDestroyFunction :: fn(*mut void) -> void;
struct LLVMOrcOpaqueResourceTracker;
type LLVMOrcResourceTrackerRef :: *mut LLVMOrcOpaqueResourceTracker;
struct LLVMOrcOpaqueDefinitionGenerator;
type LLVMOrcDefinitionGeneratorRef :: *mut LLVMOrcOpaqueDefinitionGenerator;
struct LLVMOrcOpaqueLookupState;
type LLVMOrcLookupStateRef :: *mut LLVMOrcOpaqueLookupState;
type LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction :: fn(LLVMOrcDefinitionGeneratorRef, *mut void, *mut LLVMOrcLookupStateRef, LLVMOrcLookupKind, LLVMOrcJITDylibRef, LLVMOrcJITDylibLookupFlags, LLVMOrcCLookupSet, u64) -> LLVMErrorRef;
type LLVMOrcDisposeCAPIDefinitionGeneratorFunction :: fn(*mut void) -> void;
type LLVMOrcSymbolPredicate :: fn(*mut void, LLVMOrcSymbolStringPoolEntryRef) -> s32;
struct LLVMOrcOpaqueThreadSafeContext;
type LLVMOrcThreadSafeContextRef :: *mut LLVMOrcOpaqueThreadSafeContext;
struct LLVMOrcOpaqueThreadSafeModule;
type LLVMOrcThreadSafeModuleRef :: *mut LLVMOrcOpaqueThreadSafeModule;
type LLVMOrcGenericIRModuleOperationFunction :: fn(*mut void, LLVMModuleRef) -> LLVMErrorRef;
struct LLVMOrcOpaqueJITTargetMachineBuilder;
type LLVMOrcJITTargetMachineBuilderRef :: *mut LLVMOrcOpaqueJITTargetMachineBuilder;
struct LLVMOrcOpaqueObjectLayer;
type LLVMOrcObjectLayerRef :: *mut LLVMOrcOpaqueObjectLayer;
struct LLVMOrcOpaqueObjectLinkingLayer;
type LLVMOrcObjectLinkingLayerRef :: *mut LLVMOrcOpaqueObjectLinkingLayer;
struct LLVMOrcOpaqueIRTransformLayer;
type LLVMOrcIRTransformLayerRef :: *mut LLVMOrcOpaqueIRTransformLayer;
type LLVMOrcIRTransformLayerTransformFunction :: fn(*mut void, *mut LLVMOrcThreadSafeModuleRef, LLVMOrcMaterializationResponsibilityRef) -> LLVMErrorRef;
struct LLVMOrcOpaqueObjectTransformLayer;
type LLVMOrcObjectTransformLayerRef :: *mut LLVMOrcOpaqueObjectTransformLayer;
type LLVMOrcObjectTransformLayerTransformFunction :: fn(*mut void, *mut LLVMMemoryBufferRef) -> LLVMErrorRef;
struct LLVMOrcOpaqueIndirectStubsManager;
type LLVMOrcIndirectStubsManagerRef :: *mut LLVMOrcOpaqueIndirectStubsManager;
struct LLVMOrcOpaqueLazyCallThroughManager;
type LLVMOrcLazyCallThroughManagerRef :: *mut LLVMOrcOpaqueLazyCallThroughManager;
struct LLVMOrcOpaqueDumpObjects;
type LLVMOrcDumpObjectsRef :: *mut LLVMOrcOpaqueDumpObjects;
extern fn LLVMOrcExecutionSessionSetErrorReporter(ES: LLVMOrcExecutionSessionRef, ReportError: LLVMOrcErrorReporterFunction, Ctx: *mut void) -> void;
extern fn LLVMOrcExecutionSessionGetSymbolStringPool(ES: LLVMOrcExecutionSessionRef) -> LLVMOrcSymbolStringPoolRef;
extern fn LLVMOrcSymbolStringPoolClearDeadEntries(SSP: LLVMOrcSymbolStringPoolRef) -> void;
extern fn LLVMOrcExecutionSessionIntern(ES: LLVMOrcExecutionSessionRef, Name: *const u8) -> LLVMOrcSymbolStringPoolEntryRef;
type LLVMOrcExecutionSessionLookupHandleResultFunction :: fn(LLVMErrorRef, LLVMOrcCSymbolMapPairs, u64, *mut void) -> void;
extern fn LLVMOrcExecutionSessionLookup(ES: LLVMOrcExecutionSessionRef, K: LLVMOrcLookupKind, SearchOrder: LLVMOrcCJITDylibSearchOrder, SearchOrderSize: u64, Symbols: LLVMOrcCLookupSet, SymbolsSize: u64, HandleResult: LLVMOrcExecutionSessionLookupHandleResultFunction, Ctx: *mut void) -> void;
extern fn LLVMOrcRetainSymbolStringPoolEntry(S: LLVMOrcSymbolStringPoolEntryRef) -> void;
extern fn LLVMOrcReleaseSymbolStringPoolEntry(S: LLVMOrcSymbolStringPoolEntryRef) -> void;
extern fn LLVMOrcSymbolStringPoolEntryStr(S: LLVMOrcSymbolStringPoolEntryRef) -> *const u8;
extern fn LLVMOrcReleaseResourceTracker(RT: LLVMOrcResourceTrackerRef) -> void;
extern fn LLVMOrcResourceTrackerTransferTo(SrcRT: LLVMOrcResourceTrackerRef, DstRT: LLVMOrcResourceTrackerRef) -> void;
extern fn LLVMOrcResourceTrackerRemove(RT: LLVMOrcResourceTrackerRef) -> LLVMErrorRef;
extern fn LLVMOrcDisposeDefinitionGenerator(DG: LLVMOrcDefinitionGeneratorRef) -> void;
extern fn LLVMOrcDisposeMaterializationUnit(MU: LLVMOrcMaterializationUnitRef) -> void;
extern fn LLVMOrcCreateCustomMaterializationUnit(Name: *const u8, Ctx: *mut void, Syms: LLVMOrcCSymbolFlagsMapPairs, NumSyms: u64, InitSym: LLVMOrcSymbolStringPoolEntryRef, Materialize: LLVMOrcMaterializationUnitMaterializeFunction, Discard: LLVMOrcMaterializationUnitDiscardFunction, Destroy: LLVMOrcMaterializationUnitDestroyFunction) -> LLVMOrcMaterializationUnitRef;
extern fn LLVMOrcAbsoluteSymbols(Syms: LLVMOrcCSymbolMapPairs, NumPairs: u64) -> LLVMOrcMaterializationUnitRef;
extern fn LLVMOrcLazyReexports(LCTM: LLVMOrcLazyCallThroughManagerRef, ISM: LLVMOrcIndirectStubsManagerRef, SourceRef: LLVMOrcJITDylibRef, CallableAliases: LLVMOrcCSymbolAliasMapPairs, NumPairs: u64) -> LLVMOrcMaterializationUnitRef;
extern fn LLVMOrcDisposeMaterializationResponsibility(MR: LLVMOrcMaterializationResponsibilityRef) -> void;
extern fn LLVMOrcMaterializationResponsibilityGetTargetDylib(MR: LLVMOrcMaterializationResponsibilityRef) -> LLVMOrcJITDylibRef;
extern fn LLVMOrcMaterializationResponsibilityGetExecutionSession(MR: LLVMOrcMaterializationResponsibilityRef) -> LLVMOrcExecutionSessionRef;
extern fn LLVMOrcMaterializationResponsibilityGetSymbols(MR: LLVMOrcMaterializationResponsibilityRef, NumPairs: *mut u64) -> LLVMOrcCSymbolFlagsMapPairs;
extern fn LLVMOrcDisposeCSymbolFlagsMap(Pairs: LLVMOrcCSymbolFlagsMapPairs) -> void;
extern fn LLVMOrcMaterializationResponsibilityGetInitializerSymbol(MR: LLVMOrcMaterializationResponsibilityRef) -> LLVMOrcSymbolStringPoolEntryRef;
extern fn LLVMOrcMaterializationResponsibilityGetRequestedSymbols(MR: LLVMOrcMaterializationResponsibilityRef, NumSymbols: *mut u64) -> *mut LLVMOrcSymbolStringPoolEntryRef;
extern fn LLVMOrcDisposeSymbols(Symbols: *mut LLVMOrcSymbolStringPoolEntryRef) -> void;
extern fn LLVMOrcMaterializationResponsibilityNotifyResolved(MR: LLVMOrcMaterializationResponsibilityRef, Symbols: LLVMOrcCSymbolMapPairs, NumPairs: u64) -> LLVMErrorRef;
extern fn LLVMOrcMaterializationResponsibilityNotifyEmitted(MR: LLVMOrcMaterializationResponsibilityRef, SymbolDepGroups: *mut LLVMOrcCSymbolDependenceGroup, NumSymbolDepGroups: u64) -> LLVMErrorRef;
extern fn LLVMOrcMaterializationResponsibilityDefineMaterializing(MR: LLVMOrcMaterializationResponsibilityRef, Pairs: LLVMOrcCSymbolFlagsMapPairs, NumPairs: u64) -> LLVMErrorRef;
extern fn LLVMOrcMaterializationResponsibilityFailMaterialization(MR: LLVMOrcMaterializationResponsibilityRef) -> void;
extern fn LLVMOrcMaterializationResponsibilityReplace(MR: LLVMOrcMaterializationResponsibilityRef, MU: LLVMOrcMaterializationUnitRef) -> LLVMErrorRef;
extern fn LLVMOrcMaterializationResponsibilityDelegate(MR: LLVMOrcMaterializationResponsibilityRef, Symbols: *mut LLVMOrcSymbolStringPoolEntryRef, NumSymbols: u64, Result: *mut LLVMOrcMaterializationResponsibilityRef) -> LLVMErrorRef;
extern fn LLVMOrcExecutionSessionCreateBareJITDylib(ES: LLVMOrcExecutionSessionRef, Name: *const u8) -> LLVMOrcJITDylibRef;
extern fn LLVMOrcExecutionSessionCreateJITDylib(ES: LLVMOrcExecutionSessionRef, Result: *mut LLVMOrcJITDylibRef, Name: *const u8) -> LLVMErrorRef;
extern fn LLVMOrcExecutionSessionGetJITDylibByName(ES: LLVMOrcExecutionSessionRef, Name: *const u8) -> LLVMOrcJITDylibRef;
extern fn LLVMOrcJITDylibCreateResourceTracker(JD: LLVMOrcJITDylibRef) -> LLVMOrcResourceTrackerRef;
extern fn LLVMOrcJITDylibGetDefaultResourceTracker(JD: LLVMOrcJITDylibRef) -> LLVMOrcResourceTrackerRef;
extern fn LLVMOrcJITDylibDefine(JD: LLVMOrcJITDylibRef, MU: LLVMOrcMaterializationUnitRef) -> LLVMErrorRef;
extern fn LLVMOrcJITDylibClear(JD: LLVMOrcJITDylibRef) -> LLVMErrorRef;
extern fn LLVMOrcJITDylibAddGenerator(JD: LLVMOrcJITDylibRef, DG: LLVMOrcDefinitionGeneratorRef) -> void;
extern fn LLVMOrcCreateCustomCAPIDefinitionGenerator(F: LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction, Ctx: *mut void, Dispose: LLVMOrcDisposeCAPIDefinitionGeneratorFunction) -> LLVMOrcDefinitionGeneratorRef;
extern fn LLVMOrcLookupStateContinueLookup(S: LLVMOrcLookupStateRef, Err: LLVMErrorRef) -> void;
extern fn LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess(Result: *mut LLVMOrcDefinitionGeneratorRef, GlobalPrefx: u8, Filter: LLVMOrcSymbolPredicate, FilterCtx: *mut void) -> LLVMErrorRef;
extern fn LLVMOrcCreateDynamicLibrarySearchGeneratorForPath(Result: *mut LLVMOrcDefinitionGeneratorRef, FileName: *const u8, GlobalPrefix: u8, Filter: LLVMOrcSymbolPredicate, FilterCtx: *mut void) -> LLVMErrorRef;
extern fn LLVMOrcCreateStaticLibrarySearchGeneratorForPath(Result: *mut LLVMOrcDefinitionGeneratorRef, ObjLayer: LLVMOrcObjectLayerRef, FileName: *const u8, TargetTriple: *const u8) -> LLVMErrorRef;
extern fn LLVMOrcCreateNewThreadSafeContext() -> LLVMOrcThreadSafeContextRef;
extern fn LLVMOrcThreadSafeContextGetContext(TSCtx: LLVMOrcThreadSafeContextRef) -> LLVMContextRef;
extern fn LLVMOrcDisposeThreadSafeContext(TSCtx: LLVMOrcThreadSafeContextRef) -> void;
extern fn LLVMOrcCreateNewThreadSafeModule(M: LLVMModuleRef, TSCtx: LLVMOrcThreadSafeContextRef) -> LLVMOrcThreadSafeModuleRef;
extern fn LLVMOrcDisposeThreadSafeModule(TSM: LLVMOrcThreadSafeModuleRef) -> void;
extern fn LLVMOrcThreadSafeModuleWithModuleDo(TSM: LLVMOrcThreadSafeModuleRef, F: LLVMOrcGenericIRModuleOperationFunction, Ctx: *mut void) -> LLVMErrorRef;
extern fn LLVMOrcJITTargetMachineBuilderDetectHost(Result: *mut LLVMOrcJITTargetMachineBuilderRef) -> LLVMErrorRef;
extern fn LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine(TM: LLVMTargetMachineRef) -> LLVMOrcJITTargetMachineBuilderRef;
extern fn LLVMOrcDisposeJITTargetMachineBuilder(JTMB: LLVMOrcJITTargetMachineBuilderRef) -> void;
extern fn LLVMOrcJITTargetMachineBuilderGetTargetTriple(JTMB: LLVMOrcJITTargetMachineBuilderRef) -> *mut u8;
extern fn LLVMOrcJITTargetMachineBuilderSetTargetTriple(JTMB: LLVMOrcJITTargetMachineBuilderRef, TargetTriple: *const u8) -> void;
extern fn LLVMOrcObjectLayerAddObjectFile(ObjLayer: LLVMOrcObjectLayerRef, JD: LLVMOrcJITDylibRef, ObjBuffer: LLVMMemoryBufferRef) -> LLVMErrorRef;
extern fn LLVMOrcObjectLayerAddObjectFileWithRT(ObjLayer: LLVMOrcObjectLayerRef, RT: LLVMOrcResourceTrackerRef, ObjBuffer: LLVMMemoryBufferRef) -> LLVMErrorRef;
extern fn LLVMOrcObjectLayerEmit(ObjLayer: LLVMOrcObjectLayerRef, R: LLVMOrcMaterializationResponsibilityRef, ObjBuffer: LLVMMemoryBufferRef) -> void;
extern fn LLVMOrcDisposeObjectLayer(ObjLayer: LLVMOrcObjectLayerRef) -> void;
extern fn LLVMOrcIRTransformLayerEmit(IRTransformLayer: LLVMOrcIRTransformLayerRef, MR: LLVMOrcMaterializationResponsibilityRef, TSM: LLVMOrcThreadSafeModuleRef) -> void;
extern fn LLVMOrcIRTransformLayerSetTransform(IRTransformLayer: LLVMOrcIRTransformLayerRef, TransformFunction: LLVMOrcIRTransformLayerTransformFunction, Ctx: *mut void) -> void;
extern fn LLVMOrcObjectTransformLayerSetTransform(ObjTransformLayer: LLVMOrcObjectTransformLayerRef, TransformFunction: LLVMOrcObjectTransformLayerTransformFunction, Ctx: *mut void) -> void;
extern fn LLVMOrcCreateLocalIndirectStubsManager(TargetTriple: *const u8) -> LLVMOrcIndirectStubsManagerRef;
extern fn LLVMOrcDisposeIndirectStubsManager(ISM: LLVMOrcIndirectStubsManagerRef) -> void;
extern fn LLVMOrcCreateLocalLazyCallThroughManager(TargetTriple: *const u8, ES: LLVMOrcExecutionSessionRef, ErrorHandlerAddr: LLVMOrcJITTargetAddress, LCTM: *mut LLVMOrcLazyCallThroughManagerRef) -> LLVMErrorRef;
extern fn LLVMOrcDisposeLazyCallThroughManager(LCTM: LLVMOrcLazyCallThroughManagerRef) -> void;
extern fn LLVMOrcCreateDumpObjects(DumpDir: *const u8, IdentifierOverride: *const u8) -> LLVMOrcDumpObjectsRef;
extern fn LLVMOrcDisposeDumpObjects(DumpObjects: LLVMOrcDumpObjectsRef) -> void;
extern fn LLVMOrcDumpObjects_CallOperator(DumpObjects: LLVMOrcDumpObjectsRef, ObjBuffer: *mut LLVMMemoryBufferRef) -> LLVMErrorRef;
type LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction :: fn(*mut void, LLVMOrcExecutionSessionRef, *const u8) -> LLVMOrcObjectLayerRef;
struct LLVMOrcOpaqueLLJITBuilder;
type LLVMOrcLLJITBuilderRef :: *mut LLVMOrcOpaqueLLJITBuilder;
struct LLVMOrcOpaqueLLJIT;
type LLVMOrcLLJITRef :: *mut LLVMOrcOpaqueLLJIT;
extern fn LLVMOrcCreateLLJITBuilder() -> LLVMOrcLLJITBuilderRef;
extern fn LLVMOrcDisposeLLJITBuilder(Builder: LLVMOrcLLJITBuilderRef) -> void;
extern fn LLVMOrcLLJITBuilderSetJITTargetMachineBuilder(Builder: LLVMOrcLLJITBuilderRef, JTMB: LLVMOrcJITTargetMachineBuilderRef) -> void;
extern fn LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator(Builder: LLVMOrcLLJITBuilderRef, F: LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction, Ctx: *mut void) -> void;
extern fn LLVMOrcCreateLLJIT(Result: *mut LLVMOrcLLJITRef, Builder: LLVMOrcLLJITBuilderRef) -> LLVMErrorRef;
extern fn LLVMOrcDisposeLLJIT(J: LLVMOrcLLJITRef) -> LLVMErrorRef;
extern fn LLVMOrcLLJITGetExecutionSession(J: LLVMOrcLLJITRef) -> LLVMOrcExecutionSessionRef;
extern fn LLVMOrcLLJITGetMainJITDylib(J: LLVMOrcLLJITRef) -> LLVMOrcJITDylibRef;
extern fn LLVMOrcLLJITGetTripleString(J: LLVMOrcLLJITRef) -> *const u8;
extern fn LLVMOrcLLJITGetGlobalPrefix(J: LLVMOrcLLJITRef) -> u8;
extern fn LLVMOrcLLJITMangleAndIntern(J: LLVMOrcLLJITRef, UnmangledName: *const u8) -> LLVMOrcSymbolStringPoolEntryRef;
extern fn LLVMOrcLLJITAddObjectFile(J: LLVMOrcLLJITRef, JD: LLVMOrcJITDylibRef, ObjBuffer: LLVMMemoryBufferRef) -> LLVMErrorRef;
extern fn LLVMOrcLLJITAddObjectFileWithRT(J: LLVMOrcLLJITRef, RT: LLVMOrcResourceTrackerRef, ObjBuffer: LLVMMemoryBufferRef) -> LLVMErrorRef;
extern fn LLVMOrcLLJITAddLLVMIRModule(J: LLVMOrcLLJITRef, JD: LLVMOrcJITDylibRef, TSM: LLVMOrcThreadSafeModuleRef) -> LLVMErrorRef;
extern fn LLVMOrcLLJITAddLLVMIRModuleWithRT(J: LLVMOrcLLJITRef, JD: LLVMOrcResourceTrackerRef, TSM: LLVMOrcThreadSafeModuleRef) -> LLVMErrorRef;
extern fn LLVMOrcLLJITLookup(J: LLVMOrcLLJITRef, Result: *mut LLVMOrcExecutorAddress, Name: *const u8) -> LLVMErrorRef;
extern fn LLVMOrcLLJITGetObjLinkingLayer(J: LLVMOrcLLJITRef) -> LLVMOrcObjectLayerRef;
extern fn LLVMOrcLLJITGetObjTransformLayer(J: LLVMOrcLLJITRef) -> LLVMOrcObjectTransformLayerRef;
extern fn LLVMOrcLLJITGetIRTransformLayer(J: LLVMOrcLLJITRef) -> LLVMOrcIRTransformLayerRef;
extern fn LLVMOrcLLJITGetDataLayoutStr(J: LLVMOrcLLJITRef) -> *const u8;
extern fn LLVMOrcLLJITEnableDebugSupport(J: LLVMOrcLLJITRef) -> LLVMErrorRef;

struct LLVMOpaqueSectionIterator;
type LLVMSectionIteratorRef :: *mut LLVMOpaqueSectionIterator;
struct LLVMOpaqueSymbolIterator;
type LLVMSymbolIteratorRef :: *mut LLVMOpaqueSymbolIterator;
struct LLVMOpaqueRelocationIterator;
type LLVMRelocationIteratorRef :: *mut LLVMOpaqueRelocationIterator;
enum LLVMBinaryType {
  LLVMBinaryTypeArchive = 0,
  LLVMBinaryTypeMachOUniversalBinary = 1,
  LLVMBinaryTypeCOFFImportFile = 2,
  LLVMBinaryTypeIR = 3,
  LLVMBinaryTypeWinRes = 4,
  LLVMBinaryTypeCOFF = 5,
  LLVMBinaryTypeELF32L = 6,
  LLVMBinaryTypeELF32B = 7,
  LLVMBinaryTypeELF64L = 8,
  LLVMBinaryTypeELF64B = 9,
  LLVMBinaryTypeMachO32L = 10,
  LLVMBinaryTypeMachO32B = 11,
  LLVMBinaryTypeMachO64L = 12,
  LLVMBinaryTypeMachO64B = 13,
  LLVMBinaryTypeWasm = 14,
  LLVMBinaryTypeOffload = 15,
};
extern fn LLVMCreateBinary(MemBuf: LLVMMemoryBufferRef, Context: LLVMContextRef, ErrorMessage: *mut *mut u8) -> LLVMBinaryRef;
extern fn LLVMDisposeBinary(BR: LLVMBinaryRef) -> void;
extern fn LLVMBinaryCopyMemoryBuffer(BR: LLVMBinaryRef) -> LLVMMemoryBufferRef;
extern fn LLVMBinaryGetType(BR: LLVMBinaryRef) -> LLVMBinaryType;
extern fn LLVMMachOUniversalBinaryCopyObjectForArch(BR: LLVMBinaryRef, Arch: *const u8, ArchLen: u64, ErrorMessage: *mut *mut u8) -> LLVMBinaryRef;
extern fn LLVMObjectFileCopySectionIterator(BR: LLVMBinaryRef) -> LLVMSectionIteratorRef;
extern fn LLVMObjectFileIsSectionIteratorAtEnd(BR: LLVMBinaryRef, SI: LLVMSectionIteratorRef) -> bool;
extern fn LLVMObjectFileCopySymbolIterator(BR: LLVMBinaryRef) -> LLVMSymbolIteratorRef;
extern fn LLVMObjectFileIsSymbolIteratorAtEnd(BR: LLVMBinaryRef, SI: LLVMSymbolIteratorRef) -> bool;
extern fn LLVMDisposeSectionIterator(SI: LLVMSectionIteratorRef) -> void;
extern fn LLVMMoveToNextSection(SI: LLVMSectionIteratorRef) -> void;
extern fn LLVMMoveToContainingSection(Sect: LLVMSectionIteratorRef, Sym: LLVMSymbolIteratorRef) -> void;
extern fn LLVMDisposeSymbolIterator(SI: LLVMSymbolIteratorRef) -> void;
extern fn LLVMMoveToNextSymbol(SI: LLVMSymbolIteratorRef) -> void;
extern fn LLVMGetSectionName(SI: LLVMSectionIteratorRef) -> *const u8;
extern fn LLVMGetSectionSize(SI: LLVMSectionIteratorRef) -> u64;
extern fn LLVMGetSectionContents(SI: LLVMSectionIteratorRef) -> *const u8;
extern fn LLVMGetSectionAddress(SI: LLVMSectionIteratorRef) -> u64;
extern fn LLVMGetSectionContainsSymbol(SI: LLVMSectionIteratorRef, Sym: LLVMSymbolIteratorRef) -> bool;
extern fn LLVMGetRelocations(Section: LLVMSectionIteratorRef) -> LLVMRelocationIteratorRef;
extern fn LLVMDisposeRelocationIterator(RI: LLVMRelocationIteratorRef) -> void;
extern fn LLVMIsRelocationIteratorAtEnd(Section: LLVMSectionIteratorRef, RI: LLVMRelocationIteratorRef) -> bool;
extern fn LLVMMoveToNextRelocation(RI: LLVMRelocationIteratorRef) -> void;
extern fn LLVMGetSymbolName(SI: LLVMSymbolIteratorRef) -> *const u8;
extern fn LLVMGetSymbolAddress(SI: LLVMSymbolIteratorRef) -> u64;
extern fn LLVMGetSymbolSize(SI: LLVMSymbolIteratorRef) -> u64;
extern fn LLVMGetRelocationOffset(RI: LLVMRelocationIteratorRef) -> u64;
extern fn LLVMGetRelocationSymbol(RI: LLVMRelocationIteratorRef) -> LLVMSymbolIteratorRef;
extern fn LLVMGetRelocationType(RI: LLVMRelocationIteratorRef) -> u64;
extern fn LLVMGetRelocationTypeName(RI: LLVMRelocationIteratorRef) -> *const u8;
extern fn LLVMGetRelocationValueString(RI: LLVMRelocationIteratorRef) -> *const u8;
struct LLVMOpaqueObjectFile;
type LLVMObjectFileRef :: *mut LLVMOpaqueObjectFile;
extern fn LLVMCreateObjectFile(MemBuf: LLVMMemoryBufferRef) -> LLVMObjectFileRef;
extern fn LLVMDisposeObjectFile(ObjectFile: LLVMObjectFileRef) -> void;
extern fn LLVMGetSections(ObjectFile: LLVMObjectFileRef) -> LLVMSectionIteratorRef;
extern fn LLVMIsSectionIteratorAtEnd(ObjectFile: LLVMObjectFileRef, SI: LLVMSectionIteratorRef) -> bool;
extern fn LLVMGetSymbols(ObjectFile: LLVMObjectFileRef) -> LLVMSymbolIteratorRef;
extern fn LLVMIsSymbolIteratorAtEnd(ObjectFile: LLVMObjectFileRef, SI: LLVMSymbolIteratorRef) -> bool;
type LLVMMemoryManagerCreateContextCallback :: fn(*mut void) -> *mut void;
type LLVMMemoryManagerNotifyTerminatingCallback :: fn(*mut void) -> void;
extern fn LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager(ES: LLVMOrcExecutionSessionRef) -> LLVMOrcObjectLayerRef;
extern fn LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks(ES: LLVMOrcExecutionSessionRef, CreateContextCtx: *mut void, CreateContext: LLVMMemoryManagerCreateContextCallback, NotifyTerminating: LLVMMemoryManagerNotifyTerminatingCallback, AllocateCodeSection: LLVMMemoryManagerAllocateCodeSectionCallback, AllocateDataSection: LLVMMemoryManagerAllocateDataSectionCallback, FinalizeMemory: LLVMMemoryManagerFinalizeMemoryCallback, Destroy: LLVMMemoryManagerDestroyCallback) -> LLVMOrcObjectLayerRef;
extern fn LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener(RTDyldObjLinkingLayer: LLVMOrcObjectLayerRef, Listener: LLVMJITEventListenerRef) -> void;
enum LLVMRemarkType {
  LLVMRemarkTypeUnknown = 0,
  LLVMRemarkTypePassed = 1,
  LLVMRemarkTypeMissed = 2,
  LLVMRemarkTypeAnalysis = 3,
  LLVMRemarkTypeAnalysisFPCommute = 4,
  LLVMRemarkTypeAnalysisAliasing = 5,
  LLVMRemarkTypeFailure = 6,
};
struct LLVMRemarkOpaqueString;
type LLVMRemarkStringRef :: *mut LLVMRemarkOpaqueString;
extern fn LLVMRemarkStringGetData(String: LLVMRemarkStringRef) -> *const u8;
extern fn LLVMRemarkStringGetLen(String: LLVMRemarkStringRef) -> u32;
struct LLVMRemarkOpaqueDebugLoc;
type LLVMRemarkDebugLocRef :: *mut LLVMRemarkOpaqueDebugLoc;
extern fn LLVMRemarkDebugLocGetSourceFilePath(DL: LLVMRemarkDebugLocRef) -> LLVMRemarkStringRef;
extern fn LLVMRemarkDebugLocGetSourceLine(DL: LLVMRemarkDebugLocRef) -> u32;
extern fn LLVMRemarkDebugLocGetSourceColumn(DL: LLVMRemarkDebugLocRef) -> u32;
struct LLVMRemarkOpaqueArg;
type LLVMRemarkArgRef :: *mut LLVMRemarkOpaqueArg;
extern fn LLVMRemarkArgGetKey(Arg: LLVMRemarkArgRef) -> LLVMRemarkStringRef;
extern fn LLVMRemarkArgGetValue(Arg: LLVMRemarkArgRef) -> LLVMRemarkStringRef;
extern fn LLVMRemarkArgGetDebugLoc(Arg: LLVMRemarkArgRef) -> LLVMRemarkDebugLocRef;
struct LLVMRemarkOpaqueEntry;
type LLVMRemarkEntryRef :: *mut LLVMRemarkOpaqueEntry;
extern fn LLVMRemarkEntryDispose(Remark: LLVMRemarkEntryRef) -> void;
extern fn LLVMRemarkEntryGetType(Remark: LLVMRemarkEntryRef) -> LLVMRemarkType;
extern fn LLVMRemarkEntryGetPassName(Remark: LLVMRemarkEntryRef) -> LLVMRemarkStringRef;
extern fn LLVMRemarkEntryGetRemarkName(Remark: LLVMRemarkEntryRef) -> LLVMRemarkStringRef;
extern fn LLVMRemarkEntryGetFunctionName(Remark: LLVMRemarkEntryRef) -> LLVMRemarkStringRef;
extern fn LLVMRemarkEntryGetDebugLoc(Remark: LLVMRemarkEntryRef) -> LLVMRemarkDebugLocRef;
extern fn LLVMRemarkEntryGetHotness(Remark: LLVMRemarkEntryRef) -> u64;
extern fn LLVMRemarkEntryGetNumArgs(Remark: LLVMRemarkEntryRef) -> u32;
extern fn LLVMRemarkEntryGetFirstArg(Remark: LLVMRemarkEntryRef) -> LLVMRemarkArgRef;
extern fn LLVMRemarkEntryGetNextArg(It: LLVMRemarkArgRef, Remark: LLVMRemarkEntryRef) -> LLVMRemarkArgRef;
struct LLVMRemarkOpaqueParser;
type LLVMRemarkParserRef :: *mut LLVMRemarkOpaqueParser;
extern fn LLVMRemarkParserCreateYAML(Buf: *const void, Size: u64) -> LLVMRemarkParserRef;
extern fn LLVMRemarkParserCreateBitstream(Buf: *const void, Size: u64) -> LLVMRemarkParserRef;
extern fn LLVMRemarkParserGetNext(Parser: LLVMRemarkParserRef) -> LLVMRemarkEntryRef;
extern fn LLVMRemarkParserHasError(Parser: LLVMRemarkParserRef) -> bool;
extern fn LLVMRemarkParserGetErrorMessage(Parser: LLVMRemarkParserRef) -> *const u8;
extern fn LLVMRemarkParserDispose(Parser: LLVMRemarkParserRef) -> void;
extern fn LLVMRemarkVersion() -> u32;
extern fn LLVMLoadLibraryPermanently(Filename: *const u8) -> bool;
extern fn LLVMParseCommandLineOptions(argc: s32, argv: *const *const u8, Overview: *const u8) -> void;
extern fn LLVMSearchForAddressOfSymbol(symbolName: *const u8) -> *mut void;
extern fn LLVMAddSymbol(symbolName: *const u8, symbolValue: *mut void) -> void;

struct LLVMOpaquePassBuilderOptions;

type LLVMPassBuilderOptionsRef :: *mut LLVMOpaquePassBuilderOptions;
extern fn LLVMRunPasses(M: LLVMModuleRef, Passes: *const u8, TM: LLVMTargetMachineRef, Options: LLVMPassBuilderOptionsRef) -> LLVMErrorRef;
extern fn LLVMCreatePassBuilderOptions() -> LLVMPassBuilderOptionsRef;
extern fn LLVMPassBuilderOptionsSetVerifyEach(Options: LLVMPassBuilderOptionsRef, VerifyEach: bool) -> void;
extern fn LLVMPassBuilderOptionsSetDebugLogging(Options: LLVMPassBuilderOptionsRef, DebugLogging: bool) -> void;
extern fn LLVMPassBuilderOptionsSetLoopInterleaving(Options: LLVMPassBuilderOptionsRef, LoopInterleaving: bool) -> void;
extern fn LLVMPassBuilderOptionsSetLoopVectorization(Options: LLVMPassBuilderOptionsRef, LoopVectorization: bool) -> void;
extern fn LLVMPassBuilderOptionsSetSLPVectorization(Options: LLVMPassBuilderOptionsRef, SLPVectorization: bool) -> void;
extern fn LLVMPassBuilderOptionsSetLoopUnrolling(Options: LLVMPassBuilderOptionsRef, LoopUnrolling: bool) -> void;
extern fn LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll(Options: LLVMPassBuilderOptionsRef, ForgetAllSCEVInLoopUnroll: bool) -> void;
extern fn LLVMPassBuilderOptionsSetLicmMssaOptCap(Options: LLVMPassBuilderOptionsRef, LicmMssaOptCap: u32) -> void;
extern fn LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap(Options: LLVMPassBuilderOptionsRef, LicmMssaNoAccForPromotionCap: u32) -> void;
extern fn LLVMPassBuilderOptionsSetCallGraphProfile(Options: LLVMPassBuilderOptionsRef, CallGraphProfile: bool) -> void;
extern fn LLVMPassBuilderOptionsSetMergeFunctions(Options: LLVMPassBuilderOptionsRef, MergeFunctions: bool) -> void;
extern fn LLVMPassBuilderOptionsSetInlinerThreshold(Options: LLVMPassBuilderOptionsRef, Threshold: s32) -> void;
extern fn LLVMDisposePassBuilderOptions(Options: LLVMPassBuilderOptionsRef) -> void;
