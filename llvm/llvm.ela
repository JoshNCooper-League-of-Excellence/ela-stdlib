
#c_flags " $(llvm-config --cflags --ldflags --libs) "

/*
  These bindings were auto generated by 'ela-bindings-generator', from 'llvm.c' at 2025-04-01 16:10:48. 
*/

alias bool :: s32;
struct LLVMOpaqueMemoryBuffer;
alias LLVMMemoryBufferRef :: *mut LLVMOpaqueMemoryBuffer;
struct LLVMOpaqueContext;
alias LLVMContextRef :: *mut LLVMOpaqueContext;
struct LLVMOpaqueModule;
alias LLVMModuleRef :: *mut LLVMOpaqueModule;
struct LLVMOpaqueType;
alias LLVMTypeRef :: *mut LLVMOpaqueType;
struct LLVMOpaqueValue;
alias LLVMValueRef :: *mut LLVMOpaqueValue;
struct LLVMOpaqueBasicBlock;
alias LLVMBasicBlockRef :: *mut LLVMOpaqueBasicBlock;
struct LLVMOpaqueMetadata;
alias LLVMMetadataRef :: *mut LLVMOpaqueMetadata;
struct LLVMOpaqueNamedMDNode;
alias LLVMNamedMDNodeRef :: *mut LLVMOpaqueNamedMDNode;
struct LLVMOpaqueValueMetadataEntry;
alias LLVMValueMetadataEntry :: LLVMOpaqueValueMetadataEntry;
struct LLVMOpaqueBuilder;
alias LLVMBuilderRef :: *mut LLVMOpaqueBuilder;
struct LLVMOpaqueDIBuilder;
alias LLVMDIBuilderRef :: *mut LLVMOpaqueDIBuilder;
struct LLVMOpaqueModuleProvider;
alias LLVMModuleProviderRef :: *mut LLVMOpaqueModuleProvider;
struct LLVMOpaquePassManager;
alias LLVMPassManagerRef :: *mut LLVMOpaquePassManager;
struct LLVMOpaqueUse;
alias LLVMUseRef :: *mut LLVMOpaqueUse;
struct LLVMOpaqueOperandBundle;
alias LLVMOperandBundleRef :: *mut LLVMOpaqueOperandBundle;
struct LLVMOpaqueAttributeRef;
alias LLVMAttributeRef :: *mut LLVMOpaqueAttributeRef;
struct LLVMOpaqueDiagnosticInfo;
alias LLVMDiagnosticInfoRef :: *mut LLVMOpaqueDiagnosticInfo;
struct LLVMComdat;
alias LLVMComdatRef :: *mut LLVMComdat;
struct LLVMOpaqueModuleFlagEntry;
alias LLVMModuleFlagEntry :: LLVMOpaqueModuleFlagEntry;
struct LLVMOpaqueJITEventListener;
alias LLVMJITEventListenerRef :: *mut LLVMOpaqueJITEventListener;
struct LLVMOpaqueBinary;
alias LLVMBinaryRef :: *mut LLVMOpaqueBinary;
struct LLVMOpaqueDbgRecord;
alias LLVMDbgRecordRef :: *mut LLVMOpaqueDbgRecord;
enum LLVMVerifierFailureAction {
  LLVMAbortProcessAction = 0,
  LLVMPrintMessageAction = 1,
  LLVMReturnStatusAction = 2,
};
#foreign fn LLVMVerifyModule(M: LLVMModuleRef, Action: LLVMVerifierFailureAction, OutMessage: *mut *mut u8) -> bool;
#foreign fn LLVMVerifyFunction(Fn: LLVMValueRef, Action: LLVMVerifierFailureAction) -> bool;
#foreign fn LLVMViewFunctionCFG(Fn: LLVMValueRef) -> void;
#foreign fn LLVMViewFunctionCFGOnly(Fn: LLVMValueRef) -> void;
#foreign fn LLVMParseBitcode(MemBuf: LLVMMemoryBufferRef, OutModule: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> bool;
#foreign fn LLVMParseBitcode2(MemBuf: LLVMMemoryBufferRef, OutModule: *mut LLVMModuleRef) -> bool;
#foreign fn LLVMParseBitcodeInContext(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutModule: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> bool;
#foreign fn LLVMParseBitcodeInContext2(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutModule: *mut LLVMModuleRef) -> bool;
#foreign fn LLVMGetBitcodeModuleInContext(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> bool;
#foreign fn LLVMGetBitcodeModuleInContext2(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef) -> bool;
#foreign fn LLVMGetBitcodeModule(MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> bool;
#foreign fn LLVMGetBitcodeModule2(MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef) -> bool;
#foreign fn LLVMWriteBitcodeToFile(M: LLVMModuleRef, Path: *const u8) -> s32;
#foreign fn LLVMWriteBitcodeToFD(M: LLVMModuleRef, FD: s32, ShouldClose: s32, Unbuffered: s32) -> s32;
#foreign fn LLVMWriteBitcodeToFileHandle(M: LLVMModuleRef, Handle: s32) -> s32;
#foreign fn LLVMWriteBitcodeToMemoryBuffer(M: LLVMModuleRef) -> LLVMMemoryBufferRef;
enum LLVMComdatSelectionKind {
  LLVMAnyComdatSelectionKind = 0,
  LLVMExactMatchComdatSelectionKind = 1,
  LLVMLargestComdatSelectionKind = 2,
  LLVMNoDeduplicateComdatSelectionKind = 3,
  LLVMSameSizeComdatSelectionKind = 4,
};
#foreign fn LLVMGetOrInsertComdat(M: LLVMModuleRef, Name: *const u8) -> LLVMComdatRef;
#foreign fn LLVMGetComdat(V: LLVMValueRef) -> LLVMComdatRef;
#foreign fn LLVMSetComdat(V: LLVMValueRef, C: LLVMComdatRef) -> void;
#foreign fn LLVMGetComdatSelectionKind(C: LLVMComdatRef) -> LLVMComdatSelectionKind;
#foreign fn LLVMSetComdatSelectionKind(C: LLVMComdatRef, Kind: LLVMComdatSelectionKind) -> void;
alias LLVMFatalErrorHandler :: fn*(*const u8) -> void;
#foreign fn LLVMInstallFatalErrorHandler(Handler: LLVMFatalErrorHandler) -> void;
#foreign fn LLVMResetFatalErrorHandler() -> void;
#foreign fn LLVMEnablePrettyStackTrace() -> void;
enum LLVMOpcode {
  LLVMRet = 1,
  LLVMBr = 2,
  LLVMSwitch = 3,
  LLVMIndirectBr = 4,
  LLVMInvoke = 5,
  LLVMUnreachable = 7,
  LLVMCallBr = 67,
  LLVMFNeg = 66,
  LLVMAdd = 8,
  LLVMFAdd = 9,
  LLVMSub = 10,
  LLVMFSub = 11,
  LLVMMul = 12,
  LLVMFMul = 13,
  LLVMUDiv = 14,
  LLVMSDiv = 15,
  LLVMFDiv = 16,
  LLVMURem = 17,
  LLVMSRem = 18,
  LLVMFRem = 19,
  LLVMShl = 20,
  LLVMLShr = 21,
  LLVMAShr = 22,
  LLVMAnd = 23,
  LLVMOr = 24,
  LLVMXor = 25,
  LLVMAlloca = 26,
  LLVMLoad = 27,
  LLVMStore = 28,
  LLVMGetElementPtr = 29,
  LLVMTrunc = 30,
  LLVMZExt = 31,
  LLVMSExt = 32,
  LLVMFPToUI = 33,
  LLVMFPToSI = 34,
  LLVMUIToFP = 35,
  LLVMSIToFP = 36,
  LLVMFPTrunc = 37,
  LLVMFPExt = 38,
  LLVMPtrToInt = 39,
  LLVMIntToPtr = 40,
  LLVMBitCast = 41,
  LLVMAddrSpaceCast = 60,
  LLVMICmp = 42,
  LLVMFCmp = 43,
  LLVMPHI = 44,
  LLVMCall = 45,
  LLVMSelect = 46,
  LLVMUserOp1 = 47,
  LLVMUserOp2 = 48,
  LLVMVAArg = 49,
  LLVMExtractElement = 50,
  LLVMInsertElement = 51,
  LLVMShuffleVector = 52,
  LLVMExtractValue = 53,
  LLVMInsertValue = 54,
  LLVMFreeze = 68,
  LLVMFence = 55,
  LLVMAtomicCmpXchg = 56,
  LLVMAtomicRMW = 57,
  LLVMResume = 58,
  LLVMLandingPad = 59,
  LLVMCleanupRet = 61,
  LLVMCatchRet = 62,
  LLVMCatchPad = 63,
  LLVMCleanupPad = 64,
  LLVMCatchSwitch = 65,
};
enum LLVMTypeKind {
  LLVMVoidTypeKind = 0,
  LLVMHalfTypeKind = 1,
  LLVMFloatTypeKind = 2,
  LLVMDoubleTypeKind = 3,
  LLVMX86_FP80TypeKind = 4,
  LLVMFP128TypeKind = 5,
  LLVMPPC_FP128TypeKind = 6,
  LLVMLabelTypeKind = 7,
  LLVMIntegerTypeKind = 8,
  LLVMFunctionTypeKind = 9,
  LLVMStructTypeKind = 10,
  LLVMArrayTypeKind = 11,
  LLVMPointerTypeKind = 12,
  LLVMVectorTypeKind = 13,
  LLVMMetadataTypeKind = 14,
  LLVMX86_MMXTypeKind = 15,
  LLVMTokenTypeKind = 16,
  LLVMScalableVectorTypeKind = 17,
  LLVMBFloatTypeKind = 18,
  LLVMX86_AMXTypeKind = 19,
  LLVMTargetExtTypeKind = 20,
};
enum LLVMLinkage {
  LLVMExternalLinkage = 0,
  LLVMAvailableExternallyLinkage = 1,
  LLVMLinkOnceAnyLinkage = 2,
  LLVMLinkOnceODRLinkage = 3,
  LLVMLinkOnceODRAutoHideLinkage = 4,
  LLVMWeakAnyLinkage = 5,
  LLVMWeakODRLinkage = 6,
  LLVMAppendingLinkage = 7,
  LLVMInternalLinkage = 8,
  LLVMPrivateLinkage = 9,
  LLVMDLLImportLinkage = 10,
  LLVMDLLExportLinkage = 11,
  LLVMExternalWeakLinkage = 12,
  LLVMGhostLinkage = 13,
  LLVMCommonLinkage = 14,
  LLVMLinkerPrivateLinkage = 15,
  LLVMLinkerPrivateWeakLinkage = 16,
};
enum LLVMVisibility {
  LLVMDefaultVisibility = 0,
  LLVMHiddenVisibility = 1,
  LLVMProtectedVisibility = 2,
};
enum LLVMUnnamedAddr {
  LLVMNoUnnamedAddr = 0,
  LLVMLocalUnnamedAddr = 1,
  LLVMGlobalUnnamedAddr = 2,
};
enum LLVMDLLStorageClass {
  LLVMDefaultStorageClass = 0,
  LLVMDLLImportStorageClass = 1,
  LLVMDLLExportStorageClass = 2,
};
enum LLVMCallConv {
  LLVMCCallConv = 0,
  LLVMFastCallConv = 8,
  LLVMColdCallConv = 9,
  LLVMGHCCallConv = 10,
  LLVMHiPECallConv = 11,
  LLVMAnyRegCallConv = 13,
  LLVMPreserveMostCallConv = 14,
  LLVMPreserveAllCallConv = 15,
  LLVMSwiftCallConv = 16,
  LLVMCXXFASTTLSCallConv = 17,
  LLVMX86StdcallCallConv = 64,
  LLVMX86FastcallCallConv = 65,
  LLVMARMAPCSCallConv = 66,
  LLVMARMAAPCSCallConv = 67,
  LLVMARMAAPCSVFPCallConv = 68,
  LLVMMSP430INTRCallConv = 69,
  LLVMX86ThisCallCallConv = 70,
  LLVMPTXKernelCallConv = 71,
  LLVMPTXDeviceCallConv = 72,
  LLVMSPIRFUNCCallConv = 75,
  LLVMSPIRKERNELCallConv = 76,
  LLVMIntelOCLBICallConv = 77,
  LLVMX8664SysVCallConv = 78,
  LLVMWin64CallConv = 79,
  LLVMX86VectorCallCallConv = 80,
  LLVMHHVMCallConv = 81,
  LLVMHHVMCCallConv = 82,
  LLVMX86INTRCallConv = 83,
  LLVMAVRINTRCallConv = 84,
  LLVMAVRSIGNALCallConv = 85,
  LLVMAVRBUILTINCallConv = 86,
  LLVMAMDGPUVSCallConv = 87,
  LLVMAMDGPUGSCallConv = 88,
  LLVMAMDGPUPSCallConv = 89,
  LLVMAMDGPUCSCallConv = 90,
  LLVMAMDGPUKERNELCallConv = 91,
  LLVMX86RegCallCallConv = 92,
  LLVMAMDGPUHSCallConv = 93,
  LLVMMSP430BUILTINCallConv = 94,
  LLVMAMDGPULSCallConv = 95,
  LLVMAMDGPUESCallConv = 96,
};
enum LLVMValueKind {
  LLVMArgumentValueKind = 0,
  LLVMBasicBlockValueKind = 1,
  LLVMMemoryUseValueKind = 2,
  LLVMMemoryDefValueKind = 3,
  LLVMMemoryPhiValueKind = 4,
  LLVMFunctionValueKind = 5,
  LLVMGlobalAliasValueKind = 6,
  LLVMGlobalIFuncValueKind = 7,
  LLVMGlobalVariableValueKind = 8,
  LLVMBlockAddressValueKind = 9,
  LLVMConstantExprValueKind = 10,
  LLVMConstantArrayValueKind = 11,
  LLVMConstantStructValueKind = 12,
  LLVMConstantVectorValueKind = 13,
  LLVMUndefValueValueKind = 14,
  LLVMConstantAggregateZeroValueKind = 15,
  LLVMConstantDataArrayValueKind = 16,
  LLVMConstantDataVectorValueKind = 17,
  LLVMConstantIntValueKind = 18,
  LLVMConstantFPValueKind = 19,
  LLVMConstantPointerNullValueKind = 20,
  LLVMConstantTokenNoneValueKind = 21,
  LLVMMetadataAsValueValueKind = 22,
  LLVMInlineAsmValueKind = 23,
  LLVMInstructionValueKind = 24,
  LLVMPoisonValueValueKind = 25,
  LLVMConstantTargetNoneValueKind = 26,
  LLVMConstantPtrAuthValueKind = 27,
};
enum LLVMIntPredicate {
  LLVMIntEQ = 32,
  LLVMIntNE = 33,
  LLVMIntUGT = 34,
  LLVMIntUGE = 35,
  LLVMIntULT = 36,
  LLVMIntULE = 37,
  LLVMIntSGT = 38,
  LLVMIntSGE = 39,
  LLVMIntSLT = 40,
  LLVMIntSLE = 41,
};
enum LLVMRealPredicate {
  LLVMRealPredicateFalse = 0,
  LLVMRealOEQ = 1,
  LLVMRealOGT = 2,
  LLVMRealOGE = 3,
  LLVMRealOLT = 4,
  LLVMRealOLE = 5,
  LLVMRealONE = 6,
  LLVMRealORD = 7,
  LLVMRealUNO = 8,
  LLVMRealUEQ = 9,
  LLVMRealUGT = 10,
  LLVMRealUGE = 11,
  LLVMRealULT = 12,
  LLVMRealULE = 13,
  LLVMRealUNE = 14,
  LLVMRealPredicateTrue = 15,
};
enum LLVMLandingPadClauseTy {
  LLVMLandingPadCatch = 0,
  LLVMLandingPadFilter = 1,
};
enum LLVMThreadLocalMode {
  LLVMNotThreadLocal = 0,
  LLVMGeneralDynamicTLSModel = 1,
  LLVMLocalDynamicTLSModel = 2,
  LLVMInitialExecTLSModel = 3,
  LLVMLocalExecTLSModel = 4,
};
enum LLVMAtomicOrdering {
  LLVMAtomicOrderingNotAtomic = 0,
  LLVMAtomicOrderingUnordered = 1,
  LLVMAtomicOrderingMonotonic = 2,
  LLVMAtomicOrderingAcquire = 4,
  LLVMAtomicOrderingRelease = 5,
  LLVMAtomicOrderingAcquireRelease = 6,
  LLVMAtomicOrderingSequentiallyConsistent = 7,
};
enum LLVMAtomicRMWBinOp {
  LLVMAtomicRMWBinOpXchg = 0,
  LLVMAtomicRMWBinOpAdd = 1,
  LLVMAtomicRMWBinOpSub = 2,
  LLVMAtomicRMWBinOpAnd = 3,
  LLVMAtomicRMWBinOpNand = 4,
  LLVMAtomicRMWBinOpOr = 5,
  LLVMAtomicRMWBinOpXor = 6,
  LLVMAtomicRMWBinOpMax = 7,
  LLVMAtomicRMWBinOpMin = 8,
  LLVMAtomicRMWBinOpUMax = 9,
  LLVMAtomicRMWBinOpUMin = 10,
  LLVMAtomicRMWBinOpFAdd = 11,
  LLVMAtomicRMWBinOpFSub = 12,
  LLVMAtomicRMWBinOpFMax = 13,
  LLVMAtomicRMWBinOpFMin = 14,
  LLVMAtomicRMWBinOpUIncWrap = 15,
  LLVMAtomicRMWBinOpUDecWrap = 16,
};
enum LLVMDiagnosticSeverity {
  LLVMDSError = 0,
  LLVMDSWarning = 1,
  LLVMDSRemark = 2,
  LLVMDSNote = 3,
};
enum LLVMInlineAsmDialect {
  LLVMInlineAsmDialectATT = 0,
  LLVMInlineAsmDialectIntel = 1,
};
enum LLVMModuleFlagBehavior {
  LLVMModuleFlagBehaviorError = 0,
  LLVMModuleFlagBehaviorWarning = 1,
  LLVMModuleFlagBehaviorRequire = 2,
  LLVMModuleFlagBehaviorOverride = 3,
  LLVMModuleFlagBehaviorAppend = 4,
  LLVMModuleFlagBehaviorAppendUnique = 5,
};
enum __bind_gen__anon_D4 {
  LLVMAttributeReturnIndex = 0,
  LLVMAttributeFunctionIndex = -1,
};
alias LLVMAttributeIndex :: u32;
enum LLVMTailCallKind {
  LLVMTailCallKindNone = 0,
  LLVMTailCallKindTail = 1,
  LLVMTailCallKindMustTail = 2,
  LLVMTailCallKindNoTail = 3,
};
enum __bind_gen__anon_D5 {
  LLVMFastMathAllowReassoc = 1,
  LLVMFastMathNoNaNs = 2,
  LLVMFastMathNoInfs = 4,
  LLVMFastMathNoSignedZeros = 8,
  LLVMFastMathAllowReciprocal = 16,
  LLVMFastMathAllowContract = 32,
  LLVMFastMathApproxFunc = 64,
  LLVMFastMathNone = 0,
  LLVMFastMathAll = 127,
};
alias LLVMFastMathFlags :: u32;
enum __bind_gen__anon_D6 {
  LLVMGEPFlagInBounds = 1,
  LLVMGEPFlagNUSW = 2,
  LLVMGEPFlagNUW = 4,
};
alias LLVMGEPNoWrapFlags :: u32;
#foreign fn LLVMShutdown() -> void;
#foreign fn LLVMGetVersion(Major: *mut u32, Minor: *mut u32, Patch: *mut u32) -> void;
#foreign fn LLVMCreateMessage(Message: *const u8) -> *mut u8;
#foreign fn LLVMDisposeMessage(Message: *mut u8) -> void;
alias LLVMDiagnosticHandler :: fn*(LLVMDiagnosticInfoRef, *mut void) -> void;
alias LLVMYieldCallback :: fn*(LLVMContextRef, *mut void) -> void;
#foreign fn LLVMContextCreate() -> LLVMContextRef;
#foreign fn LLVMGetGlobalContext() -> LLVMContextRef;
#foreign fn LLVMContextSetDiagnosticHandler(C: LLVMContextRef, Handler: LLVMDiagnosticHandler, DiagnosticContext: *mut void) -> void;
#foreign fn LLVMContextGetDiagnosticHandler(C: LLVMContextRef) -> LLVMDiagnosticHandler;
#foreign fn LLVMContextGetDiagnosticContext(C: LLVMContextRef) -> *mut void;
#foreign fn LLVMContextSetYieldCallback(C: LLVMContextRef, Callback: LLVMYieldCallback, OpaqueHandle: *mut void) -> void;
#foreign fn LLVMContextShouldDiscardValueNames(C: LLVMContextRef) -> bool;
#foreign fn LLVMContextSetDiscardValueNames(C: LLVMContextRef, Discard: bool) -> void;
#foreign fn LLVMContextDispose(C: LLVMContextRef) -> void;
#foreign fn LLVMGetDiagInfoDescription(DI: LLVMDiagnosticInfoRef) -> *mut u8;
#foreign fn LLVMGetDiagInfoSeverity(DI: LLVMDiagnosticInfoRef) -> LLVMDiagnosticSeverity;
#foreign fn LLVMGetMDKindIDInContext(C: LLVMContextRef, Name: *const u8, SLen: u32) -> u32;
#foreign fn LLVMGetMDKindID(Name: *const u8, SLen: u32) -> u32;
#foreign fn LLVMGetEnumAttributeKindForName(Name: *const u8, SLen: u64) -> u32;
#foreign fn LLVMGetLastEnumAttributeKind() -> u32;
#foreign fn LLVMCreateEnumAttribute(C: LLVMContextRef, KindID: u32, Val: u64) -> LLVMAttributeRef;
#foreign fn LLVMGetEnumAttributeKind(A: LLVMAttributeRef) -> u32;
#foreign fn LLVMGetEnumAttributeValue(A: LLVMAttributeRef) -> u64;
#foreign fn LLVMCreateTypeAttribute(C: LLVMContextRef, KindID: u32, type_ref: LLVMTypeRef) -> LLVMAttributeRef;
#foreign fn LLVMGetTypeAttributeValue(A: LLVMAttributeRef) -> LLVMTypeRef;
#foreign fn LLVMCreateConstantRangeAttribute(C: LLVMContextRef, KindID: u32, NumBits: u32, LowerWords: *const u64, UpperWords: *const u64) -> LLVMAttributeRef;
#foreign fn LLVMCreateStringAttribute(C: LLVMContextRef, K: *const u8, KLength: u32, V: *const u8, VLength: u32) -> LLVMAttributeRef;
#foreign fn LLVMGetStringAttributeKind(A: LLVMAttributeRef, Length: *mut u32) -> *const u8;
#foreign fn LLVMGetStringAttributeValue(A: LLVMAttributeRef, Length: *mut u32) -> *const u8;
#foreign fn LLVMIsEnumAttribute(A: LLVMAttributeRef) -> bool;
#foreign fn LLVMIsStringAttribute(A: LLVMAttributeRef) -> bool;
#foreign fn LLVMIsTypeAttribute(A: LLVMAttributeRef) -> bool;
#foreign fn LLVMGetTypeByName2(C: LLVMContextRef, Name: *const u8) -> LLVMTypeRef;
#foreign fn LLVMModuleCreateWithName(ModuleID: *const u8) -> LLVMModuleRef;
#foreign fn LLVMModuleCreateWithNameInContext(ModuleID: *const u8, C: LLVMContextRef) -> LLVMModuleRef;
#foreign fn LLVMCloneModule(M: LLVMModuleRef) -> LLVMModuleRef;
#foreign fn LLVMDisposeModule(M: LLVMModuleRef) -> void;
#foreign fn LLVMIsNewDbgInfoFormat(M: LLVMModuleRef) -> bool;
#foreign fn LLVMSetIsNewDbgInfoFormat(M: LLVMModuleRef, UseNewFormat: bool) -> void;
#foreign fn LLVMGetModuleIdentifier(M: LLVMModuleRef, Len: *mut u64) -> *const u8;
#foreign fn LLVMSetModuleIdentifier(M: LLVMModuleRef, Ident: *const u8, Len: u64) -> void;
#foreign fn LLVMGetSourceFileName(M: LLVMModuleRef, Len: *mut u64) -> *const u8;
#foreign fn LLVMSetSourceFileName(M: LLVMModuleRef, Name: *const u8, Len: u64) -> void;
#foreign fn LLVMGetDataLayoutStr(M: LLVMModuleRef) -> *const u8;
#foreign fn LLVMGetDataLayout(M: LLVMModuleRef) -> *const u8;
#foreign fn LLVMSetDataLayout(M: LLVMModuleRef, DataLayoutStr: *const u8) -> void;
#foreign fn LLVMGetTarget(M: LLVMModuleRef) -> *const u8;
#foreign fn LLVMSetTarget(M: LLVMModuleRef, Triple: *const u8) -> void;
#foreign fn LLVMCopyModuleFlagsMetadata(M: LLVMModuleRef, Len: *mut u64) -> *mut LLVMModuleFlagEntry;
#foreign fn LLVMDisposeModuleFlagsMetadata(Entries: *mut LLVMModuleFlagEntry) -> void;
#foreign fn LLVMModuleFlagEntriesGetFlagBehavior(Entries: *mut LLVMModuleFlagEntry, Index: u32) -> LLVMModuleFlagBehavior;
#foreign fn LLVMModuleFlagEntriesGetKey(Entries: *mut LLVMModuleFlagEntry, Index: u32, Len: *mut u64) -> *const u8;
#foreign fn LLVMModuleFlagEntriesGetMetadata(Entries: *mut LLVMModuleFlagEntry, Index: u32) -> LLVMMetadataRef;
#foreign fn LLVMGetModuleFlag(M: LLVMModuleRef, Key: *const u8, KeyLen: u64) -> LLVMMetadataRef;
#foreign fn LLVMAddModuleFlag(M: LLVMModuleRef, Behavior: LLVMModuleFlagBehavior, Key: *const u8, KeyLen: u64, Val: LLVMMetadataRef) -> void;
#foreign fn LLVMDumpModule(M: LLVMModuleRef) -> void;
#foreign fn LLVMPrintModuleToFile(M: LLVMModuleRef, Filename: *const u8, ErrorMessage: *mut *mut u8) -> bool;
#foreign fn LLVMPrintModuleToString(M: LLVMModuleRef) -> *mut u8;
#foreign fn LLVMGetModuleInlineAsm(M: LLVMModuleRef, Len: *mut u64) -> *const u8;
#foreign fn LLVMSetModuleInlineAsm2(M: LLVMModuleRef, Asm: *const u8, Len: u64) -> void;
#foreign fn LLVMAppendModuleInlineAsm(M: LLVMModuleRef, Asm: *const u8, Len: u64) -> void;
#foreign fn LLVMGetInlineAsm(Ty: LLVMTypeRef, AsmString: *const u8, AsmStringSize: u64, Constraints: *const u8, ConstraintsSize: u64, HasSideEffects: bool, IsAlignStack: bool, Dialect: LLVMInlineAsmDialect, CanThrow: bool) -> LLVMValueRef;
#foreign fn LLVMGetInlineAsmAsmString(InlineAsmVal: LLVMValueRef, Len: *mut u64) -> *const u8;
#foreign fn LLVMGetInlineAsmConstraintString(InlineAsmVal: LLVMValueRef, Len: *mut u64) -> *const u8;
#foreign fn LLVMGetInlineAsmDialect(InlineAsmVal: LLVMValueRef) -> LLVMInlineAsmDialect;
#foreign fn LLVMGetInlineAsmFunctionType(InlineAsmVal: LLVMValueRef) -> LLVMTypeRef;
#foreign fn LLVMGetInlineAsmHasSideEffects(InlineAsmVal: LLVMValueRef) -> bool;
#foreign fn LLVMGetInlineAsmNeedsAlignedStack(InlineAsmVal: LLVMValueRef) -> bool;
#foreign fn LLVMGetInlineAsmCanUnwind(InlineAsmVal: LLVMValueRef) -> bool;
#foreign fn LLVMGetModuleContext(M: LLVMModuleRef) -> LLVMContextRef;
#foreign fn LLVMGetTypeByName(M: LLVMModuleRef, Name: *const u8) -> LLVMTypeRef;
#foreign fn LLVMGetFirstNamedMetadata(M: LLVMModuleRef) -> LLVMNamedMDNodeRef;
#foreign fn LLVMGetLastNamedMetadata(M: LLVMModuleRef) -> LLVMNamedMDNodeRef;
#foreign fn LLVMGetNextNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef) -> LLVMNamedMDNodeRef;
#foreign fn LLVMGetPreviousNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef) -> LLVMNamedMDNodeRef;
#foreign fn LLVMGetNamedMetadata(M: LLVMModuleRef, Name: *const u8, NameLen: u64) -> LLVMNamedMDNodeRef;
#foreign fn LLVMGetOrInsertNamedMetadata(M: LLVMModuleRef, Name: *const u8, NameLen: u64) -> LLVMNamedMDNodeRef;
#foreign fn LLVMGetNamedMetadataName(NamedMD: LLVMNamedMDNodeRef, NameLen: *mut u64) -> *const u8;
#foreign fn LLVMGetNamedMetadataNumOperands(M: LLVMModuleRef, Name: *const u8) -> u32;
#foreign fn LLVMGetNamedMetadataOperands(M: LLVMModuleRef, Name: *const u8, Dest: *mut LLVMValueRef) -> void;
#foreign fn LLVMAddNamedMetadataOperand(M: LLVMModuleRef, Name: *const u8, Val: LLVMValueRef) -> void;
#foreign fn LLVMGetDebugLocDirectory(Val: LLVMValueRef, Length: *mut u32) -> *const u8;
#foreign fn LLVMGetDebugLocFilename(Val: LLVMValueRef, Length: *mut u32) -> *const u8;
#foreign fn LLVMGetDebugLocLine(Val: LLVMValueRef) -> u32;
#foreign fn LLVMGetDebugLocColumn(Val: LLVMValueRef) -> u32;
#foreign fn LLVMAddFunction(M: LLVMModuleRef, Name: *const u8, FunctionTy: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMGetNamedFunction(M: LLVMModuleRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMGetFirstFunction(M: LLVMModuleRef) -> LLVMValueRef;
#foreign fn LLVMGetLastFunction(M: LLVMModuleRef) -> LLVMValueRef;
#foreign fn LLVMGetNextFunction(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetPreviousFunction(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMSetModuleInlineAsm(M: LLVMModuleRef, Asm: *const u8) -> void;
#foreign fn LLVMGetTypeKind(Ty: LLVMTypeRef) -> LLVMTypeKind;
#foreign fn LLVMTypeIsSized(Ty: LLVMTypeRef) -> bool;
#foreign fn LLVMGetTypeContext(Ty: LLVMTypeRef) -> LLVMContextRef;
#foreign fn LLVMDumpType(Val: LLVMTypeRef) -> void;
#foreign fn LLVMPrintTypeToString(Val: LLVMTypeRef) -> *mut u8;
#foreign fn LLVMInt1TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMInt8TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMInt16TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMInt32TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMInt64TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMInt128TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMIntTypeInContext(C: LLVMContextRef, NumBits: u32) -> LLVMTypeRef;
#foreign fn LLVMInt1Type() -> LLVMTypeRef;
#foreign fn LLVMInt8Type() -> LLVMTypeRef;
#foreign fn LLVMInt16Type() -> LLVMTypeRef;
#foreign fn LLVMInt32Type() -> LLVMTypeRef;
#foreign fn LLVMInt64Type() -> LLVMTypeRef;
#foreign fn LLVMInt128Type() -> LLVMTypeRef;
#foreign fn LLVMIntType(NumBits: u32) -> LLVMTypeRef;
#foreign fn LLVMGetIntTypeWidth(IntegerTy: LLVMTypeRef) -> u32;
#foreign fn LLVMHalfTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMBFloatTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMFloatTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMDoubleTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMX86FP80TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMFP128TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMPPCFP128TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMHalfType() -> LLVMTypeRef;
#foreign fn LLVMBFloatType() -> LLVMTypeRef;
#foreign fn LLVMFloatType() -> LLVMTypeRef;
#foreign fn LLVMDoubleType() -> LLVMTypeRef;
#foreign fn LLVMX86FP80Type() -> LLVMTypeRef;
#foreign fn LLVMFP128Type() -> LLVMTypeRef;
#foreign fn LLVMPPCFP128Type() -> LLVMTypeRef;
#foreign fn LLVMFunctionType(ReturnType: LLVMTypeRef, ParamTypes: *mut LLVMTypeRef, ParamCount: u32, IsVarArg: bool) -> LLVMTypeRef;
#foreign fn LLVMIsFunctionVarArg(FunctionTy: LLVMTypeRef) -> bool;
#foreign fn LLVMGetReturnType(FunctionTy: LLVMTypeRef) -> LLVMTypeRef;
#foreign fn LLVMCountParamTypes(FunctionTy: LLVMTypeRef) -> u32;
#foreign fn LLVMGetParamTypes(FunctionTy: LLVMTypeRef, Dest: *mut LLVMTypeRef) -> void;
#foreign fn LLVMStructTypeInContext(C: LLVMContextRef, ElementTypes: *mut LLVMTypeRef, ElementCount: u32, Packed: bool) -> LLVMTypeRef;
#foreign fn LLVMStructType(ElementTypes: *mut LLVMTypeRef, ElementCount: u32, Packed: bool) -> LLVMTypeRef;
#foreign fn LLVMStructCreateNamed(C: LLVMContextRef, Name: *const u8) -> LLVMTypeRef;
#foreign fn LLVMGetStructName(Ty: LLVMTypeRef) -> *const u8;
#foreign fn LLVMStructSetBody(StructTy: LLVMTypeRef, ElementTypes: *mut LLVMTypeRef, ElementCount: u32, Packed: bool) -> void;
#foreign fn LLVMCountStructElementTypes(StructTy: LLVMTypeRef) -> u32;
#foreign fn LLVMGetStructElementTypes(StructTy: LLVMTypeRef, Dest: *mut LLVMTypeRef) -> void;
#foreign fn LLVMStructGetTypeAtIndex(StructTy: LLVMTypeRef, i: u32) -> LLVMTypeRef;
#foreign fn LLVMIsPackedStruct(StructTy: LLVMTypeRef) -> bool;
#foreign fn LLVMIsOpaqueStruct(StructTy: LLVMTypeRef) -> bool;
#foreign fn LLVMIsLiteralStruct(StructTy: LLVMTypeRef) -> bool;
#foreign fn LLVMGetElementType(Ty: LLVMTypeRef) -> LLVMTypeRef;
#foreign fn LLVMGetSubtypes(Tp: LLVMTypeRef, Arr: *mut LLVMTypeRef) -> void;
#foreign fn LLVMGetNumContainedTypes(Tp: LLVMTypeRef) -> u32;
#foreign fn LLVMArrayType(ElementType: LLVMTypeRef, ElementCount: u32) -> LLVMTypeRef;
#foreign fn LLVMArrayType2(ElementType: LLVMTypeRef, ElementCount: u64) -> LLVMTypeRef;
#foreign fn LLVMGetArrayLength(ArrayTy: LLVMTypeRef) -> u32;
#foreign fn LLVMGetArrayLength2(ArrayTy: LLVMTypeRef) -> u64;
#foreign fn LLVMPointerType(ElementType: LLVMTypeRef, AddressSpace: u32) -> LLVMTypeRef;
#foreign fn LLVMPointerTypeIsOpaque(Ty: LLVMTypeRef) -> bool;
#foreign fn LLVMPointerTypeInContext(C: LLVMContextRef, AddressSpace: u32) -> LLVMTypeRef;
#foreign fn LLVMGetPointerAddressSpace(PointerTy: LLVMTypeRef) -> u32;
#foreign fn LLVMVectorType(ElementType: LLVMTypeRef, ElementCount: u32) -> LLVMTypeRef;
#foreign fn LLVMScalableVectorType(ElementType: LLVMTypeRef, ElementCount: u32) -> LLVMTypeRef;
#foreign fn LLVMGetVectorSize(VectorTy: LLVMTypeRef) -> u32;
#foreign fn LLVMGetConstantPtrAuthPointer(PtrAuth: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetConstantPtrAuthKey(PtrAuth: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetConstantPtrAuthDiscriminator(PtrAuth: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetConstantPtrAuthAddrDiscriminator(PtrAuth: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMVoidTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMLabelTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMX86MMXTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMX86AMXTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMTokenTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMMetadataTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
#foreign fn LLVMVoidType() -> LLVMTypeRef;
#foreign fn LLVMLabelType() -> LLVMTypeRef;
#foreign fn LLVMX86MMXType() -> LLVMTypeRef;
#foreign fn LLVMX86AMXType() -> LLVMTypeRef;
#foreign fn LLVMTargetExtTypeInContext(C: LLVMContextRef, Name: *const u8, TypeParams: *mut LLVMTypeRef, TypeParamCount: u32, IntParams: *mut u32, IntParamCount: u32) -> LLVMTypeRef;
#foreign fn LLVMGetTargetExtTypeName(TargetExtTy: LLVMTypeRef) -> *const u8;
#foreign fn LLVMGetTargetExtTypeNumTypeParams(TargetExtTy: LLVMTypeRef) -> u32;
#foreign fn LLVMGetTargetExtTypeTypeParam(TargetExtTy: LLVMTypeRef, Idx: u32) -> LLVMTypeRef;
#foreign fn LLVMGetTargetExtTypeNumIntParams(TargetExtTy: LLVMTypeRef) -> u32;
#foreign fn LLVMGetTargetExtTypeIntParam(TargetExtTy: LLVMTypeRef, Idx: u32) -> u32;
#foreign fn LLVMTypeOf(Val: LLVMValueRef) -> LLVMTypeRef;
#foreign fn LLVMGetValueKind(Val: LLVMValueRef) -> LLVMValueKind;
#foreign fn LLVMGetValueName2(Val: LLVMValueRef, Length: *mut u64) -> *const u8;
#foreign fn LLVMSetValueName2(Val: LLVMValueRef, Name: *const u8, NameLen: u64) -> void;
#foreign fn LLVMDumpValue(Val: LLVMValueRef) -> void;
#foreign fn LLVMPrintValueToString(Val: LLVMValueRef) -> *mut u8;
#foreign fn LLVMPrintDbgRecordToString(Record: LLVMDbgRecordRef) -> *mut u8;
#foreign fn LLVMReplaceAllUsesWith(OldVal: LLVMValueRef, NewVal: LLVMValueRef) -> void;
#foreign fn LLVMIsConstant(Val: LLVMValueRef) -> bool;
#foreign fn LLVMIsUndef(Val: LLVMValueRef) -> bool;
#foreign fn LLVMIsPoison(Val: LLVMValueRef) -> bool;
#foreign fn LLVMIsAArgument(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsABasicBlock(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAInlineAsm(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAUser(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstant(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsABlockAddress(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstantAggregateZero(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstantArray(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstantDataSequential(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstantDataArray(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstantDataVector(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstantExpr(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstantFP(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstantInt(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstantPointerNull(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstantStruct(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstantTokenNone(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstantVector(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAConstantPtrAuth(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAGlobalValue(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAGlobalAlias(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAGlobalObject(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAFunction(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAGlobalVariable(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAGlobalIFunc(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAUndefValue(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAPoisonValue(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAInstruction(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAUnaryOperator(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsABinaryOperator(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsACallInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAIntrinsicInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsADbgInfoIntrinsic(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsADbgVariableIntrinsic(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsADbgDeclareInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsADbgLabelInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAMemIntrinsic(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAMemCpyInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAMemMoveInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAMemSetInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsACmpInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAFCmpInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAICmpInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAExtractElementInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAGetElementPtrInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAInsertElementInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAInsertValueInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsALandingPadInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAPHINode(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsASelectInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAShuffleVectorInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAStoreInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsABranchInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAIndirectBrInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAInvokeInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAReturnInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsASwitchInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAUnreachableInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAResumeInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsACleanupReturnInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsACatchReturnInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsACatchSwitchInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsACallBrInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAFuncletPadInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsACatchPadInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsACleanupPadInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAUnaryInstruction(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAAllocaInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsACastInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAAddrSpaceCastInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsABitCastInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAFPExtInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAFPToSIInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAFPToUIInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAFPTruncInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAIntToPtrInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAPtrToIntInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsASExtInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsASIToFPInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsATruncInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAUIToFPInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAZExtInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAExtractValueInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsALoadInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAVAArgInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAFreezeInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAAtomicCmpXchgInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAAtomicRMWInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAFenceInst(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAMDNode(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAValueAsMetadata(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsAMDString(Val: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetValueName(Val: LLVMValueRef) -> *const u8;
#foreign fn LLVMSetValueName(Val: LLVMValueRef, Name: *const u8) -> void;
#foreign fn LLVMGetFirstUse(Val: LLVMValueRef) -> LLVMUseRef;
#foreign fn LLVMGetNextUse(U: LLVMUseRef) -> LLVMUseRef;
#foreign fn LLVMGetUser(U: LLVMUseRef) -> LLVMValueRef;
#foreign fn LLVMGetUsedValue(U: LLVMUseRef) -> LLVMValueRef;
#foreign fn LLVMGetOperand(Val: LLVMValueRef, Index: u32) -> LLVMValueRef;
#foreign fn LLVMGetOperandUse(Val: LLVMValueRef, Index: u32) -> LLVMUseRef;
#foreign fn LLVMSetOperand(User: LLVMValueRef, Index: u32, Val: LLVMValueRef) -> void;
#foreign fn LLVMGetNumOperands(Val: LLVMValueRef) -> s32;
#foreign fn LLVMConstNull(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMConstAllOnes(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMGetUndef(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMGetPoison(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMIsNull(Val: LLVMValueRef) -> bool;
#foreign fn LLVMConstPointerNull(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMConstInt(IntTy: LLVMTypeRef, N: u64, SignExtend: bool) -> LLVMValueRef;
#foreign fn LLVMConstIntOfArbitraryPrecision(IntTy: LLVMTypeRef, NumWords: u32, Words: *const u64) -> LLVMValueRef;
#foreign fn LLVMConstIntOfString(IntTy: LLVMTypeRef, Text: *const u8, Radix: u8) -> LLVMValueRef;
#foreign fn LLVMConstIntOfStringAndSize(IntTy: LLVMTypeRef, Text: *const u8, SLen: u32, Radix: u8) -> LLVMValueRef;
#foreign fn LLVMConstReal(RealTy: LLVMTypeRef, N: f64) -> LLVMValueRef;
#foreign fn LLVMConstRealOfString(RealTy: LLVMTypeRef, Text: *const u8) -> LLVMValueRef;
#foreign fn LLVMConstRealOfStringAndSize(RealTy: LLVMTypeRef, Text: *const u8, SLen: u32) -> LLVMValueRef;
#foreign fn LLVMConstIntGetZExtValue(ConstantVal: LLVMValueRef) -> u64;
#foreign fn LLVMConstIntGetSExtValue(ConstantVal: LLVMValueRef) -> s64;
#foreign fn LLVMConstRealGetDouble(ConstantVal: LLVMValueRef, losesInfo: *mut bool) -> f64;
#foreign fn LLVMConstStringInContext(C: LLVMContextRef, Str: *const u8, Length: u32, DontNullTerminate: bool) -> LLVMValueRef;
#foreign fn LLVMConstStringInContext2(C: LLVMContextRef, Str: *const u8, Length: u64, DontNullTerminate: bool) -> LLVMValueRef;
#foreign fn LLVMConstString(Str: *const u8, Length: u32, DontNullTerminate: bool) -> LLVMValueRef;
#foreign fn LLVMIsConstantString(c: LLVMValueRef) -> bool;
#foreign fn LLVMGetAsString(c: LLVMValueRef, Length: *mut u64) -> *const u8;
#foreign fn LLVMConstStructInContext(C: LLVMContextRef, ConstantVals: *mut LLVMValueRef, Count: u32, Packed: bool) -> LLVMValueRef;
#foreign fn LLVMConstStruct(ConstantVals: *mut LLVMValueRef, Count: u32, Packed: bool) -> LLVMValueRef;
#foreign fn LLVMConstArray(ElementTy: LLVMTypeRef, ConstantVals: *mut LLVMValueRef, Length: u32) -> LLVMValueRef;
#foreign fn LLVMConstArray2(ElementTy: LLVMTypeRef, ConstantVals: *mut LLVMValueRef, Length: u64) -> LLVMValueRef;
#foreign fn LLVMConstNamedStruct(StructTy: LLVMTypeRef, ConstantVals: *mut LLVMValueRef, Count: u32) -> LLVMValueRef;
#foreign fn LLVMGetAggregateElement(C: LLVMValueRef, Idx: u32) -> LLVMValueRef;
#foreign fn LLVMGetElementAsConstant(C: LLVMValueRef, idx: u32) -> LLVMValueRef;
#foreign fn LLVMConstVector(ScalarConstantVals: *mut LLVMValueRef, Size: u32) -> LLVMValueRef;
#foreign fn LLVMConstantPtrAuth(Ptr: LLVMValueRef, Key: LLVMValueRef, Disc: LLVMValueRef, AddrDisc: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetConstOpcode(ConstantVal: LLVMValueRef) -> LLVMOpcode;
#foreign fn LLVMAlignOf(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMSizeOf(Ty: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMConstNeg(ConstantVal: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstNSWNeg(ConstantVal: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstNUWNeg(ConstantVal: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstNot(ConstantVal: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstNSWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstNUWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstNSWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstNUWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstNSWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstNUWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstXor(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstGEP2(Ty: LLVMTypeRef, ConstantVal: LLVMValueRef, ConstantIndices: *mut LLVMValueRef, NumIndices: u32) -> LLVMValueRef;
#foreign fn LLVMConstInBoundsGEP2(Ty: LLVMTypeRef, ConstantVal: LLVMValueRef, ConstantIndices: *mut LLVMValueRef, NumIndices: u32) -> LLVMValueRef;
#foreign fn LLVMConstGEPWithNoWrapFlags(Ty: LLVMTypeRef, ConstantVal: LLVMValueRef, ConstantIndices: *mut LLVMValueRef, NumIndices: u32, NoWrapFlags: LLVMGEPNoWrapFlags) -> LLVMValueRef;
#foreign fn LLVMConstTrunc(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMConstPtrToInt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMConstIntToPtr(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMConstBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMConstAddrSpaceCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMConstTruncOrBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMConstPointerCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
#foreign fn LLVMConstExtractElement(VectorConstant: LLVMValueRef, IndexConstant: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstInsertElement(VectorConstant: LLVMValueRef, ElementValueConstant: LLVMValueRef, IndexConstant: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMConstShuffleVector(VectorAConstant: LLVMValueRef, VectorBConstant: LLVMValueRef, MaskConstant: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMBlockAddress(F: LLVMValueRef, BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign fn LLVMGetBlockAddressFunction(BlockAddr: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetBlockAddressBasicBlock(BlockAddr: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign fn LLVMConstInlineAsm(Ty: LLVMTypeRef, AsmString: *const u8, Constraints: *const u8, HasSideEffects: bool, IsAlignStack: bool) -> LLVMValueRef;
#foreign fn LLVMGetGlobalParent(Global: LLVMValueRef) -> LLVMModuleRef;
#foreign fn LLVMIsDeclaration(Global: LLVMValueRef) -> bool;
#foreign fn LLVMGetLinkage(Global: LLVMValueRef) -> LLVMLinkage;
#foreign fn LLVMSetLinkage(Global: LLVMValueRef, Linkage: LLVMLinkage) -> void;
#foreign fn LLVMGetSection(Global: LLVMValueRef) -> *const u8;
#foreign fn LLVMSetSection(Global: LLVMValueRef, Section: *const u8) -> void;
#foreign fn LLVMGetVisibility(Global: LLVMValueRef) -> LLVMVisibility;
#foreign fn LLVMSetVisibility(Global: LLVMValueRef, Viz: LLVMVisibility) -> void;
#foreign fn LLVMGetDLLStorageClass(Global: LLVMValueRef) -> LLVMDLLStorageClass;
#foreign fn LLVMSetDLLStorageClass(Global: LLVMValueRef, Class: LLVMDLLStorageClass) -> void;
#foreign fn LLVMGetUnnamedAddress(Global: LLVMValueRef) -> LLVMUnnamedAddr;
#foreign fn LLVMSetUnnamedAddress(Global: LLVMValueRef, UnnamedAddr: LLVMUnnamedAddr) -> void;
#foreign fn LLVMGlobalGetValueType(Global: LLVMValueRef) -> LLVMTypeRef;
#foreign fn LLVMHasUnnamedAddr(Global: LLVMValueRef) -> bool;
#foreign fn LLVMSetUnnamedAddr(Global: LLVMValueRef, HasUnnamedAddr: bool) -> void;
#foreign fn LLVMGetAlignment(V: LLVMValueRef) -> u32;
#foreign fn LLVMSetAlignment(V: LLVMValueRef, Bytes: u32) -> void;
#foreign fn LLVMGlobalSetMetadata(Global: LLVMValueRef, Kind: u32, MD: LLVMMetadataRef) -> void;
#foreign fn LLVMGlobalEraseMetadata(Global: LLVMValueRef, Kind: u32) -> void;
#foreign fn LLVMGlobalClearMetadata(Global: LLVMValueRef) -> void;
#foreign fn LLVMGlobalCopyAllMetadata(Value: LLVMValueRef, NumEntries: *mut u64) -> *mut LLVMValueMetadataEntry;
#foreign fn LLVMDisposeValueMetadataEntries(Entries: *mut LLVMValueMetadataEntry) -> void;
#foreign fn LLVMValueMetadataEntriesGetKind(Entries: *mut LLVMValueMetadataEntry, Index: u32) -> u32;
#foreign fn LLVMValueMetadataEntriesGetMetadata(Entries: *mut LLVMValueMetadataEntry, Index: u32) -> LLVMMetadataRef;
#foreign fn LLVMAddGlobal(M: LLVMModuleRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMAddGlobalInAddressSpace(M: LLVMModuleRef, Ty: LLVMTypeRef, Name: *const u8, AddressSpace: u32) -> LLVMValueRef;
#foreign fn LLVMGetNamedGlobal(M: LLVMModuleRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMGetFirstGlobal(M: LLVMModuleRef) -> LLVMValueRef;
#foreign fn LLVMGetLastGlobal(M: LLVMModuleRef) -> LLVMValueRef;
#foreign fn LLVMGetNextGlobal(GlobalVar: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetPreviousGlobal(GlobalVar: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMDeleteGlobal(GlobalVar: LLVMValueRef) -> void;
#foreign fn LLVMGetInitializer(GlobalVar: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMSetInitializer(GlobalVar: LLVMValueRef, ConstantVal: LLVMValueRef) -> void;
#foreign fn LLVMIsThreadLocal(GlobalVar: LLVMValueRef) -> bool;
#foreign fn LLVMSetThreadLocal(GlobalVar: LLVMValueRef, IsThreadLocal: bool) -> void;
#foreign fn LLVMIsGlobalConstant(GlobalVar: LLVMValueRef) -> bool;
#foreign fn LLVMSetGlobalConstant(GlobalVar: LLVMValueRef, IsConstant: bool) -> void;
#foreign fn LLVMGetThreadLocalMode(GlobalVar: LLVMValueRef) -> LLVMThreadLocalMode;
#foreign fn LLVMSetThreadLocalMode(GlobalVar: LLVMValueRef, Mode: LLVMThreadLocalMode) -> void;
#foreign fn LLVMIsExternallyInitialized(GlobalVar: LLVMValueRef) -> bool;
#foreign fn LLVMSetExternallyInitialized(GlobalVar: LLVMValueRef, IsExtInit: bool) -> void;
#foreign fn LLVMAddAlias2(M: LLVMModuleRef, ValueTy: LLVMTypeRef, AddrSpace: u32, Aliasee: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMGetNamedGlobalAlias(M: LLVMModuleRef, Name: *const u8, NameLen: u64) -> LLVMValueRef;
#foreign fn LLVMGetFirstGlobalAlias(M: LLVMModuleRef) -> LLVMValueRef;
#foreign fn LLVMGetLastGlobalAlias(M: LLVMModuleRef) -> LLVMValueRef;
#foreign fn LLVMGetNextGlobalAlias(GA: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetPreviousGlobalAlias(GA: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMAliasGetAliasee(Alias: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMAliasSetAliasee(Alias: LLVMValueRef, Aliasee: LLVMValueRef) -> void;
#foreign fn LLVMDeleteFunction(Fn: LLVMValueRef) -> void;
#foreign fn LLVMHasPersonalityFn(Fn: LLVMValueRef) -> bool;
#foreign fn LLVMGetPersonalityFn(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMSetPersonalityFn(Fn: LLVMValueRef, PersonalityFn: LLVMValueRef) -> void;
#foreign fn LLVMLookupIntrinsicID(Name: *const u8, NameLen: u64) -> u32;
#foreign fn LLVMGetIntrinsicID(Fn: LLVMValueRef) -> u32;
#foreign fn LLVMGetIntrinsicDeclaration(Mod: LLVMModuleRef, ID: u32, ParamTypes: *mut LLVMTypeRef, ParamCount: u64) -> LLVMValueRef;
#foreign fn LLVMIntrinsicGetType(Ctx: LLVMContextRef, ID: u32, ParamTypes: *mut LLVMTypeRef, ParamCount: u64) -> LLVMTypeRef;
#foreign fn LLVMIntrinsicGetName(ID: u32, NameLength: *mut u64) -> *const u8;
#foreign fn LLVMIntrinsicCopyOverloadedName(ID: u32, ParamTypes: *mut LLVMTypeRef, ParamCount: u64, NameLength: *mut u64) -> *const u8;
#foreign fn LLVMIntrinsicCopyOverloadedName2(Mod: LLVMModuleRef, ID: u32, ParamTypes: *mut LLVMTypeRef, ParamCount: u64, NameLength: *mut u64) -> *const u8;
#foreign fn LLVMIntrinsicIsOverloaded(ID: u32) -> bool;
#foreign fn LLVMGetFunctionCallConv(Fn: LLVMValueRef) -> u32;
#foreign fn LLVMSetFunctionCallConv(Fn: LLVMValueRef, CC: u32) -> void;
#foreign fn LLVMGetGC(Fn: LLVMValueRef) -> *const u8;
#foreign fn LLVMSetGC(Fn: LLVMValueRef, Name: *const u8) -> void;
#foreign fn LLVMGetPrefixData(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMHasPrefixData(Fn: LLVMValueRef) -> bool;
#foreign fn LLVMSetPrefixData(Fn: LLVMValueRef, prefixData: LLVMValueRef) -> void;
#foreign fn LLVMGetPrologueData(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMHasPrologueData(Fn: LLVMValueRef) -> bool;
#foreign fn LLVMSetPrologueData(Fn: LLVMValueRef, prologueData: LLVMValueRef) -> void;
#foreign fn LLVMAddAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, A: LLVMAttributeRef) -> void;
#foreign fn LLVMGetAttributeCountAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex) -> u32;
#foreign fn LLVMGetAttributesAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, Attrs: *mut LLVMAttributeRef) -> void;
#foreign fn LLVMGetEnumAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: u32) -> LLVMAttributeRef;
#foreign fn LLVMGetStringAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, K: *const u8, KLen: u32) -> LLVMAttributeRef;
#foreign fn LLVMRemoveEnumAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: u32) -> void;
#foreign fn LLVMRemoveStringAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, K: *const u8, KLen: u32) -> void;
#foreign fn LLVMAddTargetDependentFunctionAttr(Fn: LLVMValueRef, A: *const u8, V: *const u8) -> void;
#foreign fn LLVMCountParams(Fn: LLVMValueRef) -> u32;
#foreign fn LLVMGetParams(Fn: LLVMValueRef, Params: *mut LLVMValueRef) -> void;
#foreign fn LLVMGetParam(Fn: LLVMValueRef, Index: u32) -> LLVMValueRef;
#foreign fn LLVMGetParamParent(Inst: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetFirstParam(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetLastParam(Fn: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetNextParam(Arg: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetPreviousParam(Arg: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMSetParamAlignment(Arg: LLVMValueRef, Align: u32) -> void;
#foreign fn LLVMAddGlobalIFunc(M: LLVMModuleRef, Name: *const u8, NameLen: u64, Ty: LLVMTypeRef, AddrSpace: u32, Resolver: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetNamedGlobalIFunc(M: LLVMModuleRef, Name: *const u8, NameLen: u64) -> LLVMValueRef;
#foreign fn LLVMGetFirstGlobalIFunc(M: LLVMModuleRef) -> LLVMValueRef;
#foreign fn LLVMGetLastGlobalIFunc(M: LLVMModuleRef) -> LLVMValueRef;
#foreign fn LLVMGetNextGlobalIFunc(IFunc: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetPreviousGlobalIFunc(IFunc: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetGlobalIFuncResolver(IFunc: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMSetGlobalIFuncResolver(IFunc: LLVMValueRef, Resolver: LLVMValueRef) -> void;
#foreign fn LLVMEraseGlobalIFunc(IFunc: LLVMValueRef) -> void;
#foreign fn LLVMRemoveGlobalIFunc(IFunc: LLVMValueRef) -> void;
#foreign fn LLVMMDStringInContext2(C: LLVMContextRef, Str: *const u8, SLen: u64) -> LLVMMetadataRef;
#foreign fn LLVMMDNodeInContext2(C: LLVMContextRef, MDs: *mut LLVMMetadataRef, Count: u64) -> LLVMMetadataRef;
#foreign fn LLVMMetadataAsValue(C: LLVMContextRef, MD: LLVMMetadataRef) -> LLVMValueRef;
#foreign fn LLVMValueAsMetadata(Val: LLVMValueRef) -> LLVMMetadataRef;
#foreign fn LLVMGetMDString(V: LLVMValueRef, Length: *mut u32) -> *const u8;
#foreign fn LLVMGetMDNodeNumOperands(V: LLVMValueRef) -> u32;
#foreign fn LLVMGetMDNodeOperands(V: LLVMValueRef, Dest: *mut LLVMValueRef) -> void;
#foreign fn LLVMReplaceMDNodeOperandWith(V: LLVMValueRef, Index: u32, Replacement: LLVMMetadataRef) -> void;
#foreign fn LLVMMDStringInContext(C: LLVMContextRef, Str: *const u8, SLen: u32) -> LLVMValueRef;
#foreign fn LLVMMDString(Str: *const u8, SLen: u32) -> LLVMValueRef;
#foreign fn LLVMMDNodeInContext(C: LLVMContextRef, Vals: *mut LLVMValueRef, Count: u32) -> LLVMValueRef;
#foreign fn LLVMMDNode(Vals: *mut LLVMValueRef, Count: u32) -> LLVMValueRef;
#foreign fn LLVMCreateOperandBundle(Tag: *const u8, TagLen: u64, Args: *mut LLVMValueRef, NumArgs: u32) -> LLVMOperandBundleRef;
#foreign fn LLVMDisposeOperandBundle(Bundle: LLVMOperandBundleRef) -> void;
#foreign fn LLVMGetOperandBundleTag(Bundle: LLVMOperandBundleRef, Len: *mut u64) -> *const u8;
#foreign fn LLVMGetNumOperandBundleArgs(Bundle: LLVMOperandBundleRef) -> u32;
#foreign fn LLVMGetOperandBundleArgAtIndex(Bundle: LLVMOperandBundleRef, Index: u32) -> LLVMValueRef;
#foreign fn LLVMBasicBlockAsValue(BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign fn LLVMValueIsBasicBlock(Val: LLVMValueRef) -> bool;
#foreign fn LLVMValueAsBasicBlock(Val: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign fn LLVMGetBasicBlockName(BB: LLVMBasicBlockRef) -> *const u8;
#foreign fn LLVMGetBasicBlockParent(BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign fn LLVMGetBasicBlockTerminator(BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign fn LLVMCountBasicBlocks(Fn: LLVMValueRef) -> u32;
#foreign fn LLVMGetBasicBlocks(Fn: LLVMValueRef, BasicBlocks: *mut LLVMBasicBlockRef) -> void;
#foreign fn LLVMGetFirstBasicBlock(Fn: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign fn LLVMGetLastBasicBlock(Fn: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign fn LLVMGetNextBasicBlock(BB: LLVMBasicBlockRef) -> LLVMBasicBlockRef;
#foreign fn LLVMGetPreviousBasicBlock(BB: LLVMBasicBlockRef) -> LLVMBasicBlockRef;
#foreign fn LLVMGetEntryBasicBlock(Fn: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign fn LLVMInsertExistingBasicBlockAfterInsertBlock(Builder: LLVMBuilderRef, BB: LLVMBasicBlockRef) -> void;
#foreign fn LLVMAppendExistingBasicBlock(Fn: LLVMValueRef, BB: LLVMBasicBlockRef) -> void;
#foreign fn LLVMCreateBasicBlockInContext(C: LLVMContextRef, Name: *const u8) -> LLVMBasicBlockRef;
#foreign fn LLVMAppendBasicBlockInContext(C: LLVMContextRef, Fn: LLVMValueRef, Name: *const u8) -> LLVMBasicBlockRef;
#foreign fn LLVMAppendBasicBlock(Fn: LLVMValueRef, Name: *const u8) -> LLVMBasicBlockRef;
#foreign fn LLVMInsertBasicBlockInContext(C: LLVMContextRef, BB: LLVMBasicBlockRef, Name: *const u8) -> LLVMBasicBlockRef;
#foreign fn LLVMInsertBasicBlock(InsertBeforeBB: LLVMBasicBlockRef, Name: *const u8) -> LLVMBasicBlockRef;
#foreign fn LLVMDeleteBasicBlock(BB: LLVMBasicBlockRef) -> void;
#foreign fn LLVMRemoveBasicBlockFromParent(BB: LLVMBasicBlockRef) -> void;
#foreign fn LLVMMoveBasicBlockBefore(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef) -> void;
#foreign fn LLVMMoveBasicBlockAfter(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef) -> void;
#foreign fn LLVMGetFirstInstruction(BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign fn LLVMGetLastInstruction(BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign fn LLVMHasMetadata(Val: LLVMValueRef) -> s32;
#foreign fn LLVMGetMetadata(Val: LLVMValueRef, KindID: u32) -> LLVMValueRef;
#foreign fn LLVMSetMetadata(Val: LLVMValueRef, KindID: u32, Node: LLVMValueRef) -> void;
#foreign fn LLVMInstructionGetAllMetadataOtherThanDebugLoc(Instr: LLVMValueRef, NumEntries: *mut u64) -> *mut LLVMValueMetadataEntry;
#foreign fn LLVMGetInstructionParent(Inst: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign fn LLVMGetNextInstruction(Inst: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetPreviousInstruction(Inst: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMInstructionRemoveFromParent(Inst: LLVMValueRef) -> void;
#foreign fn LLVMInstructionEraseFromParent(Inst: LLVMValueRef) -> void;
#foreign fn LLVMDeleteInstruction(Inst: LLVMValueRef) -> void;
#foreign fn LLVMGetInstructionOpcode(Inst: LLVMValueRef) -> LLVMOpcode;
#foreign fn LLVMGetICmpPredicate(Inst: LLVMValueRef) -> LLVMIntPredicate;
#foreign fn LLVMGetFCmpPredicate(Inst: LLVMValueRef) -> LLVMRealPredicate;
#foreign fn LLVMInstructionClone(Inst: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMIsATerminatorInst(Inst: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetNumArgOperands(Instr: LLVMValueRef) -> u32;
#foreign fn LLVMSetInstructionCallConv(Instr: LLVMValueRef, CC: u32) -> void;
#foreign fn LLVMGetInstructionCallConv(Instr: LLVMValueRef) -> u32;
#foreign fn LLVMSetInstrParamAlignment(Instr: LLVMValueRef, Idx: LLVMAttributeIndex, Align: u32) -> void;
#foreign fn LLVMAddCallSiteAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, A: LLVMAttributeRef) -> void;
#foreign fn LLVMGetCallSiteAttributeCount(C: LLVMValueRef, Idx: LLVMAttributeIndex) -> u32;
#foreign fn LLVMGetCallSiteAttributes(C: LLVMValueRef, Idx: LLVMAttributeIndex, Attrs: *mut LLVMAttributeRef) -> void;
#foreign fn LLVMGetCallSiteEnumAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: u32) -> LLVMAttributeRef;
#foreign fn LLVMGetCallSiteStringAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, K: *const u8, KLen: u32) -> LLVMAttributeRef;
#foreign fn LLVMRemoveCallSiteEnumAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: u32) -> void;
#foreign fn LLVMRemoveCallSiteStringAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, K: *const u8, KLen: u32) -> void;
#foreign fn LLVMGetCalledFunctionType(C: LLVMValueRef) -> LLVMTypeRef;
#foreign fn LLVMGetCalledValue(Instr: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMGetNumOperandBundles(C: LLVMValueRef) -> u32;
#foreign fn LLVMGetOperandBundleAtIndex(C: LLVMValueRef, Index: u32) -> LLVMOperandBundleRef;
#foreign fn LLVMIsTailCall(CallInst: LLVMValueRef) -> bool;
#foreign fn LLVMSetTailCall(CallInst: LLVMValueRef, IsTailCall: bool) -> void;
#foreign fn LLVMGetTailCallKind(CallInst: LLVMValueRef) -> LLVMTailCallKind;
#foreign fn LLVMSetTailCallKind(CallInst: LLVMValueRef, kind: LLVMTailCallKind) -> void;
#foreign fn LLVMGetNormalDest(InvokeInst: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign fn LLVMGetUnwindDest(InvokeInst: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign fn LLVMSetNormalDest(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef) -> void;
#foreign fn LLVMSetUnwindDest(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef) -> void;
#foreign fn LLVMGetCallBrDefaultDest(CallBr: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign fn LLVMGetCallBrNumIndirectDests(CallBr: LLVMValueRef) -> u32;
#foreign fn LLVMGetCallBrIndirectDest(CallBr: LLVMValueRef, Idx: u32) -> LLVMBasicBlockRef;
#foreign fn LLVMGetNumSuccessors(Term: LLVMValueRef) -> u32;
#foreign fn LLVMGetSuccessor(Term: LLVMValueRef, i: u32) -> LLVMBasicBlockRef;
#foreign fn LLVMSetSuccessor(Term: LLVMValueRef, i: u32, block: LLVMBasicBlockRef) -> void;
#foreign fn LLVMIsConditional(Branch: LLVMValueRef) -> bool;
#foreign fn LLVMGetCondition(Branch: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMSetCondition(Branch: LLVMValueRef, Cond: LLVMValueRef) -> void;
#foreign fn LLVMGetSwitchDefaultDest(SwitchInstr: LLVMValueRef) -> LLVMBasicBlockRef;
#foreign fn LLVMGetAllocatedType(Alloca: LLVMValueRef) -> LLVMTypeRef;
#foreign fn LLVMIsInBounds(GEP: LLVMValueRef) -> bool;
#foreign fn LLVMSetIsInBounds(GEP: LLVMValueRef, InBounds: bool) -> void;
#foreign fn LLVMGetGEPSourceElementType(GEP: LLVMValueRef) -> LLVMTypeRef;
#foreign fn LLVMGEPGetNoWrapFlags(GEP: LLVMValueRef) -> LLVMGEPNoWrapFlags;
#foreign fn LLVMGEPSetNoWrapFlags(GEP: LLVMValueRef, NoWrapFlags: LLVMGEPNoWrapFlags) -> void;
#foreign fn LLVMAddIncoming(PhiNode: LLVMValueRef, IncomingValues: *mut LLVMValueRef, IncomingBlocks: *mut LLVMBasicBlockRef, Count: u32) -> void;
#foreign fn LLVMCountIncoming(PhiNode: LLVMValueRef) -> u32;
#foreign fn LLVMGetIncomingValue(PhiNode: LLVMValueRef, Index: u32) -> LLVMValueRef;
#foreign fn LLVMGetIncomingBlock(PhiNode: LLVMValueRef, Index: u32) -> LLVMBasicBlockRef;
#foreign fn LLVMGetNumIndices(Inst: LLVMValueRef) -> u32;
#foreign fn LLVMGetIndices(Inst: LLVMValueRef) -> *const u32;
#foreign fn LLVMCreateBuilderInContext(C: LLVMContextRef) -> LLVMBuilderRef;
#foreign fn LLVMCreateBuilder() -> LLVMBuilderRef;
#foreign fn LLVMPositionBuilder(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef, Instr: LLVMValueRef) -> void;
#foreign fn LLVMPositionBuilderBeforeDbgRecords(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef, Inst: LLVMValueRef) -> void;
#foreign fn LLVMPositionBuilderBefore(Builder: LLVMBuilderRef, Instr: LLVMValueRef) -> void;
#foreign fn LLVMPositionBuilderBeforeInstrAndDbgRecords(Builder: LLVMBuilderRef, Instr: LLVMValueRef) -> void;
#foreign fn LLVMPositionBuilderAtEnd(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef) -> void;
#foreign fn LLVMGetInsertBlock(Builder: LLVMBuilderRef) -> LLVMBasicBlockRef;
#foreign fn LLVMClearInsertionPosition(Builder: LLVMBuilderRef) -> void;
#foreign fn LLVMInsertIntoBuilder(Builder: LLVMBuilderRef, Instr: LLVMValueRef) -> void;
#foreign fn LLVMInsertIntoBuilderWithName(Builder: LLVMBuilderRef, Instr: LLVMValueRef, Name: *const u8) -> void;
#foreign fn LLVMDisposeBuilder(Builder: LLVMBuilderRef) -> void;
#foreign fn LLVMGetCurrentDebugLocation2(Builder: LLVMBuilderRef) -> LLVMMetadataRef;
#foreign fn LLVMSetCurrentDebugLocation2(Builder: LLVMBuilderRef, Loc: LLVMMetadataRef) -> void;
#foreign fn LLVMSetInstDebugLocation(Builder: LLVMBuilderRef, Inst: LLVMValueRef) -> void;
#foreign fn LLVMAddMetadataToInst(Builder: LLVMBuilderRef, Inst: LLVMValueRef) -> void;
#foreign fn LLVMBuilderGetDefaultFPMathTag(Builder: LLVMBuilderRef) -> LLVMMetadataRef;
#foreign fn LLVMBuilderSetDefaultFPMathTag(Builder: LLVMBuilderRef, FPMathTag: LLVMMetadataRef) -> void;
#foreign fn LLVMSetCurrentDebugLocation(Builder: LLVMBuilderRef, L: LLVMValueRef) -> void;
#foreign fn LLVMGetCurrentDebugLocation(Builder: LLVMBuilderRef) -> LLVMValueRef;
#foreign fn LLVMBuildRetVoid(param0: LLVMBuilderRef) -> LLVMValueRef;
#foreign fn LLVMBuildRet(param0: LLVMBuilderRef, V: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMBuildAggregateRet(param0: LLVMBuilderRef, RetVals: *mut LLVMValueRef, N: u32) -> LLVMValueRef;
#foreign fn LLVMBuildBr(param0: LLVMBuilderRef, Dest: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign fn LLVMBuildCondBr(param0: LLVMBuilderRef, If: LLVMValueRef, Then: LLVMBasicBlockRef, Else: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign fn LLVMBuildSwitch(param0: LLVMBuilderRef, V: LLVMValueRef, Else: LLVMBasicBlockRef, NumCases: u32) -> LLVMValueRef;
#foreign fn LLVMBuildIndirectBr(B: LLVMBuilderRef, Addr: LLVMValueRef, NumDests: u32) -> LLVMValueRef;
#foreign fn LLVMBuildCallBr(B: LLVMBuilderRef, Ty: LLVMTypeRef, Fn: LLVMValueRef, DefaultDest: LLVMBasicBlockRef, IndirectDests: *mut LLVMBasicBlockRef, NumIndirectDests: u32, Args: *mut LLVMValueRef, NumArgs: u32, Bundles: *mut LLVMOperandBundleRef, NumBundles: u32, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildInvoke2(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Fn: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Then: LLVMBasicBlockRef, Catch: LLVMBasicBlockRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildInvokeWithOperandBundles(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Fn: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Then: LLVMBasicBlockRef, Catch: LLVMBasicBlockRef, Bundles: *mut LLVMOperandBundleRef, NumBundles: u32, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildUnreachable(param0: LLVMBuilderRef) -> LLVMValueRef;
#foreign fn LLVMBuildResume(B: LLVMBuilderRef, Exn: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMBuildLandingPad(B: LLVMBuilderRef, Ty: LLVMTypeRef, PersFn: LLVMValueRef, NumClauses: u32, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildCleanupRet(B: LLVMBuilderRef, CatchPad: LLVMValueRef, BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign fn LLVMBuildCatchRet(B: LLVMBuilderRef, CatchPad: LLVMValueRef, BB: LLVMBasicBlockRef) -> LLVMValueRef;
#foreign fn LLVMBuildCatchPad(B: LLVMBuilderRef, ParentPad: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildCleanupPad(B: LLVMBuilderRef, ParentPad: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildCatchSwitch(B: LLVMBuilderRef, ParentPad: LLVMValueRef, UnwindBB: LLVMBasicBlockRef, NumHandlers: u32, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMAddCase(Switch: LLVMValueRef, OnVal: LLVMValueRef, Dest: LLVMBasicBlockRef) -> void;
#foreign fn LLVMAddDestination(IndirectBr: LLVMValueRef, Dest: LLVMBasicBlockRef) -> void;
#foreign fn LLVMGetNumClauses(LandingPad: LLVMValueRef) -> u32;
#foreign fn LLVMGetClause(LandingPad: LLVMValueRef, Idx: u32) -> LLVMValueRef;
#foreign fn LLVMAddClause(LandingPad: LLVMValueRef, ClauseVal: LLVMValueRef) -> void;
#foreign fn LLVMIsCleanup(LandingPad: LLVMValueRef) -> bool;
#foreign fn LLVMSetCleanup(LandingPad: LLVMValueRef, Val: bool) -> void;
#foreign fn LLVMAddHandler(CatchSwitch: LLVMValueRef, Dest: LLVMBasicBlockRef) -> void;
#foreign fn LLVMGetNumHandlers(CatchSwitch: LLVMValueRef) -> u32;
#foreign fn LLVMGetHandlers(CatchSwitch: LLVMValueRef, Handlers: *mut LLVMBasicBlockRef) -> void;
#foreign fn LLVMGetArgOperand(Funclet: LLVMValueRef, i: u32) -> LLVMValueRef;
#foreign fn LLVMSetArgOperand(Funclet: LLVMValueRef, i: u32, value: LLVMValueRef) -> void;
#foreign fn LLVMGetParentCatchSwitch(CatchPad: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMSetParentCatchSwitch(CatchPad: LLVMValueRef, CatchSwitch: LLVMValueRef) -> void;
#foreign fn LLVMBuildAdd(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildNSWAdd(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildNUWAdd(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFAdd(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildSub(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildNSWSub(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildNUWSub(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFSub(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildMul(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildNSWMul(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildNUWMul(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFMul(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildUDiv(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildExactUDiv(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildSDiv(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildExactSDiv(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFDiv(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildURem(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildSRem(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFRem(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildShl(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildLShr(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildAShr(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildAnd(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildOr(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildXor(param0: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildBinOp(B: LLVMBuilderRef, Op: LLVMOpcode, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildNeg(param0: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildNSWNeg(B: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildNUWNeg(B: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFNeg(param0: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildNot(param0: LLVMBuilderRef, V: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMGetNUW(ArithInst: LLVMValueRef) -> bool;
#foreign fn LLVMSetNUW(ArithInst: LLVMValueRef, HasNUW: bool) -> void;
#foreign fn LLVMGetNSW(ArithInst: LLVMValueRef) -> bool;
#foreign fn LLVMSetNSW(ArithInst: LLVMValueRef, HasNSW: bool) -> void;
#foreign fn LLVMGetExact(DivOrShrInst: LLVMValueRef) -> bool;
#foreign fn LLVMSetExact(DivOrShrInst: LLVMValueRef, IsExact: bool) -> void;
#foreign fn LLVMGetNNeg(NonNegInst: LLVMValueRef) -> bool;
#foreign fn LLVMSetNNeg(NonNegInst: LLVMValueRef, IsNonNeg: bool) -> void;
#foreign fn LLVMGetFastMathFlags(FPMathInst: LLVMValueRef) -> LLVMFastMathFlags;
#foreign fn LLVMSetFastMathFlags(FPMathInst: LLVMValueRef, FMF: LLVMFastMathFlags) -> void;
#foreign fn LLVMCanValueUseFastMathFlags(Inst: LLVMValueRef) -> bool;
#foreign fn LLVMGetIsDisjoint(Inst: LLVMValueRef) -> bool;
#foreign fn LLVMSetIsDisjoint(Inst: LLVMValueRef, IsDisjoint: bool) -> void;
#foreign fn LLVMBuildMalloc(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildArrayMalloc(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildMemSet(B: LLVMBuilderRef, Ptr: LLVMValueRef, Val: LLVMValueRef, Len: LLVMValueRef, Align: u32) -> LLVMValueRef;
#foreign fn LLVMBuildMemCpy(B: LLVMBuilderRef, Dst: LLVMValueRef, DstAlign: u32, Src: LLVMValueRef, SrcAlign: u32, Size: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMBuildMemMove(B: LLVMBuilderRef, Dst: LLVMValueRef, DstAlign: u32, Src: LLVMValueRef, SrcAlign: u32, Size: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMBuildAlloca(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildArrayAlloca(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFree(param0: LLVMBuilderRef, PointerVal: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMBuildLoad2(param0: LLVMBuilderRef, Ty: LLVMTypeRef, PointerVal: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildStore(param0: LLVMBuilderRef, Val: LLVMValueRef, Ptr: LLVMValueRef) -> LLVMValueRef;
#foreign fn LLVMBuildGEP2(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: *mut LLVMValueRef, NumIndices: u32, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildInBoundsGEP2(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: *mut LLVMValueRef, NumIndices: u32, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildGEPWithNoWrapFlags(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: *mut LLVMValueRef, NumIndices: u32, Name: *const u8, NoWrapFlags: LLVMGEPNoWrapFlags) -> LLVMValueRef;
#foreign fn LLVMBuildStructGEP2(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Idx: u32, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildGlobalString(B: LLVMBuilderRef, Str: *const u8, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildGlobalStringPtr(B: LLVMBuilderRef, Str: *const u8, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMGetVolatile(MemoryAccessInst: LLVMValueRef) -> bool;
#foreign fn LLVMSetVolatile(MemoryAccessInst: LLVMValueRef, IsVolatile: bool) -> void;
#foreign fn LLVMGetWeak(CmpXchgInst: LLVMValueRef) -> bool;
#foreign fn LLVMSetWeak(CmpXchgInst: LLVMValueRef, IsWeak: bool) -> void;
#foreign fn LLVMGetOrdering(MemoryAccessInst: LLVMValueRef) -> LLVMAtomicOrdering;
#foreign fn LLVMSetOrdering(MemoryAccessInst: LLVMValueRef, Ordering: LLVMAtomicOrdering) -> void;
#foreign fn LLVMGetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef) -> LLVMAtomicRMWBinOp;
#foreign fn LLVMSetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef, BinOp: LLVMAtomicRMWBinOp) -> void;
#foreign fn LLVMBuildTrunc(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildZExt(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildSExt(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFPToUI(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFPToSI(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildUIToFP(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildSIToFP(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFPTrunc(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFPExt(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildPtrToInt(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildIntToPtr(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildBitCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildAddrSpaceCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildZExtOrBitCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildSExtOrBitCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildTruncOrBitCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildCast(B: LLVMBuilderRef, Op: LLVMOpcode, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildPointerCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildIntCast2(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, IsSigned: bool, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFPCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildIntCast(param0: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMGetCastOpcode(Src: LLVMValueRef, SrcIsSigned: bool, DestTy: LLVMTypeRef, DestIsSigned: bool) -> LLVMOpcode;
#foreign fn LLVMBuildICmp(param0: LLVMBuilderRef, Op: LLVMIntPredicate, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFCmp(param0: LLVMBuilderRef, Op: LLVMRealPredicate, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildPhi(param0: LLVMBuilderRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildCall2(param0: LLVMBuilderRef, param1: LLVMTypeRef, Fn: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildCallWithOperandBundles(param0: LLVMBuilderRef, param1: LLVMTypeRef, Fn: LLVMValueRef, Args: *mut LLVMValueRef, NumArgs: u32, Bundles: *mut LLVMOperandBundleRef, NumBundles: u32, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildSelect(param0: LLVMBuilderRef, If: LLVMValueRef, Then: LLVMValueRef, Else: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildVAArg(param0: LLVMBuilderRef, List: LLVMValueRef, Ty: LLVMTypeRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildExtractElement(param0: LLVMBuilderRef, VecVal: LLVMValueRef, Index: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildInsertElement(param0: LLVMBuilderRef, VecVal: LLVMValueRef, EltVal: LLVMValueRef, Index: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildShuffleVector(param0: LLVMBuilderRef, V1: LLVMValueRef, V2: LLVMValueRef, Mask: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildExtractValue(param0: LLVMBuilderRef, AggVal: LLVMValueRef, Index: u32, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildInsertValue(param0: LLVMBuilderRef, AggVal: LLVMValueRef, EltVal: LLVMValueRef, Index: u32, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFreeze(param0: LLVMBuilderRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildIsNull(param0: LLVMBuilderRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildIsNotNull(param0: LLVMBuilderRef, Val: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildPtrDiff2(param0: LLVMBuilderRef, ElemTy: LLVMTypeRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildFence(B: LLVMBuilderRef, ordering: LLVMAtomicOrdering, singleThread: bool, Name: *const u8) -> LLVMValueRef;
#foreign fn LLVMBuildAtomicRMW(B: LLVMBuilderRef, op: LLVMAtomicRMWBinOp, PTR: LLVMValueRef, Val: LLVMValueRef, ordering: LLVMAtomicOrdering, singleThread: bool) -> LLVMValueRef;
#foreign fn LLVMBuildAtomicCmpXchg(B: LLVMBuilderRef, Ptr: LLVMValueRef, Cmp: LLVMValueRef, New: LLVMValueRef, SuccessOrdering: LLVMAtomicOrdering, FailureOrdering: LLVMAtomicOrdering, SingleThread: bool) -> LLVMValueRef;
#foreign fn LLVMGetNumMaskElements(ShuffleVectorInst: LLVMValueRef) -> u32;
#foreign fn LLVMGetUndefMaskElem() -> s32;
#foreign fn LLVMGetMaskValue(ShuffleVectorInst: LLVMValueRef, Elt: u32) -> s32;
#foreign fn LLVMIsAtomicSingleThread(AtomicInst: LLVMValueRef) -> bool;
#foreign fn LLVMSetAtomicSingleThread(AtomicInst: LLVMValueRef, SingleThread: bool) -> void;
#foreign fn LLVMGetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef) -> LLVMAtomicOrdering;
#foreign fn LLVMSetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering) -> void;
#foreign fn LLVMGetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef) -> LLVMAtomicOrdering;
#foreign fn LLVMSetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering) -> void;
#foreign fn LLVMCreateModuleProviderForExistingModule(M: LLVMModuleRef) -> LLVMModuleProviderRef;
#foreign fn LLVMDisposeModuleProvider(M: LLVMModuleProviderRef) -> void;
#foreign fn LLVMCreateMemoryBufferWithContentsOfFile(Path: *const u8, OutMemBuf: *mut LLVMMemoryBufferRef, OutMessage: *mut *mut u8) -> bool;
#foreign fn LLVMCreateMemoryBufferWithSTDIN(OutMemBuf: *mut LLVMMemoryBufferRef, OutMessage: *mut *mut u8) -> bool;
#foreign fn LLVMCreateMemoryBufferWithMemoryRange(InputData: *const u8, InputDataLength: u64, BufferName: *const u8, RequiresNullTerminator: bool) -> LLVMMemoryBufferRef;
#foreign fn LLVMCreateMemoryBufferWithMemoryRangeCopy(InputData: *const u8, InputDataLength: u64, BufferName: *const u8) -> LLVMMemoryBufferRef;
#foreign fn LLVMGetBufferStart(MemBuf: LLVMMemoryBufferRef) -> *const u8;
#foreign fn LLVMGetBufferSize(MemBuf: LLVMMemoryBufferRef) -> u64;
#foreign fn LLVMDisposeMemoryBuffer(MemBuf: LLVMMemoryBufferRef) -> void;
#foreign fn LLVMCreatePassManager() -> LLVMPassManagerRef;
#foreign fn LLVMCreateFunctionPassManagerForModule(M: LLVMModuleRef) -> LLVMPassManagerRef;
#foreign fn LLVMCreateFunctionPassManager(MP: LLVMModuleProviderRef) -> LLVMPassManagerRef;
#foreign fn LLVMRunPassManager(PM: LLVMPassManagerRef, M: LLVMModuleRef) -> bool;
#foreign fn LLVMInitializeFunctionPassManager(FPM: LLVMPassManagerRef) -> bool;
#foreign fn LLVMRunFunctionPassManager(FPM: LLVMPassManagerRef, F: LLVMValueRef) -> bool;
#foreign fn LLVMFinalizeFunctionPassManager(FPM: LLVMPassManagerRef) -> bool;
#foreign fn LLVMDisposePassManager(PM: LLVMPassManagerRef) -> void;
#foreign fn LLVMStartMultithreaded() -> bool;
#foreign fn LLVMStopMultithreaded() -> void;
#foreign fn LLVMIsMultithreaded() -> bool;
enum LLVMDIFlags {
  LLVMDIFlagZero = 0,
  LLVMDIFlagPrivate = 1,
  LLVMDIFlagProtected = 2,
  LLVMDIFlagPublic = 3,
  LLVMDIFlagFwdDecl = 4,
  LLVMDIFlagAppleBlock = 8,
  LLVMDIFlagReservedBit4 = 16,
  LLVMDIFlagVirtual = 32,
  LLVMDIFlagArtificial = 64,
  LLVMDIFlagExplicit = 128,
  LLVMDIFlagPrototyped = 256,
  LLVMDIFlagObjcClassComplete = 512,
  LLVMDIFlagObjectPointer = 1024,
  LLVMDIFlagVector = 2048,
  LLVMDIFlagStaticMember = 4096,
  LLVMDIFlagLValueReference = 8192,
  LLVMDIFlagRValueReference = 16384,
  LLVMDIFlagReserved = 32768,
  LLVMDIFlagSingleInheritance = 65536,
  LLVMDIFlagMultipleInheritance = 131072,
  LLVMDIFlagVirtualInheritance = 196608,
  LLVMDIFlagIntroducedVirtual = 262144,
  LLVMDIFlagBitField = 524288,
  LLVMDIFlagNoReturn = 1048576,
  LLVMDIFlagTypePassByValue = 4194304,
  LLVMDIFlagTypePassByReference = 8388608,
  LLVMDIFlagEnumClass = 16777216,
  LLVMDIFlagFixedEnum = 16777216,
  LLVMDIFlagThunk = 33554432,
  LLVMDIFlagNonTrivial = 67108864,
  LLVMDIFlagBigEndian = 134217728,
  LLVMDIFlagLittleEndian = 268435456,
  LLVMDIFlagIndirectVirtualBase = 36,
  LLVMDIFlagAccessibility = 3,
  LLVMDIFlagPtrToMemberRep = 196608,
};
enum LLVMDWARFSourceLanguage {
  LLVMDWARFSourceLanguageC89 = 0,
  LLVMDWARFSourceLanguageC = 1,
  LLVMDWARFSourceLanguageAda83 = 2,
  LLVMDWARFSourceLanguageC_plus_plus = 3,
  LLVMDWARFSourceLanguageCobol74 = 4,
  LLVMDWARFSourceLanguageCobol85 = 5,
  LLVMDWARFSourceLanguageFortran77 = 6,
  LLVMDWARFSourceLanguageFortran90 = 7,
  LLVMDWARFSourceLanguagePascal83 = 8,
  LLVMDWARFSourceLanguageModula2 = 9,
  LLVMDWARFSourceLanguageJava = 10,
  LLVMDWARFSourceLanguageC99 = 11,
  LLVMDWARFSourceLanguageAda95 = 12,
  LLVMDWARFSourceLanguageFortran95 = 13,
  LLVMDWARFSourceLanguagePLI = 14,
  LLVMDWARFSourceLanguageObjC = 15,
  LLVMDWARFSourceLanguageObjC_plus_plus = 16,
  LLVMDWARFSourceLanguageUPC = 17,
  LLVMDWARFSourceLanguageD = 18,
  LLVMDWARFSourceLanguagePython = 19,
  LLVMDWARFSourceLanguageOpenCL = 20,
  LLVMDWARFSourceLanguageGo = 21,
  LLVMDWARFSourceLanguageModula3 = 22,
  LLVMDWARFSourceLanguageHaskell = 23,
  LLVMDWARFSourceLanguageC_plus_plus_03 = 24,
  LLVMDWARFSourceLanguageC_plus_plus_11 = 25,
  LLVMDWARFSourceLanguageOCaml = 26,
  LLVMDWARFSourceLanguageRust = 27,
  LLVMDWARFSourceLanguageC11 = 28,
  LLVMDWARFSourceLanguageSwift = 29,
  LLVMDWARFSourceLanguageJulia = 30,
  LLVMDWARFSourceLanguageDylan = 31,
  LLVMDWARFSourceLanguageC_plus_plus_14 = 32,
  LLVMDWARFSourceLanguageFortran03 = 33,
  LLVMDWARFSourceLanguageFortran08 = 34,
  LLVMDWARFSourceLanguageRenderScript = 35,
  LLVMDWARFSourceLanguageBLISS = 36,
  LLVMDWARFSourceLanguageKotlin = 37,
  LLVMDWARFSourceLanguageZig = 38,
  LLVMDWARFSourceLanguageCrystal = 39,
  LLVMDWARFSourceLanguageC_plus_plus_17 = 40,
  LLVMDWARFSourceLanguageC_plus_plus_20 = 41,
  LLVMDWARFSourceLanguageC17 = 42,
  LLVMDWARFSourceLanguageFortran18 = 43,
  LLVMDWARFSourceLanguageAda2005 = 44,
  LLVMDWARFSourceLanguageAda2012 = 45,
  LLVMDWARFSourceLanguageHIP = 46,
  LLVMDWARFSourceLanguageAssembly = 47,
  LLVMDWARFSourceLanguageC_sharp = 48,
  LLVMDWARFSourceLanguageMojo = 49,
  LLVMDWARFSourceLanguageGLSL = 50,
  LLVMDWARFSourceLanguageGLSL_ES = 51,
  LLVMDWARFSourceLanguageHLSL = 52,
  LLVMDWARFSourceLanguageOpenCL_CPP = 53,
  LLVMDWARFSourceLanguageCPP_for_OpenCL = 54,
  LLVMDWARFSourceLanguageSYCL = 55,
  LLVMDWARFSourceLanguageRuby = 56,
  LLVMDWARFSourceLanguageMove = 57,
  LLVMDWARFSourceLanguageHylo = 58,
  LLVMDWARFSourceLanguageMips_Assembler = 59,
  LLVMDWARFSourceLanguageGOOGLE_RenderScript = 60,
  LLVMDWARFSourceLanguageBORLAND_Delphi = 61,
};
enum LLVMDWARFEmissionKind {
  LLVMDWARFEmissionNone = 0,
  LLVMDWARFEmissionFull = 1,
  LLVMDWARFEmissionLineTablesOnly = 2,
};
enum __bind_gen__anon_D7 {
  LLVMMDStringMetadataKind = 0,
  LLVMConstantAsMetadataMetadataKind = 1,
  LLVMLocalAsMetadataMetadataKind = 2,
  LLVMDistinctMDOperandPlaceholderMetadataKind = 3,
  LLVMMDTupleMetadataKind = 4,
  LLVMDILocationMetadataKind = 5,
  LLVMDIExpressionMetadataKind = 6,
  LLVMDIGlobalVariableExpressionMetadataKind = 7,
  LLVMGenericDINodeMetadataKind = 8,
  LLVMDISubrangeMetadataKind = 9,
  LLVMDIEnumeratorMetadataKind = 10,
  LLVMDIBasicTypeMetadataKind = 11,
  LLVMDIDerivedTypeMetadataKind = 12,
  LLVMDICompositeTypeMetadataKind = 13,
  LLVMDISubroutineTypeMetadataKind = 14,
  LLVMDIFileMetadataKind = 15,
  LLVMDICompileUnitMetadataKind = 16,
  LLVMDISubprogramMetadataKind = 17,
  LLVMDILexicalBlockMetadataKind = 18,
  LLVMDILexicalBlockFileMetadataKind = 19,
  LLVMDINamespaceMetadataKind = 20,
  LLVMDIModuleMetadataKind = 21,
  LLVMDITemplateTypeParameterMetadataKind = 22,
  LLVMDITemplateValueParameterMetadataKind = 23,
  LLVMDIGlobalVariableMetadataKind = 24,
  LLVMDILocalVariableMetadataKind = 25,
  LLVMDILabelMetadataKind = 26,
  LLVMDIObjCPropertyMetadataKind = 27,
  LLVMDIImportedEntityMetadataKind = 28,
  LLVMDIMacroMetadataKind = 29,
  LLVMDIMacroFileMetadataKind = 30,
  LLVMDICommonBlockMetadataKind = 31,
  LLVMDIStringTypeMetadataKind = 32,
  LLVMDIGenericSubrangeMetadataKind = 33,
  LLVMDIArgListMetadataKind = 34,
  LLVMDIAssignIDMetadataKind = 35,
};
alias LLVMMetadataKind :: u32;
alias LLVMDWARFTypeEncoding :: u32;
enum LLVMDWARFMacinfoRecordType {
  LLVMDWARFMacinfoRecordTypeDefine = 1,
  LLVMDWARFMacinfoRecordTypeMacro = 2,
  LLVMDWARFMacinfoRecordTypeStartFile = 3,
  LLVMDWARFMacinfoRecordTypeEndFile = 4,
  LLVMDWARFMacinfoRecordTypeVendorExt = 255,
};
#foreign fn LLVMDebugMetadataVersion() -> u32;
#foreign fn LLVMGetModuleDebugMetadataVersion(Module: LLVMModuleRef) -> u32;
#foreign fn LLVMStripModuleDebugInfo(Module: LLVMModuleRef) -> bool;
#foreign fn LLVMCreateDIBuilderDisallowUnresolved(M: LLVMModuleRef) -> LLVMDIBuilderRef;
#foreign fn LLVMCreateDIBuilder(M: LLVMModuleRef) -> LLVMDIBuilderRef;
#foreign fn LLVMDisposeDIBuilder(Builder: LLVMDIBuilderRef) -> void;
#foreign fn LLVMDIBuilderFinalize(Builder: LLVMDIBuilderRef) -> void;
#foreign fn LLVMDIBuilderFinalizeSubprogram(Builder: LLVMDIBuilderRef, Subprogram: LLVMMetadataRef) -> void;
#foreign fn LLVMDIBuilderCreateCompileUnit(Builder: LLVMDIBuilderRef, Lang: LLVMDWARFSourceLanguage, FileRef: LLVMMetadataRef, Producer: *const u8, ProducerLen: u64, isOptimized: bool, Flags: *const u8, FlagsLen: u64, RuntimeVer: u32, SplitName: *const u8, SplitNameLen: u64, Kind: LLVMDWARFEmissionKind, DWOId: u32, SplitDebugInlining: bool, DebugInfoForProfiling: bool, SysRoot: *const u8, SysRootLen: u64, SDK: *const u8, SDKLen: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateFile(Builder: LLVMDIBuilderRef, Filename: *const u8, FilenameLen: u64, Directory: *const u8, DirectoryLen: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateModule(Builder: LLVMDIBuilderRef, ParentScope: LLVMMetadataRef, Name: *const u8, NameLen: u64, ConfigMacros: *const u8, ConfigMacrosLen: u64, IncludePath: *const u8, IncludePathLen: u64, APINotesFile: *const u8, APINotesFileLen: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateNameSpace(Builder: LLVMDIBuilderRef, ParentScope: LLVMMetadataRef, Name: *const u8, NameLen: u64, ExportSymbols: bool) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateLexicalBlock(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, Column: u32) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateLexicalBlockFile(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Discriminator: u32) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateImportedModuleFromNamespace(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, NS: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateImportedModuleFromAlias(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, ImportedEntity: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, Elements: *mut LLVMMetadataRef, NumElements: u32) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateImportedModuleFromModule(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, M: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, Elements: *mut LLVMMetadataRef, NumElements: u32) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateImportedDeclaration(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Decl: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, Name: *const u8, NameLen: u64, Elements: *mut LLVMMetadataRef, NumElements: u32) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateDebugLocation(Ctx: LLVMContextRef, Line: u32, Column: u32, Scope: LLVMMetadataRef, InlinedAt: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDILocationGetLine(Location: LLVMMetadataRef) -> u32;
#foreign fn LLVMDILocationGetColumn(Location: LLVMMetadataRef) -> u32;
#foreign fn LLVMDILocationGetScope(Location: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDILocationGetInlinedAt(Location: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIScopeGetFile(Scope: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIFileGetDirectory(File: LLVMMetadataRef, Len: *mut u32) -> *const u8;
#foreign fn LLVMDIFileGetFilename(File: LLVMMetadataRef, Len: *mut u32) -> *const u8;
#foreign fn LLVMDIFileGetSource(File: LLVMMetadataRef, Len: *mut u32) -> *const u8;
#foreign fn LLVMDIBuilderGetOrCreateTypeArray(Builder: LLVMDIBuilderRef, Data: *mut LLVMMetadataRef, NumElements: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateSubroutineType(Builder: LLVMDIBuilderRef, File: LLVMMetadataRef, ParameterTypes: *mut LLVMMetadataRef, NumParameterTypes: u32, Flags: LLVMDIFlags) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateMacro(Builder: LLVMDIBuilderRef, ParentMacroFile: LLVMMetadataRef, Line: u32, RecordType: LLVMDWARFMacinfoRecordType, Name: *const u8, NameLen: u64, Value: *const u8, ValueLen: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateTempMacroFile(Builder: LLVMDIBuilderRef, ParentMacroFile: LLVMMetadataRef, Line: u32, File: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateEnumerator(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64, Value: s64, IsUnsigned: bool) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateEnumerationType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, Elements: *mut LLVMMetadataRef, NumElements: u32, ClassTy: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateUnionType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags, Elements: *mut LLVMMetadataRef, NumElements: u32, RunTimeLang: u32, UniqueId: *const u8, UniqueIdLen: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateArrayType(Builder: LLVMDIBuilderRef, Size: u64, AlignInBits: u32, Ty: LLVMMetadataRef, Subscripts: *mut LLVMMetadataRef, NumSubscripts: u32) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateVectorType(Builder: LLVMDIBuilderRef, Size: u64, AlignInBits: u32, Ty: LLVMMetadataRef, Subscripts: *mut LLVMMetadataRef, NumSubscripts: u32) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateUnspecifiedType(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateBasicType(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64, SizeInBits: u64, Encoding: LLVMDWARFTypeEncoding, Flags: LLVMDIFlags) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreatePointerType(Builder: LLVMDIBuilderRef, PointeeTy: LLVMMetadataRef, SizeInBits: u64, AlignInBits: u32, AddressSpace: u32, Name: *const u8, NameLen: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateStructType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags, DerivedFrom: LLVMMetadataRef, Elements: *mut LLVMMetadataRef, NumElements: u32, RunTimeLang: u32, VTableHolder: LLVMMetadataRef, UniqueId: *const u8, UniqueIdLen: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateMemberType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, SizeInBits: u64, AlignInBits: u32, OffsetInBits: u64, Flags: LLVMDIFlags, Ty: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateStaticMemberType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, Type: LLVMMetadataRef, Flags: LLVMDIFlags, ConstantVal: LLVMValueRef, AlignInBits: u32) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateMemberPointerType(Builder: LLVMDIBuilderRef, PointeeType: LLVMMetadataRef, ClassType: LLVMMetadataRef, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateObjCIVar(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, SizeInBits: u64, AlignInBits: u32, OffsetInBits: u64, Flags: LLVMDIFlags, Ty: LLVMMetadataRef, PropertyNode: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateObjCProperty(Builder: LLVMDIBuilderRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, GetterName: *const u8, GetterNameLen: u64, SetterName: *const u8, SetterNameLen: u64, PropertyAttributes: u32, Ty: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateObjectPointerType(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateQualifiedType(Builder: LLVMDIBuilderRef, Tag: u32, Type: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateReferenceType(Builder: LLVMDIBuilderRef, Tag: u32, Type: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateNullPtrType(Builder: LLVMDIBuilderRef) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateTypedef(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, Scope: LLVMMetadataRef, AlignInBits: u32) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateInheritance(Builder: LLVMDIBuilderRef, Ty: LLVMMetadataRef, BaseTy: LLVMMetadataRef, BaseOffset: u64, VBPtrOffset: u32, Flags: LLVMDIFlags) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateForwardDecl(Builder: LLVMDIBuilderRef, Tag: u32, Name: *const u8, NameLen: u64, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, RuntimeLang: u32, SizeInBits: u64, AlignInBits: u32, UniqueIdentifier: *const u8, UniqueIdentifierLen: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateReplaceableCompositeType(Builder: LLVMDIBuilderRef, Tag: u32, Name: *const u8, NameLen: u64, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: u32, RuntimeLang: u32, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags, UniqueIdentifier: *const u8, UniqueIdentifierLen: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateBitFieldMemberType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, OffsetInBits: u64, StorageOffsetInBits: u64, Flags: LLVMDIFlags, Type: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateClassType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, OffsetInBits: u64, Flags: LLVMDIFlags, DerivedFrom: LLVMMetadataRef, Elements: *mut LLVMMetadataRef, NumElements: u32, VTableHolder: LLVMMetadataRef, TemplateParamsNode: LLVMMetadataRef, UniqueIdentifier: *const u8, UniqueIdentifierLen: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateArtificialType(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDITypeGetName(DType: LLVMMetadataRef, Length: *mut u64) -> *const u8;
#foreign fn LLVMDITypeGetSizeInBits(DType: LLVMMetadataRef) -> u64;
#foreign fn LLVMDITypeGetOffsetInBits(DType: LLVMMetadataRef) -> u64;
#foreign fn LLVMDITypeGetAlignInBits(DType: LLVMMetadataRef) -> u32;
#foreign fn LLVMDITypeGetLine(DType: LLVMMetadataRef) -> u32;
#foreign fn LLVMDITypeGetFlags(DType: LLVMMetadataRef) -> LLVMDIFlags;
#foreign fn LLVMDIBuilderGetOrCreateSubrange(Builder: LLVMDIBuilderRef, LowerBound: s64, Count: s64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderGetOrCreateArray(Builder: LLVMDIBuilderRef, Data: *mut LLVMMetadataRef, NumElements: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateExpression(Builder: LLVMDIBuilderRef, Addr: *mut u64, Length: u64) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateConstantValueExpression(Builder: LLVMDIBuilderRef, Value: u64) -> LLVMMetadataRef;
#foreign fn LLVMGetDINodeTag(MD: LLVMMetadataRef) -> u16;
#foreign fn LLVMDIGlobalVariableExpressionGetVariable(GVE: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIGlobalVariableExpressionGetExpression(GVE: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIVariableGetFile(Var: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIVariableGetScope(Var: LLVMMetadataRef) -> LLVMMetadataRef;
#foreign fn LLVMDIVariableGetLine(Var: LLVMMetadataRef) -> u32;
#foreign fn LLVMTemporaryMDNode(Ctx: LLVMContextRef, Data: *mut LLVMMetadataRef, NumElements: u64) -> LLVMMetadataRef;
#foreign fn LLVMDisposeTemporaryMDNode(TempNode: LLVMMetadataRef) -> void;
#foreign fn LLVMMetadataReplaceAllUsesWith(TempTargetMetadata: LLVMMetadataRef, Replacement: LLVMMetadataRef) -> void;
#foreign fn LLVMDIBuilderInsertDeclareRecordBefore(Builder: LLVMDIBuilderRef, Storage: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Instr: LLVMValueRef) -> LLVMDbgRecordRef;
#foreign fn LLVMDIBuilderInsertDeclareRecordAtEnd(Builder: LLVMDIBuilderRef, Storage: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Block: LLVMBasicBlockRef) -> LLVMDbgRecordRef;
#foreign fn LLVMDIBuilderInsertDbgValueRecordBefore(Builder: LLVMDIBuilderRef, Val: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Instr: LLVMValueRef) -> LLVMDbgRecordRef;
#foreign fn LLVMDIBuilderInsertDbgValueRecordAtEnd(Builder: LLVMDIBuilderRef, Val: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Block: LLVMBasicBlockRef) -> LLVMDbgRecordRef;
#foreign fn LLVMDIBuilderCreateAutoVariable(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, File: LLVMMetadataRef, LineNo: u32, Ty: LLVMMetadataRef, AlwaysPreserve: bool, Flags: LLVMDIFlags, AlignInBits: u32) -> LLVMMetadataRef;
#foreign fn LLVMDIBuilderCreateParameterVariable(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: *const u8, NameLen: u64, ArgNo: u32, File: LLVMMetadataRef, LineNo: u32, Ty: LLVMMetadataRef, AlwaysPreserve: bool, Flags: LLVMDIFlags) -> LLVMMetadataRef;
#foreign fn LLVMGetSubprogram(Func: LLVMValueRef) -> LLVMMetadataRef;
#foreign fn LLVMSetSubprogram(Func: LLVMValueRef, SP: LLVMMetadataRef) -> void;
#foreign fn LLVMDISubprogramGetLine(Subprogram: LLVMMetadataRef) -> u32;
#foreign fn LLVMInstructionGetDebugLoc(Inst: LLVMValueRef) -> LLVMMetadataRef;
#foreign fn LLVMInstructionSetDebugLoc(Inst: LLVMValueRef, Loc: LLVMMetadataRef) -> void;
#foreign fn LLVMGetMetadataKind(Metadata: LLVMMetadataRef) -> LLVMMetadataKind;
alias LLVMDisasmContextRef :: *mut void;
alias LLVMOpInfoCallback :: fn*(*mut void, u64, u64, u64, u64, s32, *mut void) -> s32;
struct LLVMOpInfoSymbol1 {
  Present: u64,
  Name: *const u8,
  Value: u64,
};
struct LLVMOpInfo1 {
  AddSymbol: LLVMOpInfoSymbol1,
  SubtractSymbol: LLVMOpInfoSymbol1,
  Value: u64,
  VariantKind: u64,
};
alias LLVMSymbolLookupCallback :: fn*(*mut void, u64, *mut u64, u64, *mut *const u8) -> *const u8;
#foreign fn LLVMCreateDisasm(TripleName: *const u8, DisInfo: *mut void, TagType: s32, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback) -> LLVMDisasmContextRef;
#foreign fn LLVMCreateDisasmCPU(Triple: *const u8, CPU: *const u8, DisInfo: *mut void, TagType: s32, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback) -> LLVMDisasmContextRef;
#foreign fn LLVMCreateDisasmCPUFeatures(Triple: *const u8, CPU: *const u8, Features: *const u8, DisInfo: *mut void, TagType: s32, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback) -> LLVMDisasmContextRef;
#foreign fn LLVMSetDisasmOptions(DC: LLVMDisasmContextRef, Options: u64) -> s32;
#foreign fn LLVMDisasmDispose(DC: LLVMDisasmContextRef) -> void;
#foreign fn LLVMDisasmInstruction(DC: LLVMDisasmContextRef, Bytes: *mut u8, BytesSize: u64, PC: u64, OutString: *mut u8, OutStringSize: u64) -> u64;
struct LLVMOpaqueError;
alias LLVMErrorRef :: *mut LLVMOpaqueError;
alias LLVMErrorTypeId :: *const void;
#foreign fn LLVMGetErrorTypeId(Err: LLVMErrorRef) -> LLVMErrorTypeId;
#foreign fn LLVMConsumeError(Err: LLVMErrorRef) -> void;
#foreign fn LLVMGetErrorMessage(Err: LLVMErrorRef) -> *mut u8;
#foreign fn LLVMDisposeErrorMessage(ErrMsg: *mut u8) -> void;
#foreign fn LLVMGetStringErrorTypeId() -> LLVMErrorTypeId;
#foreign fn LLVMCreateStringError(ErrMsg: *const u8) -> LLVMErrorRef;
enum LLVMByteOrdering {
  LLVMBigEndian = 0,
  LLVMLittleEndian = 1,
};
struct LLVMOpaqueTargetData;
alias LLVMTargetDataRef :: *mut LLVMOpaqueTargetData;
struct LLVMOpaqueTargetLibraryInfotData;
alias LLVMTargetLibraryInfoRef :: *mut LLVMOpaqueTargetLibraryInfotData;
#foreign fn LLVMInitializeAArch64TargetInfo() -> void;
#foreign fn LLVMInitializeAMDGPUTargetInfo() -> void;
#foreign fn LLVMInitializeARMTargetInfo() -> void;
#foreign fn LLVMInitializeAVRTargetInfo() -> void;
#foreign fn LLVMInitializeBPFTargetInfo() -> void;
#foreign fn LLVMInitializeHexagonTargetInfo() -> void;
#foreign fn LLVMInitializeLanaiTargetInfo() -> void;
#foreign fn LLVMInitializeLoongArchTargetInfo() -> void;
#foreign fn LLVMInitializeMipsTargetInfo() -> void;
#foreign fn LLVMInitializeMSP430TargetInfo() -> void;
#foreign fn LLVMInitializeNVPTXTargetInfo() -> void;
#foreign fn LLVMInitializePowerPCTargetInfo() -> void;
#foreign fn LLVMInitializeRISCVTargetInfo() -> void;
#foreign fn LLVMInitializeSparcTargetInfo() -> void;
#foreign fn LLVMInitializeSystemZTargetInfo() -> void;
#foreign fn LLVMInitializeVETargetInfo() -> void;
#foreign fn LLVMInitializeWebAssemblyTargetInfo() -> void;
#foreign fn LLVMInitializeX86TargetInfo() -> void;
#foreign fn LLVMInitializeXCoreTargetInfo() -> void;
#foreign fn LLVMInitializeAArch64Target() -> void;
#foreign fn LLVMInitializeAMDGPUTarget() -> void;
#foreign fn LLVMInitializeARMTarget() -> void;
#foreign fn LLVMInitializeAVRTarget() -> void;
#foreign fn LLVMInitializeBPFTarget() -> void;
#foreign fn LLVMInitializeHexagonTarget() -> void;
#foreign fn LLVMInitializeLanaiTarget() -> void;
#foreign fn LLVMInitializeLoongArchTarget() -> void;
#foreign fn LLVMInitializeMipsTarget() -> void;
#foreign fn LLVMInitializeMSP430Target() -> void;
#foreign fn LLVMInitializeNVPTXTarget() -> void;
#foreign fn LLVMInitializePowerPCTarget() -> void;
#foreign fn LLVMInitializeRISCVTarget() -> void;
#foreign fn LLVMInitializeSparcTarget() -> void;
#foreign fn LLVMInitializeSystemZTarget() -> void;
#foreign fn LLVMInitializeVETarget() -> void;
#foreign fn LLVMInitializeWebAssemblyTarget() -> void;
#foreign fn LLVMInitializeX86Target() -> void;
#foreign fn LLVMInitializeXCoreTarget() -> void;
#foreign fn LLVMInitializeAArch64TargetMC() -> void;
#foreign fn LLVMInitializeAMDGPUTargetMC() -> void;
#foreign fn LLVMInitializeARMTargetMC() -> void;
#foreign fn LLVMInitializeAVRTargetMC() -> void;
#foreign fn LLVMInitializeBPFTargetMC() -> void;
#foreign fn LLVMInitializeHexagonTargetMC() -> void;
#foreign fn LLVMInitializeLanaiTargetMC() -> void;
#foreign fn LLVMInitializeLoongArchTargetMC() -> void;
#foreign fn LLVMInitializeMipsTargetMC() -> void;
#foreign fn LLVMInitializeMSP430TargetMC() -> void;
#foreign fn LLVMInitializeNVPTXTargetMC() -> void;
#foreign fn LLVMInitializePowerPCTargetMC() -> void;
#foreign fn LLVMInitializeRISCVTargetMC() -> void;
#foreign fn LLVMInitializeSparcTargetMC() -> void;
#foreign fn LLVMInitializeSystemZTargetMC() -> void;
#foreign fn LLVMInitializeVETargetMC() -> void;
#foreign fn LLVMInitializeWebAssemblyTargetMC() -> void;
#foreign fn LLVMInitializeX86TargetMC() -> void;
#foreign fn LLVMInitializeXCoreTargetMC() -> void;
#foreign fn LLVMInitializeAArch64AsmPrinter() -> void;
#foreign fn LLVMInitializeAMDGPUAsmPrinter() -> void;
#foreign fn LLVMInitializeARMAsmPrinter() -> void;
#foreign fn LLVMInitializeAVRAsmPrinter() -> void;
#foreign fn LLVMInitializeBPFAsmPrinter() -> void;
#foreign fn LLVMInitializeHexagonAsmPrinter() -> void;
#foreign fn LLVMInitializeLanaiAsmPrinter() -> void;
#foreign fn LLVMInitializeLoongArchAsmPrinter() -> void;
#foreign fn LLVMInitializeMipsAsmPrinter() -> void;
#foreign fn LLVMInitializeMSP430AsmPrinter() -> void;
#foreign fn LLVMInitializeNVPTXAsmPrinter() -> void;
#foreign fn LLVMInitializePowerPCAsmPrinter() -> void;
#foreign fn LLVMInitializeRISCVAsmPrinter() -> void;
#foreign fn LLVMInitializeSparcAsmPrinter() -> void;
#foreign fn LLVMInitializeSystemZAsmPrinter() -> void;
#foreign fn LLVMInitializeVEAsmPrinter() -> void;
#foreign fn LLVMInitializeWebAssemblyAsmPrinter() -> void;
#foreign fn LLVMInitializeX86AsmPrinter() -> void;
#foreign fn LLVMInitializeXCoreAsmPrinter() -> void;
#foreign fn LLVMInitializeAArch64AsmParser() -> void;
#foreign fn LLVMInitializeAMDGPUAsmParser() -> void;
#foreign fn LLVMInitializeARMAsmParser() -> void;
#foreign fn LLVMInitializeAVRAsmParser() -> void;
#foreign fn LLVMInitializeBPFAsmParser() -> void;
#foreign fn LLVMInitializeHexagonAsmParser() -> void;
#foreign fn LLVMInitializeLanaiAsmParser() -> void;
#foreign fn LLVMInitializeLoongArchAsmParser() -> void;
#foreign fn LLVMInitializeMipsAsmParser() -> void;
#foreign fn LLVMInitializeMSP430AsmParser() -> void;
#foreign fn LLVMInitializePowerPCAsmParser() -> void;
#foreign fn LLVMInitializeRISCVAsmParser() -> void;
#foreign fn LLVMInitializeSparcAsmParser() -> void;
#foreign fn LLVMInitializeSystemZAsmParser() -> void;
#foreign fn LLVMInitializeVEAsmParser() -> void;
#foreign fn LLVMInitializeWebAssemblyAsmParser() -> void;
#foreign fn LLVMInitializeX86AsmParser() -> void;
#foreign fn LLVMInitializeAArch64Disassembler() -> void;
#foreign fn LLVMInitializeAMDGPUDisassembler() -> void;
#foreign fn LLVMInitializeARMDisassembler() -> void;
#foreign fn LLVMInitializeAVRDisassembler() -> void;
#foreign fn LLVMInitializeBPFDisassembler() -> void;
#foreign fn LLVMInitializeHexagonDisassembler() -> void;
#foreign fn LLVMInitializeLanaiDisassembler() -> void;
#foreign fn LLVMInitializeLoongArchDisassembler() -> void;
#foreign fn LLVMInitializeMipsDisassembler() -> void;
#foreign fn LLVMInitializeMSP430Disassembler() -> void;
#foreign fn LLVMInitializePowerPCDisassembler() -> void;
#foreign fn LLVMInitializeRISCVDisassembler() -> void;
#foreign fn LLVMInitializeSparcDisassembler() -> void;
#foreign fn LLVMInitializeSystemZDisassembler() -> void;
#foreign fn LLVMInitializeVEDisassembler() -> void;
#foreign fn LLVMInitializeWebAssemblyDisassembler() -> void;
#foreign fn LLVMInitializeX86Disassembler() -> void;
#foreign fn LLVMInitializeXCoreDisassembler() -> void;
#foreign fn LLVMInitializeAllTargetInfos() -> void;
#foreign fn LLVMInitializeAllTargets() -> void;
#foreign fn LLVMInitializeAllTargetMCs() -> void;
#foreign fn LLVMInitializeAllAsmPrinters() -> void;
#foreign fn LLVMInitializeAllAsmParsers() -> void;
#foreign fn LLVMInitializeAllDisassemblers() -> void;
#foreign fn LLVMInitializeNativeTarget() -> bool;
#foreign fn LLVMInitializeNativeAsmParser() -> bool;
#foreign fn LLVMInitializeNativeAsmPrinter() -> bool;
#foreign fn LLVMInitializeNativeDisassembler() -> bool;
#foreign fn LLVMGetModuleDataLayout(M: LLVMModuleRef) -> LLVMTargetDataRef;
#foreign fn LLVMSetModuleDataLayout(M: LLVMModuleRef, DL: LLVMTargetDataRef) -> void;
#foreign fn LLVMCreateTargetData(StringRep: *const u8) -> LLVMTargetDataRef;
#foreign fn LLVMDisposeTargetData(TD: LLVMTargetDataRef) -> void;
#foreign fn LLVMAddTargetLibraryInfo(TLI: LLVMTargetLibraryInfoRef, PM: LLVMPassManagerRef) -> void;
#foreign fn LLVMCopyStringRepOfTargetData(TD: LLVMTargetDataRef) -> *mut u8;
#foreign fn LLVMByteOrder(TD: LLVMTargetDataRef) -> LLVMByteOrdering;
#foreign fn LLVMPointerSize(TD: LLVMTargetDataRef) -> u32;
#foreign fn LLVMPointerSizeForAS(TD: LLVMTargetDataRef, AS: u32) -> u32;
#foreign fn LLVMIntPtrType(TD: LLVMTargetDataRef) -> LLVMTypeRef;
#foreign fn LLVMIntPtrTypeForAS(TD: LLVMTargetDataRef, AS: u32) -> LLVMTypeRef;
#foreign fn LLVMIntPtrTypeInContext(C: LLVMContextRef, TD: LLVMTargetDataRef) -> LLVMTypeRef;
#foreign fn LLVMIntPtrTypeForASInContext(C: LLVMContextRef, TD: LLVMTargetDataRef, AS: u32) -> LLVMTypeRef;
#foreign fn LLVMSizeOfTypeInBits(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u64;
#foreign fn LLVMStoreSizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u64;
#foreign fn LLVMABISizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u64;
#foreign fn LLVMABIAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u32;
#foreign fn LLVMCallFrameAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u32;
#foreign fn LLVMPreferredAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> u32;
#foreign fn LLVMPreferredAlignmentOfGlobal(TD: LLVMTargetDataRef, GlobalVar: LLVMValueRef) -> u32;
#foreign fn LLVMElementAtOffset(TD: LLVMTargetDataRef, StructTy: LLVMTypeRef, Offset: u64) -> u32;
#foreign fn LLVMOffsetOfElement(TD: LLVMTargetDataRef, StructTy: LLVMTypeRef, Element: u32) -> u64;
struct LLVMOpaqueTargetMachineOptions;
alias LLVMTargetMachineOptionsRef :: *mut LLVMOpaqueTargetMachineOptions;
struct LLVMOpaqueTargetMachine;
alias LLVMTargetMachineRef :: *mut LLVMOpaqueTargetMachine;
struct LLVMTarget;
alias LLVMTargetRef :: *mut LLVMTarget;

enum LLVMCodeGenFileType {
  LLVMAssemblyFile = 0,
  LLVMObjectFile = 1,
};
enum LLVMGlobalISelAbortMode {
  LLVMGlobalISelAbortEnable = 0,
  LLVMGlobalISelAbortDisable = 1,
  LLVMGlobalISelAbortDisableWithDiag = 2,
};
#foreign fn LLVMGetFirstTarget() -> LLVMTargetRef;
#foreign fn LLVMGetNextTarget(T: LLVMTargetRef) -> LLVMTargetRef;
#foreign fn LLVMGetTargetFromName(Name: *const u8) -> LLVMTargetRef;
#foreign fn LLVMGetTargetFromTriple(Triple: *const u8, T: *mut LLVMTargetRef, ErrorMessage: *mut *mut u8) -> bool;
#foreign fn LLVMGetTargetName(T: LLVMTargetRef) -> *const u8;
#foreign fn LLVMGetTargetDescription(T: LLVMTargetRef) -> *const u8;
#foreign fn LLVMTargetHasJIT(T: LLVMTargetRef) -> bool;
#foreign fn LLVMTargetHasTargetMachine(T: LLVMTargetRef) -> bool;
#foreign fn LLVMTargetHasAsmBackend(T: LLVMTargetRef) -> bool;
#foreign fn LLVMCreateTargetMachineOptions() -> LLVMTargetMachineOptionsRef;
#foreign fn LLVMDisposeTargetMachineOptions(Options: LLVMTargetMachineOptionsRef) -> void;
#foreign fn LLVMTargetMachineOptionsSetCPU(Options: LLVMTargetMachineOptionsRef, CPU: *const u8) -> void;
#foreign fn LLVMTargetMachineOptionsSetFeatures(Options: LLVMTargetMachineOptionsRef, Features: *const u8) -> void;
#foreign fn LLVMTargetMachineOptionsSetABI(Options: LLVMTargetMachineOptionsRef, ABI: *const u8) -> void;
#foreign fn LLVMTargetMachineOptionsSetCodeGenOptLevel(Options: LLVMTargetMachineOptionsRef, Level: LLVMCodeGenOptLevel) -> void;
#foreign fn LLVMTargetMachineOptionsSetRelocMode(Options: LLVMTargetMachineOptionsRef, Reloc: LLVMRelocMode) -> void;
#foreign fn LLVMTargetMachineOptionsSetCodeModel(Options: LLVMTargetMachineOptionsRef, CodeModel: LLVMCodeModel) -> void;
#foreign fn LLVMCreateTargetMachineWithOptions(T: LLVMTargetRef, Triple: *const u8, Options: LLVMTargetMachineOptionsRef) -> LLVMTargetMachineRef;
#foreign fn LLVMCreateTargetMachine(T: LLVMTargetRef, Triple: *const u8, CPU: *const u8, Features: *const u8, Level: LLVMCodeGenOptLevel, Reloc: LLVMRelocMode, CodeModel: LLVMCodeModel) -> LLVMTargetMachineRef;
#foreign fn LLVMDisposeTargetMachine(T: LLVMTargetMachineRef) -> void;
#foreign fn LLVMGetTargetMachineTarget(T: LLVMTargetMachineRef) -> LLVMTargetRef;
#foreign fn LLVMGetTargetMachineTriple(T: LLVMTargetMachineRef) -> *mut u8;
#foreign fn LLVMGetTargetMachineCPU(T: LLVMTargetMachineRef) -> *mut u8;
#foreign fn LLVMGetTargetMachineFeatureString(T: LLVMTargetMachineRef) -> *mut u8;
#foreign fn LLVMCreateTargetDataLayout(T: LLVMTargetMachineRef) -> LLVMTargetDataRef;
#foreign fn LLVMSetTargetMachineAsmVerbosity(T: LLVMTargetMachineRef, VerboseAsm: bool) -> void;
#foreign fn LLVMSetTargetMachineFastISel(T: LLVMTargetMachineRef, Enable: bool) -> void;
#foreign fn LLVMSetTargetMachineGlobalISel(T: LLVMTargetMachineRef, Enable: bool) -> void;
#foreign fn LLVMSetTargetMachineGlobalISelAbort(T: LLVMTargetMachineRef, Mode: LLVMGlobalISelAbortMode) -> void;
#foreign fn LLVMSetTargetMachineMachineOutliner(T: LLVMTargetMachineRef, Enable: bool) -> void;
#foreign fn LLVMTargetMachineEmitToFile(T: LLVMTargetMachineRef, M: LLVMModuleRef, Filename: *const u8, codegen: LLVMCodeGenFileType, ErrorMessage: *mut *mut u8) -> bool;
#foreign fn LLVMTargetMachineEmitToMemoryBuffer(T: LLVMTargetMachineRef, M: LLVMModuleRef, codegen: LLVMCodeGenFileType, ErrorMessage: *mut *mut u8, OutMemBuf: *mut LLVMMemoryBufferRef) -> bool;
#foreign fn LLVMGetDefaultTargetTriple() -> *mut u8;
#foreign fn LLVMNormalizeTargetTriple(triple: *const u8) -> *mut u8;
#foreign fn LLVMGetHostCPUName() -> *mut u8;
#foreign fn LLVMGetHostCPUFeatures() -> *mut u8;
#foreign fn LLVMAddAnalysisPasses(T: LLVMTargetMachineRef, PM: LLVMPassManagerRef) -> void;
#foreign fn LLVMLinkInMCJIT() -> void;
#foreign fn LLVMLinkInInterpreter() -> void;
struct LLVMOpaqueGenericValue;
alias LLVMGenericValueRef :: *mut LLVMOpaqueGenericValue;
struct LLVMOpaqueExecutionEngine;
alias LLVMExecutionEngineRef :: *mut LLVMOpaqueExecutionEngine;
struct LLVMOpaqueMCJITMemoryManager;
alias LLVMMCJITMemoryManagerRef :: *mut LLVMOpaqueMCJITMemoryManager;
struct LLVMMCJITCompilerOptions {
  OptLevel: u32,
  CodeModel: LLVMCodeModel,
  NoFramePointerElim: bool,
  EnableFastISel: bool,
  MCJMM: LLVMMCJITMemoryManagerRef,
};
#foreign fn LLVMCreateGenericValueOfInt(Ty: LLVMTypeRef, N: u64, IsSigned: bool) -> LLVMGenericValueRef;
#foreign fn LLVMCreateGenericValueOfPointer(P: *mut void) -> LLVMGenericValueRef;
#foreign fn LLVMCreateGenericValueOfFloat(Ty: LLVMTypeRef, N: f64) -> LLVMGenericValueRef;
#foreign fn LLVMGenericValueIntWidth(GenValRef: LLVMGenericValueRef) -> u32;
#foreign fn LLVMGenericValueToInt(GenVal: LLVMGenericValueRef, IsSigned: bool) -> u64;
#foreign fn LLVMGenericValueToPointer(GenVal: LLVMGenericValueRef) -> *mut void;
#foreign fn LLVMGenericValueToFloat(TyRef: LLVMTypeRef, GenVal: LLVMGenericValueRef) -> f64;
#foreign fn LLVMDisposeGenericValue(GenVal: LLVMGenericValueRef) -> void;
#foreign fn LLVMCreateExecutionEngineForModule(OutEE: *mut LLVMExecutionEngineRef, M: LLVMModuleRef, OutError: *mut *mut u8) -> bool;
#foreign fn LLVMCreateInterpreterForModule(OutInterp: *mut LLVMExecutionEngineRef, M: LLVMModuleRef, OutError: *mut *mut u8) -> bool;
#foreign fn LLVMCreateJITCompilerForModule(OutJIT: *mut LLVMExecutionEngineRef, M: LLVMModuleRef, OptLevel: u32, OutError: *mut *mut u8) -> bool;
#foreign fn LLVMInitializeMCJITCompilerOptions(Options: *mut LLVMMCJITCompilerOptions, SizeOfOptions: u64) -> void;
#foreign fn LLVMCreateMCJITCompilerForModule(OutJIT: *mut LLVMExecutionEngineRef, M: LLVMModuleRef, Options: *mut LLVMMCJITCompilerOptions, SizeOfOptions: u64, OutError: *mut *mut u8) -> bool;
#foreign fn LLVMDisposeExecutionEngine(EE: LLVMExecutionEngineRef) -> void;
#foreign fn LLVMRunStaticConstructors(EE: LLVMExecutionEngineRef) -> void;
#foreign fn LLVMRunStaticDestructors(EE: LLVMExecutionEngineRef) -> void;
#foreign fn LLVMRunFunctionAsMain(EE: LLVMExecutionEngineRef, F: LLVMValueRef, ArgC: u32, ArgV: *const *const u8, EnvP: *const *const u8) -> s32;
#foreign fn LLVMRunFunction(EE: LLVMExecutionEngineRef, F: LLVMValueRef, NumArgs: u32, Args: *mut LLVMGenericValueRef) -> LLVMGenericValueRef;
#foreign fn LLVMFreeMachineCodeForFunction(EE: LLVMExecutionEngineRef, F: LLVMValueRef) -> void;
#foreign fn LLVMAddModule(EE: LLVMExecutionEngineRef, M: LLVMModuleRef) -> void;
#foreign fn LLVMRemoveModule(EE: LLVMExecutionEngineRef, M: LLVMModuleRef, OutMod: *mut LLVMModuleRef, OutError: *mut *mut u8) -> bool;
#foreign fn LLVMFindFunction(EE: LLVMExecutionEngineRef, Name: *const u8, OutFn: *mut LLVMValueRef) -> bool;
#foreign fn LLVMRecompileAndRelinkFunction(EE: LLVMExecutionEngineRef, Fn: LLVMValueRef) -> *mut void;
#foreign fn LLVMGetExecutionEngineTargetData(EE: LLVMExecutionEngineRef) -> LLVMTargetDataRef;
#foreign fn LLVMGetExecutionEngineTargetMachine(EE: LLVMExecutionEngineRef) -> LLVMTargetMachineRef;
#foreign fn LLVMAddGlobalMapping(EE: LLVMExecutionEngineRef, Global: LLVMValueRef, Addr: *mut void) -> void;
#foreign fn LLVMGetPointerToGlobal(EE: LLVMExecutionEngineRef, Global: LLVMValueRef) -> *mut void;
#foreign fn LLVMGetGlobalValueAddress(EE: LLVMExecutionEngineRef, Name: *const u8) -> u64;
#foreign fn LLVMGetFunctionAddress(EE: LLVMExecutionEngineRef, Name: *const u8) -> u64;
#foreign fn LLVMExecutionEngineGetErrMsg(EE: LLVMExecutionEngineRef, OutError: *mut *mut u8) -> bool;
alias LLVMMemoryManagerAllocateCodeSectionCallback :: fn*(*mut void, u64, u32, u32, *const u8) -> *mut u8;
alias LLVMMemoryManagerAllocateDataSectionCallback :: fn*(*mut void, u64, u32, u32, *const u8, bool) -> *mut u8;
alias LLVMMemoryManagerFinalizeMemoryCallback :: fn*(*mut void, *mut *mut u8) -> bool;
alias LLVMMemoryManagerDestroyCallback :: fn*(*mut void) -> void;
#foreign fn LLVMCreateSimpleMCJITMemoryManager(Opaque: *mut void, AllocateCodeSection: LLVMMemoryManagerAllocateCodeSectionCallback, AllocateDataSection: LLVMMemoryManagerAllocateDataSectionCallback, FinalizeMemory: LLVMMemoryManagerFinalizeMemoryCallback, Destroy: LLVMMemoryManagerDestroyCallback) -> LLVMMCJITMemoryManagerRef;
#foreign fn LLVMDisposeMCJITMemoryManager(MM: LLVMMCJITMemoryManagerRef) -> void;
#foreign fn LLVMCreateGDBRegistrationListener() -> LLVMJITEventListenerRef;
#foreign fn LLVMCreateIntelJITEventListener() -> LLVMJITEventListenerRef;
#foreign fn LLVMCreateOProfileJITEventListener() -> LLVMJITEventListenerRef;
#foreign fn LLVMCreatePerfJITEventListener() -> LLVMJITEventListenerRef;
#foreign fn LLVMParseIRInContext(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: *mut LLVMModuleRef, OutMessage: *mut *mut u8) -> bool;
enum LLVMLinkerMode {
  LLVMLinkerDestroySource = 0,
  LLVMLinkerPreserveSource_Removed = 1,
};
#foreign fn LLVMLinkModules2(Dest: LLVMModuleRef, Src: LLVMModuleRef) -> bool;
alias LLVMOrcJITTargetAddress :: u64;
alias LLVMOrcExecutorAddress :: u64;
enum LLVMJITSymbolGenericFlags {
  LLVMJITSymbolGenericFlagsNone = 0,
  LLVMJITSymbolGenericFlagsExported = 1,
  LLVMJITSymbolGenericFlagsWeak = 2,
  LLVMJITSymbolGenericFlagsCallable = 4,
  LLVMJITSymbolGenericFlagsMaterializationSideEffectsOnly = 8,
};
alias LLVMJITSymbolTargetFlags :: u8;
struct LLVMJITSymbolFlags {
  GenericFlags: u8,
  TargetFlags: u8,
};
struct LLVMJITEvaluatedSymbol {
  Address: LLVMOrcExecutorAddress,
  Flags: LLVMJITSymbolFlags,
};
struct LLVMOrcOpaqueExecutionSession;
alias LLVMOrcExecutionSessionRef :: *mut LLVMOrcOpaqueExecutionSession;
alias LLVMOrcErrorReporterFunction :: fn*(*mut void, LLVMErrorRef) -> void;
struct LLVMOrcOpaqueSymbolStringPool;
alias LLVMOrcSymbolStringPoolRef :: *mut LLVMOrcOpaqueSymbolStringPool;
struct LLVMOrcOpaqueSymbolStringPoolEntry;
alias LLVMOrcSymbolStringPoolEntryRef :: *mut LLVMOrcOpaqueSymbolStringPoolEntry;
struct LLVMOrcCSymbolFlagsMapPair {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  Flags: LLVMJITSymbolFlags,
};
alias LLVMOrcCSymbolFlagsMapPairs :: *mut LLVMOrcCSymbolFlagsMapPair;
struct LLVMOrcCSymbolMapPair {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  Sym: LLVMJITEvaluatedSymbol,
};
alias LLVMOrcCSymbolMapPairs :: *mut LLVMOrcCSymbolMapPair;
struct LLVMOrcCSymbolAliasMapEntry {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  Flags: LLVMJITSymbolFlags,
};
struct LLVMOrcCSymbolAliasMapPair {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  Entry: LLVMOrcCSymbolAliasMapEntry,
};
alias LLVMOrcCSymbolAliasMapPairs :: *mut LLVMOrcCSymbolAliasMapPair;
struct LLVMOrcOpaqueJITDylib;
alias LLVMOrcJITDylibRef :: *mut LLVMOrcOpaqueJITDylib;
struct LLVMOrcCSymbolsList {
  Symbols: *mut LLVMOrcSymbolStringPoolEntryRef,
  Length: u64,
};
struct LLVMOrcCDependenceMapPair {
  JD: LLVMOrcJITDylibRef,
  Names: LLVMOrcCSymbolsList,
};
alias LLVMOrcCDependenceMapPairs :: *mut LLVMOrcCDependenceMapPair;
struct LLVMOrcCSymbolDependenceGroup {
  Symbols: LLVMOrcCSymbolsList,
  Dependencies: LLVMOrcCDependenceMapPairs,
  NumDependencies: u64,
};
enum LLVMOrcLookupKind {
  LLVMOrcLookupKindStatic = 0,
  LLVMOrcLookupKindDLSym = 1,
};
enum LLVMOrcJITDylibLookupFlags {
  LLVMOrcJITDylibLookupFlagsMatchExportedSymbolsOnly = 0,
  LLVMOrcJITDylibLookupFlagsMatchAllSymbols = 1,
};
struct LLVMOrcCJITDylibSearchOrderElement {
  JD: LLVMOrcJITDylibRef,
  JDLookupFlags: LLVMOrcJITDylibLookupFlags,
};
alias LLVMOrcCJITDylibSearchOrder :: *mut LLVMOrcCJITDylibSearchOrderElement;
enum LLVMOrcSymbolLookupFlags {
  LLVMOrcSymbolLookupFlagsRequiredSymbol = 0,
  LLVMOrcSymbolLookupFlagsWeaklyReferencedSymbol = 1,
};
struct LLVMOrcCLookupSetElement {
  Name: LLVMOrcSymbolStringPoolEntryRef,
  LookupFlags: LLVMOrcSymbolLookupFlags,
};
alias LLVMOrcCLookupSet :: *mut LLVMOrcCLookupSetElement;
struct LLVMOrcOpaqueMaterializationUnit;
alias LLVMOrcMaterializationUnitRef :: *mut LLVMOrcOpaqueMaterializationUnit;
struct LLVMOrcOpaqueMaterializationResponsibility;
alias LLVMOrcMaterializationResponsibilityRef :: *mut LLVMOrcOpaqueMaterializationResponsibility;
alias LLVMOrcMaterializationUnitMaterializeFunction :: fn*(*mut void, LLVMOrcMaterializationResponsibilityRef) -> void;
alias LLVMOrcMaterializationUnitDiscardFunction :: fn*(*mut void, LLVMOrcJITDylibRef, LLVMOrcSymbolStringPoolEntryRef) -> void;
alias LLVMOrcMaterializationUnitDestroyFunction :: fn*(*mut void) -> void;
struct LLVMOrcOpaqueResourceTracker;
alias LLVMOrcResourceTrackerRef :: *mut LLVMOrcOpaqueResourceTracker;
struct LLVMOrcOpaqueDefinitionGenerator;
alias LLVMOrcDefinitionGeneratorRef :: *mut LLVMOrcOpaqueDefinitionGenerator;
struct LLVMOrcOpaqueLookupState;
alias LLVMOrcLookupStateRef :: *mut LLVMOrcOpaqueLookupState;
alias LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction :: fn*(LLVMOrcDefinitionGeneratorRef, *mut void, *mut LLVMOrcLookupStateRef, LLVMOrcLookupKind, LLVMOrcJITDylibRef, LLVMOrcJITDylibLookupFlags, LLVMOrcCLookupSet, u64) -> LLVMErrorRef;
alias LLVMOrcDisposeCAPIDefinitionGeneratorFunction :: fn*(*mut void) -> void;
alias LLVMOrcSymbolPredicate :: fn*(*mut void, LLVMOrcSymbolStringPoolEntryRef) -> s32;
struct LLVMOrcOpaqueThreadSafeContext;
alias LLVMOrcThreadSafeContextRef :: *mut LLVMOrcOpaqueThreadSafeContext;
struct LLVMOrcOpaqueThreadSafeModule;
alias LLVMOrcThreadSafeModuleRef :: *mut LLVMOrcOpaqueThreadSafeModule;
alias LLVMOrcGenericIRModuleOperationFunction :: fn*(*mut void, LLVMModuleRef) -> LLVMErrorRef;
struct LLVMOrcOpaqueJITTargetMachineBuilder;
alias LLVMOrcJITTargetMachineBuilderRef :: *mut LLVMOrcOpaqueJITTargetMachineBuilder;
struct LLVMOrcOpaqueObjectLayer;
alias LLVMOrcObjectLayerRef :: *mut LLVMOrcOpaqueObjectLayer;
struct LLVMOrcOpaqueObjectLinkingLayer;
alias LLVMOrcObjectLinkingLayerRef :: *mut LLVMOrcOpaqueObjectLinkingLayer;
struct LLVMOrcOpaqueIRTransformLayer;
alias LLVMOrcIRTransformLayerRef :: *mut LLVMOrcOpaqueIRTransformLayer;
alias LLVMOrcIRTransformLayerTransformFunction :: fn*(*mut void, *mut LLVMOrcThreadSafeModuleRef, LLVMOrcMaterializationResponsibilityRef) -> LLVMErrorRef;
struct LLVMOrcOpaqueObjectTransformLayer;
alias LLVMOrcObjectTransformLayerRef :: *mut LLVMOrcOpaqueObjectTransformLayer;
alias LLVMOrcObjectTransformLayerTransformFunction :: fn*(*mut void, *mut LLVMMemoryBufferRef) -> LLVMErrorRef;
struct LLVMOrcOpaqueIndirectStubsManager;
alias LLVMOrcIndirectStubsManagerRef :: *mut LLVMOrcOpaqueIndirectStubsManager;
struct LLVMOrcOpaqueLazyCallThroughManager;
alias LLVMOrcLazyCallThroughManagerRef :: *mut LLVMOrcOpaqueLazyCallThroughManager;
struct LLVMOrcOpaqueDumpObjects;
alias LLVMOrcDumpObjectsRef :: *mut LLVMOrcOpaqueDumpObjects;
#foreign fn LLVMOrcExecutionSessionSetErrorReporter(ES: LLVMOrcExecutionSessionRef, ReportError: LLVMOrcErrorReporterFunction, Ctx: *mut void) -> void;
#foreign fn LLVMOrcExecutionSessionGetSymbolStringPool(ES: LLVMOrcExecutionSessionRef) -> LLVMOrcSymbolStringPoolRef;
#foreign fn LLVMOrcSymbolStringPoolClearDeadEntries(SSP: LLVMOrcSymbolStringPoolRef) -> void;
#foreign fn LLVMOrcExecutionSessionIntern(ES: LLVMOrcExecutionSessionRef, Name: *const u8) -> LLVMOrcSymbolStringPoolEntryRef;
alias LLVMOrcExecutionSessionLookupHandleResultFunction :: fn*(LLVMErrorRef, LLVMOrcCSymbolMapPairs, u64, *mut void) -> void;
#foreign fn LLVMOrcExecutionSessionLookup(ES: LLVMOrcExecutionSessionRef, K: LLVMOrcLookupKind, SearchOrder: LLVMOrcCJITDylibSearchOrder, SearchOrderSize: u64, Symbols: LLVMOrcCLookupSet, SymbolsSize: u64, HandleResult: LLVMOrcExecutionSessionLookupHandleResultFunction, Ctx: *mut void) -> void;
#foreign fn LLVMOrcRetainSymbolStringPoolEntry(S: LLVMOrcSymbolStringPoolEntryRef) -> void;
#foreign fn LLVMOrcReleaseSymbolStringPoolEntry(S: LLVMOrcSymbolStringPoolEntryRef) -> void;
#foreign fn LLVMOrcSymbolStringPoolEntryStr(S: LLVMOrcSymbolStringPoolEntryRef) -> *const u8;
#foreign fn LLVMOrcReleaseResourceTracker(RT: LLVMOrcResourceTrackerRef) -> void;
#foreign fn LLVMOrcResourceTrackerTransferTo(SrcRT: LLVMOrcResourceTrackerRef, DstRT: LLVMOrcResourceTrackerRef) -> void;
#foreign fn LLVMOrcResourceTrackerRemove(RT: LLVMOrcResourceTrackerRef) -> LLVMErrorRef;
#foreign fn LLVMOrcDisposeDefinitionGenerator(DG: LLVMOrcDefinitionGeneratorRef) -> void;
#foreign fn LLVMOrcDisposeMaterializationUnit(MU: LLVMOrcMaterializationUnitRef) -> void;
#foreign fn LLVMOrcCreateCustomMaterializationUnit(Name: *const u8, Ctx: *mut void, Syms: LLVMOrcCSymbolFlagsMapPairs, NumSyms: u64, InitSym: LLVMOrcSymbolStringPoolEntryRef, Materialize: LLVMOrcMaterializationUnitMaterializeFunction, Discard: LLVMOrcMaterializationUnitDiscardFunction, Destroy: LLVMOrcMaterializationUnitDestroyFunction) -> LLVMOrcMaterializationUnitRef;
#foreign fn LLVMOrcAbsoluteSymbols(Syms: LLVMOrcCSymbolMapPairs, NumPairs: u64) -> LLVMOrcMaterializationUnitRef;
#foreign fn LLVMOrcLazyReexports(LCTM: LLVMOrcLazyCallThroughManagerRef, ISM: LLVMOrcIndirectStubsManagerRef, SourceRef: LLVMOrcJITDylibRef, CallableAliases: LLVMOrcCSymbolAliasMapPairs, NumPairs: u64) -> LLVMOrcMaterializationUnitRef;
#foreign fn LLVMOrcDisposeMaterializationResponsibility(MR: LLVMOrcMaterializationResponsibilityRef) -> void;
#foreign fn LLVMOrcMaterializationResponsibilityGetTargetDylib(MR: LLVMOrcMaterializationResponsibilityRef) -> LLVMOrcJITDylibRef;
#foreign fn LLVMOrcMaterializationResponsibilityGetExecutionSession(MR: LLVMOrcMaterializationResponsibilityRef) -> LLVMOrcExecutionSessionRef;
#foreign fn LLVMOrcMaterializationResponsibilityGetSymbols(MR: LLVMOrcMaterializationResponsibilityRef, NumPairs: *mut u64) -> LLVMOrcCSymbolFlagsMapPairs;
#foreign fn LLVMOrcDisposeCSymbolFlagsMap(Pairs: LLVMOrcCSymbolFlagsMapPairs) -> void;
#foreign fn LLVMOrcMaterializationResponsibilityGetInitializerSymbol(MR: LLVMOrcMaterializationResponsibilityRef) -> LLVMOrcSymbolStringPoolEntryRef;
#foreign fn LLVMOrcMaterializationResponsibilityGetRequestedSymbols(MR: LLVMOrcMaterializationResponsibilityRef, NumSymbols: *mut u64) -> *mut LLVMOrcSymbolStringPoolEntryRef;
#foreign fn LLVMOrcDisposeSymbols(Symbols: *mut LLVMOrcSymbolStringPoolEntryRef) -> void;
#foreign fn LLVMOrcMaterializationResponsibilityNotifyResolved(MR: LLVMOrcMaterializationResponsibilityRef, Symbols: LLVMOrcCSymbolMapPairs, NumPairs: u64) -> LLVMErrorRef;
#foreign fn LLVMOrcMaterializationResponsibilityNotifyEmitted(MR: LLVMOrcMaterializationResponsibilityRef, SymbolDepGroups: *mut LLVMOrcCSymbolDependenceGroup, NumSymbolDepGroups: u64) -> LLVMErrorRef;
#foreign fn LLVMOrcMaterializationResponsibilityDefineMaterializing(MR: LLVMOrcMaterializationResponsibilityRef, Pairs: LLVMOrcCSymbolFlagsMapPairs, NumPairs: u64) -> LLVMErrorRef;
#foreign fn LLVMOrcMaterializationResponsibilityFailMaterialization(MR: LLVMOrcMaterializationResponsibilityRef) -> void;
#foreign fn LLVMOrcMaterializationResponsibilityReplace(MR: LLVMOrcMaterializationResponsibilityRef, MU: LLVMOrcMaterializationUnitRef) -> LLVMErrorRef;
#foreign fn LLVMOrcMaterializationResponsibilityDelegate(MR: LLVMOrcMaterializationResponsibilityRef, Symbols: *mut LLVMOrcSymbolStringPoolEntryRef, NumSymbols: u64, Result: *mut LLVMOrcMaterializationResponsibilityRef) -> LLVMErrorRef;
#foreign fn LLVMOrcExecutionSessionCreateBareJITDylib(ES: LLVMOrcExecutionSessionRef, Name: *const u8) -> LLVMOrcJITDylibRef;
#foreign fn LLVMOrcExecutionSessionCreateJITDylib(ES: LLVMOrcExecutionSessionRef, Result: *mut LLVMOrcJITDylibRef, Name: *const u8) -> LLVMErrorRef;
#foreign fn LLVMOrcExecutionSessionGetJITDylibByName(ES: LLVMOrcExecutionSessionRef, Name: *const u8) -> LLVMOrcJITDylibRef;
#foreign fn LLVMOrcJITDylibCreateResourceTracker(JD: LLVMOrcJITDylibRef) -> LLVMOrcResourceTrackerRef;
#foreign fn LLVMOrcJITDylibGetDefaultResourceTracker(JD: LLVMOrcJITDylibRef) -> LLVMOrcResourceTrackerRef;
#foreign fn LLVMOrcJITDylibDefine(JD: LLVMOrcJITDylibRef, MU: LLVMOrcMaterializationUnitRef) -> LLVMErrorRef;
#foreign fn LLVMOrcJITDylibClear(JD: LLVMOrcJITDylibRef) -> LLVMErrorRef;
#foreign fn LLVMOrcJITDylibAddGenerator(JD: LLVMOrcJITDylibRef, DG: LLVMOrcDefinitionGeneratorRef) -> void;
#foreign fn LLVMOrcCreateCustomCAPIDefinitionGenerator(F: LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction, Ctx: *mut void, Dispose: LLVMOrcDisposeCAPIDefinitionGeneratorFunction) -> LLVMOrcDefinitionGeneratorRef;
#foreign fn LLVMOrcLookupStateContinueLookup(S: LLVMOrcLookupStateRef, Err: LLVMErrorRef) -> void;
#foreign fn LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess(Result: *mut LLVMOrcDefinitionGeneratorRef, GlobalPrefx: u8, Filter: LLVMOrcSymbolPredicate, FilterCtx: *mut void) -> LLVMErrorRef;
#foreign fn LLVMOrcCreateDynamicLibrarySearchGeneratorForPath(Result: *mut LLVMOrcDefinitionGeneratorRef, FileName: *const u8, GlobalPrefix: u8, Filter: LLVMOrcSymbolPredicate, FilterCtx: *mut void) -> LLVMErrorRef;
#foreign fn LLVMOrcCreateStaticLibrarySearchGeneratorForPath(Result: *mut LLVMOrcDefinitionGeneratorRef, ObjLayer: LLVMOrcObjectLayerRef, FileName: *const u8, TargetTriple: *const u8) -> LLVMErrorRef;
#foreign fn LLVMOrcCreateNewThreadSafeContext() -> LLVMOrcThreadSafeContextRef;
#foreign fn LLVMOrcThreadSafeContextGetContext(TSCtx: LLVMOrcThreadSafeContextRef) -> LLVMContextRef;
#foreign fn LLVMOrcDisposeThreadSafeContext(TSCtx: LLVMOrcThreadSafeContextRef) -> void;
#foreign fn LLVMOrcCreateNewThreadSafeModule(M: LLVMModuleRef, TSCtx: LLVMOrcThreadSafeContextRef) -> LLVMOrcThreadSafeModuleRef;
#foreign fn LLVMOrcDisposeThreadSafeModule(TSM: LLVMOrcThreadSafeModuleRef) -> void;
#foreign fn LLVMOrcThreadSafeModuleWithModuleDo(TSM: LLVMOrcThreadSafeModuleRef, F: LLVMOrcGenericIRModuleOperationFunction, Ctx: *mut void) -> LLVMErrorRef;
#foreign fn LLVMOrcJITTargetMachineBuilderDetectHost(Result: *mut LLVMOrcJITTargetMachineBuilderRef) -> LLVMErrorRef;
#foreign fn LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine(TM: LLVMTargetMachineRef) -> LLVMOrcJITTargetMachineBuilderRef;
#foreign fn LLVMOrcDisposeJITTargetMachineBuilder(JTMB: LLVMOrcJITTargetMachineBuilderRef) -> void;
#foreign fn LLVMOrcJITTargetMachineBuilderGetTargetTriple(JTMB: LLVMOrcJITTargetMachineBuilderRef) -> *mut u8;
#foreign fn LLVMOrcJITTargetMachineBuilderSetTargetTriple(JTMB: LLVMOrcJITTargetMachineBuilderRef, TargetTriple: *const u8) -> void;
#foreign fn LLVMOrcObjectLayerAddObjectFile(ObjLayer: LLVMOrcObjectLayerRef, JD: LLVMOrcJITDylibRef, ObjBuffer: LLVMMemoryBufferRef) -> LLVMErrorRef;
#foreign fn LLVMOrcObjectLayerAddObjectFileWithRT(ObjLayer: LLVMOrcObjectLayerRef, RT: LLVMOrcResourceTrackerRef, ObjBuffer: LLVMMemoryBufferRef) -> LLVMErrorRef;
#foreign fn LLVMOrcObjectLayerEmit(ObjLayer: LLVMOrcObjectLayerRef, R: LLVMOrcMaterializationResponsibilityRef, ObjBuffer: LLVMMemoryBufferRef) -> void;
#foreign fn LLVMOrcDisposeObjectLayer(ObjLayer: LLVMOrcObjectLayerRef) -> void;
#foreign fn LLVMOrcIRTransformLayerEmit(IRTransformLayer: LLVMOrcIRTransformLayerRef, MR: LLVMOrcMaterializationResponsibilityRef, TSM: LLVMOrcThreadSafeModuleRef) -> void;
#foreign fn LLVMOrcIRTransformLayerSetTransform(IRTransformLayer: LLVMOrcIRTransformLayerRef, TransformFunction: LLVMOrcIRTransformLayerTransformFunction, Ctx: *mut void) -> void;
#foreign fn LLVMOrcObjectTransformLayerSetTransform(ObjTransformLayer: LLVMOrcObjectTransformLayerRef, TransformFunction: LLVMOrcObjectTransformLayerTransformFunction, Ctx: *mut void) -> void;
#foreign fn LLVMOrcCreateLocalIndirectStubsManager(TargetTriple: *const u8) -> LLVMOrcIndirectStubsManagerRef;
#foreign fn LLVMOrcDisposeIndirectStubsManager(ISM: LLVMOrcIndirectStubsManagerRef) -> void;
#foreign fn LLVMOrcCreateLocalLazyCallThroughManager(TargetTriple: *const u8, ES: LLVMOrcExecutionSessionRef, ErrorHandlerAddr: LLVMOrcJITTargetAddress, LCTM: *mut LLVMOrcLazyCallThroughManagerRef) -> LLVMErrorRef;
#foreign fn LLVMOrcDisposeLazyCallThroughManager(LCTM: LLVMOrcLazyCallThroughManagerRef) -> void;
#foreign fn LLVMOrcCreateDumpObjects(DumpDir: *const u8, IdentifierOverride: *const u8) -> LLVMOrcDumpObjectsRef;
#foreign fn LLVMOrcDisposeDumpObjects(DumpObjects: LLVMOrcDumpObjectsRef) -> void;
#foreign fn LLVMOrcDumpObjects_CallOperator(DumpObjects: LLVMOrcDumpObjectsRef, ObjBuffer: *mut LLVMMemoryBufferRef) -> LLVMErrorRef;
alias LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction :: fn*(*mut void, LLVMOrcExecutionSessionRef, *const u8) -> LLVMOrcObjectLayerRef;
struct LLVMOrcOpaqueLLJITBuilder;
alias LLVMOrcLLJITBuilderRef :: *mut LLVMOrcOpaqueLLJITBuilder;
struct LLVMOrcOpaqueLLJIT;
alias LLVMOrcLLJITRef :: *mut LLVMOrcOpaqueLLJIT;
#foreign fn LLVMOrcCreateLLJITBuilder() -> LLVMOrcLLJITBuilderRef;
#foreign fn LLVMOrcDisposeLLJITBuilder(Builder: LLVMOrcLLJITBuilderRef) -> void;
#foreign fn LLVMOrcLLJITBuilderSetJITTargetMachineBuilder(Builder: LLVMOrcLLJITBuilderRef, JTMB: LLVMOrcJITTargetMachineBuilderRef) -> void;
#foreign fn LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator(Builder: LLVMOrcLLJITBuilderRef, F: LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction, Ctx: *mut void) -> void;
#foreign fn LLVMOrcCreateLLJIT(Result: *mut LLVMOrcLLJITRef, Builder: LLVMOrcLLJITBuilderRef) -> LLVMErrorRef;
#foreign fn LLVMOrcDisposeLLJIT(J: LLVMOrcLLJITRef) -> LLVMErrorRef;
#foreign fn LLVMOrcLLJITGetExecutionSession(J: LLVMOrcLLJITRef) -> LLVMOrcExecutionSessionRef;
#foreign fn LLVMOrcLLJITGetMainJITDylib(J: LLVMOrcLLJITRef) -> LLVMOrcJITDylibRef;
#foreign fn LLVMOrcLLJITGetTripleString(J: LLVMOrcLLJITRef) -> *const u8;
#foreign fn LLVMOrcLLJITGetGlobalPrefix(J: LLVMOrcLLJITRef) -> u8;
#foreign fn LLVMOrcLLJITMangleAndIntern(J: LLVMOrcLLJITRef, UnmangledName: *const u8) -> LLVMOrcSymbolStringPoolEntryRef;
#foreign fn LLVMOrcLLJITAddObjectFile(J: LLVMOrcLLJITRef, JD: LLVMOrcJITDylibRef, ObjBuffer: LLVMMemoryBufferRef) -> LLVMErrorRef;
#foreign fn LLVMOrcLLJITAddObjectFileWithRT(J: LLVMOrcLLJITRef, RT: LLVMOrcResourceTrackerRef, ObjBuffer: LLVMMemoryBufferRef) -> LLVMErrorRef;
#foreign fn LLVMOrcLLJITAddLLVMIRModule(J: LLVMOrcLLJITRef, JD: LLVMOrcJITDylibRef, TSM: LLVMOrcThreadSafeModuleRef) -> LLVMErrorRef;
#foreign fn LLVMOrcLLJITAddLLVMIRModuleWithRT(J: LLVMOrcLLJITRef, JD: LLVMOrcResourceTrackerRef, TSM: LLVMOrcThreadSafeModuleRef) -> LLVMErrorRef;
#foreign fn LLVMOrcLLJITLookup(J: LLVMOrcLLJITRef, Result: *mut LLVMOrcExecutorAddress, Name: *const u8) -> LLVMErrorRef;
#foreign fn LLVMOrcLLJITGetObjLinkingLayer(J: LLVMOrcLLJITRef) -> LLVMOrcObjectLayerRef;
#foreign fn LLVMOrcLLJITGetObjTransformLayer(J: LLVMOrcLLJITRef) -> LLVMOrcObjectTransformLayerRef;
#foreign fn LLVMOrcLLJITGetIRTransformLayer(J: LLVMOrcLLJITRef) -> LLVMOrcIRTransformLayerRef;
#foreign fn LLVMOrcLLJITGetDataLayoutStr(J: LLVMOrcLLJITRef) -> *const u8;
#foreign fn LLVMOrcLLJITEnableDebugSupport(J: LLVMOrcLLJITRef) -> LLVMErrorRef;

struct LLVMOpaqueSectionIterator;
alias LLVMSectionIteratorRef :: *mut LLVMOpaqueSectionIterator;
struct LLVMOpaqueSymbolIterator;
alias LLVMSymbolIteratorRef :: *mut LLVMOpaqueSymbolIterator;
struct LLVMOpaqueRelocationIterator;
alias LLVMRelocationIteratorRef :: *mut LLVMOpaqueRelocationIterator;
enum LLVMBinaryType {
  LLVMBinaryTypeArchive = 0,
  LLVMBinaryTypeMachOUniversalBinary = 1,
  LLVMBinaryTypeCOFFImportFile = 2,
  LLVMBinaryTypeIR = 3,
  LLVMBinaryTypeWinRes = 4,
  LLVMBinaryTypeCOFF = 5,
  LLVMBinaryTypeELF32L = 6,
  LLVMBinaryTypeELF32B = 7,
  LLVMBinaryTypeELF64L = 8,
  LLVMBinaryTypeELF64B = 9,
  LLVMBinaryTypeMachO32L = 10,
  LLVMBinaryTypeMachO32B = 11,
  LLVMBinaryTypeMachO64L = 12,
  LLVMBinaryTypeMachO64B = 13,
  LLVMBinaryTypeWasm = 14,
  LLVMBinaryTypeOffload = 15,
};
#foreign fn LLVMCreateBinary(MemBuf: LLVMMemoryBufferRef, Context: LLVMContextRef, ErrorMessage: *mut *mut u8) -> LLVMBinaryRef;
#foreign fn LLVMDisposeBinary(BR: LLVMBinaryRef) -> void;
#foreign fn LLVMBinaryCopyMemoryBuffer(BR: LLVMBinaryRef) -> LLVMMemoryBufferRef;
#foreign fn LLVMBinaryGetType(BR: LLVMBinaryRef) -> LLVMBinaryType;
#foreign fn LLVMMachOUniversalBinaryCopyObjectForArch(BR: LLVMBinaryRef, Arch: *const u8, ArchLen: u64, ErrorMessage: *mut *mut u8) -> LLVMBinaryRef;
#foreign fn LLVMObjectFileCopySectionIterator(BR: LLVMBinaryRef) -> LLVMSectionIteratorRef;
#foreign fn LLVMObjectFileIsSectionIteratorAtEnd(BR: LLVMBinaryRef, SI: LLVMSectionIteratorRef) -> bool;
#foreign fn LLVMObjectFileCopySymbolIterator(BR: LLVMBinaryRef) -> LLVMSymbolIteratorRef;
#foreign fn LLVMObjectFileIsSymbolIteratorAtEnd(BR: LLVMBinaryRef, SI: LLVMSymbolIteratorRef) -> bool;
#foreign fn LLVMDisposeSectionIterator(SI: LLVMSectionIteratorRef) -> void;
#foreign fn LLVMMoveToNextSection(SI: LLVMSectionIteratorRef) -> void;
#foreign fn LLVMMoveToContainingSection(Sect: LLVMSectionIteratorRef, Sym: LLVMSymbolIteratorRef) -> void;
#foreign fn LLVMDisposeSymbolIterator(SI: LLVMSymbolIteratorRef) -> void;
#foreign fn LLVMMoveToNextSymbol(SI: LLVMSymbolIteratorRef) -> void;
#foreign fn LLVMGetSectionName(SI: LLVMSectionIteratorRef) -> *const u8;
#foreign fn LLVMGetSectionSize(SI: LLVMSectionIteratorRef) -> u64;
#foreign fn LLVMGetSectionContents(SI: LLVMSectionIteratorRef) -> *const u8;
#foreign fn LLVMGetSectionAddress(SI: LLVMSectionIteratorRef) -> u64;
#foreign fn LLVMGetSectionContainsSymbol(SI: LLVMSectionIteratorRef, Sym: LLVMSymbolIteratorRef) -> bool;
#foreign fn LLVMGetRelocations(Section: LLVMSectionIteratorRef) -> LLVMRelocationIteratorRef;
#foreign fn LLVMDisposeRelocationIterator(RI: LLVMRelocationIteratorRef) -> void;
#foreign fn LLVMIsRelocationIteratorAtEnd(Section: LLVMSectionIteratorRef, RI: LLVMRelocationIteratorRef) -> bool;
#foreign fn LLVMMoveToNextRelocation(RI: LLVMRelocationIteratorRef) -> void;
#foreign fn LLVMGetSymbolName(SI: LLVMSymbolIteratorRef) -> *const u8;
#foreign fn LLVMGetSymbolAddress(SI: LLVMSymbolIteratorRef) -> u64;
#foreign fn LLVMGetSymbolSize(SI: LLVMSymbolIteratorRef) -> u64;
#foreign fn LLVMGetRelocationOffset(RI: LLVMRelocationIteratorRef) -> u64;
#foreign fn LLVMGetRelocationSymbol(RI: LLVMRelocationIteratorRef) -> LLVMSymbolIteratorRef;
#foreign fn LLVMGetRelocationType(RI: LLVMRelocationIteratorRef) -> u64;
#foreign fn LLVMGetRelocationTypeName(RI: LLVMRelocationIteratorRef) -> *const u8;
#foreign fn LLVMGetRelocationValueString(RI: LLVMRelocationIteratorRef) -> *const u8;
struct LLVMOpaqueObjectFile;
alias LLVMObjectFileRef :: *mut LLVMOpaqueObjectFile;
#foreign fn LLVMCreateObjectFile(MemBuf: LLVMMemoryBufferRef) -> LLVMObjectFileRef;
#foreign fn LLVMDisposeObjectFile(ObjectFile: LLVMObjectFileRef) -> void;
#foreign fn LLVMGetSections(ObjectFile: LLVMObjectFileRef) -> LLVMSectionIteratorRef;
#foreign fn LLVMIsSectionIteratorAtEnd(ObjectFile: LLVMObjectFileRef, SI: LLVMSectionIteratorRef) -> bool;
#foreign fn LLVMGetSymbols(ObjectFile: LLVMObjectFileRef) -> LLVMSymbolIteratorRef;
#foreign fn LLVMIsSymbolIteratorAtEnd(ObjectFile: LLVMObjectFileRef, SI: LLVMSymbolIteratorRef) -> bool;
alias LLVMMemoryManagerCreateContextCallback :: fn*(*mut void) -> *mut void;
alias LLVMMemoryManagerNotifyTerminatingCallback :: fn*(*mut void) -> void;
#foreign fn LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager(ES: LLVMOrcExecutionSessionRef) -> LLVMOrcObjectLayerRef;
#foreign fn LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks(ES: LLVMOrcExecutionSessionRef, CreateContextCtx: *mut void, CreateContext: LLVMMemoryManagerCreateContextCallback, NotifyTerminating: LLVMMemoryManagerNotifyTerminatingCallback, AllocateCodeSection: LLVMMemoryManagerAllocateCodeSectionCallback, AllocateDataSection: LLVMMemoryManagerAllocateDataSectionCallback, FinalizeMemory: LLVMMemoryManagerFinalizeMemoryCallback, Destroy: LLVMMemoryManagerDestroyCallback) -> LLVMOrcObjectLayerRef;
#foreign fn LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener(RTDyldObjLinkingLayer: LLVMOrcObjectLayerRef, Listener: LLVMJITEventListenerRef) -> void;
enum LLVMRemarkType {
  LLVMRemarkTypeUnknown = 0,
  LLVMRemarkTypePassed = 1,
  LLVMRemarkTypeMissed = 2,
  LLVMRemarkTypeAnalysis = 3,
  LLVMRemarkTypeAnalysisFPCommute = 4,
  LLVMRemarkTypeAnalysisAliasing = 5,
  LLVMRemarkTypeFailure = 6,
};
struct LLVMRemarkOpaqueString;
alias LLVMRemarkStringRef :: *mut LLVMRemarkOpaqueString;
#foreign fn LLVMRemarkStringGetData(String: LLVMRemarkStringRef) -> *const u8;
#foreign fn LLVMRemarkStringGetLen(String: LLVMRemarkStringRef) -> u32;
struct LLVMRemarkOpaqueDebugLoc;
alias LLVMRemarkDebugLocRef :: *mut LLVMRemarkOpaqueDebugLoc;
#foreign fn LLVMRemarkDebugLocGetSourceFilePath(DL: LLVMRemarkDebugLocRef) -> LLVMRemarkStringRef;
#foreign fn LLVMRemarkDebugLocGetSourceLine(DL: LLVMRemarkDebugLocRef) -> u32;
#foreign fn LLVMRemarkDebugLocGetSourceColumn(DL: LLVMRemarkDebugLocRef) -> u32;
struct LLVMRemarkOpaqueArg;
alias LLVMRemarkArgRef :: *mut LLVMRemarkOpaqueArg;
#foreign fn LLVMRemarkArgGetKey(Arg: LLVMRemarkArgRef) -> LLVMRemarkStringRef;
#foreign fn LLVMRemarkArgGetValue(Arg: LLVMRemarkArgRef) -> LLVMRemarkStringRef;
#foreign fn LLVMRemarkArgGetDebugLoc(Arg: LLVMRemarkArgRef) -> LLVMRemarkDebugLocRef;
struct LLVMRemarkOpaqueEntry;
alias LLVMRemarkEntryRef :: *mut LLVMRemarkOpaqueEntry;
#foreign fn LLVMRemarkEntryDispose(Remark: LLVMRemarkEntryRef) -> void;
#foreign fn LLVMRemarkEntryGetType(Remark: LLVMRemarkEntryRef) -> LLVMRemarkType;
#foreign fn LLVMRemarkEntryGetPassName(Remark: LLVMRemarkEntryRef) -> LLVMRemarkStringRef;
#foreign fn LLVMRemarkEntryGetRemarkName(Remark: LLVMRemarkEntryRef) -> LLVMRemarkStringRef;
#foreign fn LLVMRemarkEntryGetFunctionName(Remark: LLVMRemarkEntryRef) -> LLVMRemarkStringRef;
#foreign fn LLVMRemarkEntryGetDebugLoc(Remark: LLVMRemarkEntryRef) -> LLVMRemarkDebugLocRef;
#foreign fn LLVMRemarkEntryGetHotness(Remark: LLVMRemarkEntryRef) -> u64;
#foreign fn LLVMRemarkEntryGetNumArgs(Remark: LLVMRemarkEntryRef) -> u32;
#foreign fn LLVMRemarkEntryGetFirstArg(Remark: LLVMRemarkEntryRef) -> LLVMRemarkArgRef;
#foreign fn LLVMRemarkEntryGetNextArg(It: LLVMRemarkArgRef, Remark: LLVMRemarkEntryRef) -> LLVMRemarkArgRef;
struct LLVMRemarkOpaqueParser;
alias LLVMRemarkParserRef :: *mut LLVMRemarkOpaqueParser;
#foreign fn LLVMRemarkParserCreateYAML(Buf: *const void, Size: u64) -> LLVMRemarkParserRef;
#foreign fn LLVMRemarkParserCreateBitstream(Buf: *const void, Size: u64) -> LLVMRemarkParserRef;
#foreign fn LLVMRemarkParserGetNext(Parser: LLVMRemarkParserRef) -> LLVMRemarkEntryRef;
#foreign fn LLVMRemarkParserHasError(Parser: LLVMRemarkParserRef) -> bool;
#foreign fn LLVMRemarkParserGetErrorMessage(Parser: LLVMRemarkParserRef) -> *const u8;
#foreign fn LLVMRemarkParserDispose(Parser: LLVMRemarkParserRef) -> void;
#foreign fn LLVMRemarkVersion() -> u32;
#foreign fn LLVMLoadLibraryPermanently(Filename: *const u8) -> bool;
#foreign fn LLVMParseCommandLineOptions(argc: s32, argv: *const *const u8, Overview: *const u8) -> void;
#foreign fn LLVMSearchForAddressOfSymbol(symbolName: *const u8) -> *mut void;
#foreign fn LLVMAddSymbol(symbolName: *const u8, symbolValue: *mut void) -> void;

struct LLVMOpaquePassBuilderOptions;

alias LLVMPassBuilderOptionsRef :: *mut LLVMOpaquePassBuilderOptions;
#foreign fn LLVMRunPasses(M: LLVMModuleRef, Passes: *const u8, TM: LLVMTargetMachineRef, Options: LLVMPassBuilderOptionsRef) -> LLVMErrorRef;
#foreign fn LLVMCreatePassBuilderOptions() -> LLVMPassBuilderOptionsRef;
#foreign fn LLVMPassBuilderOptionsSetVerifyEach(Options: LLVMPassBuilderOptionsRef, VerifyEach: bool) -> void;
#foreign fn LLVMPassBuilderOptionsSetDebugLogging(Options: LLVMPassBuilderOptionsRef, DebugLogging: bool) -> void;
#foreign fn LLVMPassBuilderOptionsSetLoopInterleaving(Options: LLVMPassBuilderOptionsRef, LoopInterleaving: bool) -> void;
#foreign fn LLVMPassBuilderOptionsSetLoopVectorization(Options: LLVMPassBuilderOptionsRef, LoopVectorization: bool) -> void;
#foreign fn LLVMPassBuilderOptionsSetSLPVectorization(Options: LLVMPassBuilderOptionsRef, SLPVectorization: bool) -> void;
#foreign fn LLVMPassBuilderOptionsSetLoopUnrolling(Options: LLVMPassBuilderOptionsRef, LoopUnrolling: bool) -> void;
#foreign fn LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll(Options: LLVMPassBuilderOptionsRef, ForgetAllSCEVInLoopUnroll: bool) -> void;
#foreign fn LLVMPassBuilderOptionsSetLicmMssaOptCap(Options: LLVMPassBuilderOptionsRef, LicmMssaOptCap: u32) -> void;
#foreign fn LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap(Options: LLVMPassBuilderOptionsRef, LicmMssaNoAccForPromotionCap: u32) -> void;
#foreign fn LLVMPassBuilderOptionsSetCallGraphProfile(Options: LLVMPassBuilderOptionsRef, CallGraphProfile: bool) -> void;
#foreign fn LLVMPassBuilderOptionsSetMergeFunctions(Options: LLVMPassBuilderOptionsRef, MergeFunctions: bool) -> void;
#foreign fn LLVMPassBuilderOptionsSetInlinerThreshold(Options: LLVMPassBuilderOptionsRef, Threshold: s32) -> void;
#foreign fn LLVMDisposePassBuilderOptions(Options: LLVMPassBuilderOptionsRef) -> void;


fn main() {

}