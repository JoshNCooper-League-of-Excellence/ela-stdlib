#region UTF8 {
  UTF8_ERROR : u32 = 0xFFFD;
  /*
    Copyright 2024 Kang-Che Sung

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    */
  /* SPDX-License-Identifier: MIT */

  // returns a tuple representing:
  // .0: a u32 code point,
  // .1: the 'advance' which is the number of bytes this codepoint consumed.
  fn utf8_to_code_point(sequence: Slice!<u8>) -> (u32, s8) {
    if sequence.length == 0
      then return (UTF8_ERROR, 1);

    if sequence[0] <= 0x7F
      then return (sequence[0] as u32, 1);

    /* Multibyte sequence. We assume valid sequences appear more
        frequently than invalid ones. */
    mut max_length : u32;
    mut min_code_point: u32;
    mut code_point: u32;

    byte_0 := sequence[0];

    if (byte_0 & 0xF0) < 0xE0 {
      /* First byte in the range [0x80, 0xBF] is covered here.
          It wraps around to an invalid code point. */
      max_length = 2;
      min_code_point = 0x80;
      code_point = (byte_0 - 0xC0) as u32;
    } else if ((byte_0 & 0xF0) == 0xE0) {
      max_length = 3;
      min_code_point = 0x0800;
      code_point = (byte_0 - 0xE0) as u32;
    } else {
      max_length = 4;
      min_code_point = 0x10000;
      code_point = (byte_0 - 0xF0) as u32;
    }

    index := 1; // we start 1 byte in front of the byte we already decoded above.
    while index < sequence.length {
      index++;
      byte := sequence[index];
      max_length -= 1;

      if max_length == 0
        then break;

      offset : u32 = byte - 0x80;

      /*
        (*sequence) points to the byte where the next sequence may begin.
        The next sequence may be valid or invalid.
      */
      if offset > 0x3F {
        return (UTF8_ERROR, 1);
      }
      code_point = (code_point << 6) + offset;
    }

    /* Overlong sequence */
    if code_point < min_code_point {
      return (UTF8_ERROR, 1);
    }

    /*
      UTF-16 surrogates are invalid in UTF-8.
      They are used in CESU-8, which is a different encoding.
    */
    if code_point >= 0xD800 && code_point <= 0xDFFF {
      return (UTF8_ERROR, 1);
    }

    /*
      Any value outside the [0x00, 0x10FFFF] range indicates an invalid sequence.
    */
    if code_point > 0x10FFFF {
      return (UTF8_ERROR, 1);
    }

    return (code_point, index as s8);
  }

  fn utf8_decode!<T>(data: T) -> List!<u32> where T: AsCharSlice {
    slice := data.as_byte_slice();
    mut output: List!<u32>;
    index := 0;
    while index < slice.length {
      subslice := slice.slice(index..index+4);
      ch, advance := utf8_to_code_point(subslice);
      index += advance;
      output.push(ch);
    }
    return output;
  }

  fn utf8_encode(code_point: u32) -> List!<u8> {
    mut output: List!<u8>;
    if code_point <= 0x7F {
      output.push(code_point as u8);
      return output;
    } else if code_point <= 0x7FF {
      output.push((0xC0 | (code_point >> 6)) as u8);
      output.push((0x80 | (code_point & 0x3F)) as u8);
      return output;
    } else if code_point <= 0xFFFF {
      output.push((0xE0 | (code_point >> 12)) as u8);
      output.push((0x80 | ((code_point >> 6) & 0x3F)) as u8);
      output.push((0x80 | (code_point & 0x3F)) as u8);
      return output;
    } else if code_point <= 0x10FFFF {
      output.push((0xF0 | (code_point >> 18)) as u8);
      output.push((0x80 | ((code_point >> 12) & 0x3F)) as u8);
      output.push((0x80 | ((code_point >> 6) & 0x3F)) as u8);
      output.push((0x80 | (code_point & 0x3F)) as u8);
      return output;
    } else {
      output.push(UTF8_ERROR as u8); // UTF8_ERROR
      return output;
    }
  }

  fn utf8_is_cyrillic_alpha(ch: char) -> bool {
    return (0x0400 <= ch && ch <= 0x04FF) || (0x0500 <= ch && ch <= 0x052F);
  }

  fn utf8_is_chinese_alpha(ch: char) -> bool {
    return (0x4E00 <= ch && ch <= 0x9FFF) || (0x3400 <= ch && ch <= 0x4DBF);
  }

  fn utf8_is_korean_alpha(ch: char) -> bool {
    return (0xAC00 <= ch && ch <= 0xD7AF) || (0x1100 <= ch && ch <= 0x11FF);
  }

  fn utf8_is_japanese_alpha(ch: char) -> bool {
    return (0x3040 <= ch && ch <= 0x309F) || (0x30A0 <= ch && ch <= 0x30FF) || (0x4E00 <= ch && ch <= 0x9FFF);
  }

  fn utf8_is_latin_alpha(ch: char) -> bool {
    return (0x0041 <= ch && ch <= 0x005A) || (0x0061 <= ch && ch <= 0x007A);
  }

  fn utf8_is_alpha(ch: char) -> bool {
    return utf8_is_cyrillic_alpha(ch) ||
          utf8_is_chinese_alpha(ch)  ||
          utf8_is_korean_alpha(ch)   ||
          utf8_is_japanese_alpha(ch) ||
          utf8_is_latin_alpha(ch);
  }
}

struct FormatOptions {
  digits_after_decimal: u8,
  indented: bool,
  quote_strings: bool,
  enum_parent_name: bool,
}

impl FormatOptions {
  fn default() -> #self => .{
    digits_after_decimal: 2,
    indented: false,
    quote_strings: false,
    enum_parent_name: true,
  };

  fn current() -> *mut #self {
    #static mut current := FormatOptions.{
      digits_after_decimal: 2,
      indented: false,
      quote_strings: false,
      enum_parent_name: true,
    };
    return &mut current;
  }

  fn unquoted(self) -> #self {
    mut copy := self;
    copy.quote_strings = false;
    return copy;
  }

  fn quoted(self) -> #self {
    mut copy := self;
    copy.quote_strings = true;
    return copy;
  }
}

struct StringBuilder;

trait Format {
  fn format(*const self, builder: *mut StringBuilder, options: FormatOptions);
}

fn new_dyn_format(value: any) -> dyn Format {
  instance, type := value;
  tuple := type.methods.find_first_of(
    fn(tuple: *const (str, *const void)) -> bool {
      return tuple.0 == "format";
    }
  )
  if !tuple {
    printf("unable to find 'format' in type %s\n"c, type.name);
    panic("DynFormat failure");
  }
  _, method := *tuple;

  mut dynamic: dyn Format;
  dynamic.instance = instance;
  dynamic.format =  method as fn * (*const void, *mut StringBuilder, FormatOptions);
  return dynamic;
}

// This seems pretty chunky,
// it might be more performant for building large strings,
// but perhaps this is a setting we can have the user pass in.
const STRING_BUILDER_BLOCK_MAX_LEN := 8192;

struct StringBuilderBlock {
  data: *mut u8,
  length: u64,
  next: *mut StringBuilderBlock,
}

impl StringBuilderBlock {
  fn new() -> *mut #self {
    mut self : *mut #self =  malloc(sizeof(StringBuilderBlock));
    self.data = calloc(STRING_BUILDER_BLOCK_MAX_LEN, sizeof(u8));
    self.length = 0;
    self.next = null;
    return self;
  }
}

impl Deinit for StringBuilderBlock {
  fn deinit(*mut self) {
    if self.data then free(self.data);
    if self.next {
      self.next.deinit();
      free(self.next);
    }
  }
}

struct StringBuilder {
  root:    *mut StringBuilderBlock,
  current: *mut StringBuilderBlock,
}

impl Deinit for StringBuilder {
  fn deinit(*mut self) {
    if self.root {
      self.root.deinit();
      free(self.root);
    } 
  }
}

fn to_string!<T>(value: T) -> String;
fn format_any(list: any, builder: *mut StringBuilder, options: FormatOptions);
fn format!<Tuple>(fmt : str, tuple: Tuple, options: FormatOptions) -> String where Tuple: IsTuple;


impl StringBuilder {
  // just here for 'clarity' xd
  fn clear(*mut self) {
    self.deinit();
  }

  fn length(*mut self) -> u64 {
    if !self.root then return 0;
    mut current := self.root;
    mut len: u64;
    while current {
      len += current.length;
      current = current.next;
    }
    return len;
  }

  fn get_string(*mut self) -> String {
    length := self.length();
    data : *mut u8 = malloc(sizeof(u8) * length + 1);
    data[length] = '\0'; // Null-terminate the final str
    mut current := self.root;
    mut offset := 0;
    while current {
      memcpy(data + offset, current.data, current.length);
      offset += current.length;
      current = current.next;
    }
    return .{
      data: data,
      length: length,
    };
  }

  fn append!<T>(*mut self, value: T) where T: AsByteSlice {
    slice := value.as_byte_slice();

    if slice.length <= 0 then return;

    if !self.root {
      self.root = StringBuilderBlock::new();
      self.current = self.root;
    }

    mut slice_index := 0;
    mut length := slice.length;

    if length == 1 && slice.data[0] == '\0' then return;
    mut remaining := STRING_BUILDER_BLOCK_MAX_LEN - self.current.length;

    while length > 0 {
      // Simple append, no overflow
      if length <= remaining {
        memcpy(self.current.data + self.current.length, slice.data, length);
        self.current.length += length;
        break;
      }

      // Append with overflow
      if self.current.data != null && slice.data != null {
          memcpy(self.current.data + self.current.length, slice.data + slice_index, remaining);
          self.current.length += remaining;
      }
      slice_index += remaining;
      length -= remaining;
      self.current.next = StringBuilderBlock::new();
      self.current = self.current.next;
      remaining = STRING_BUILDER_BLOCK_MAX_LEN;
    }
  }

  // this is just a way to pass an allocated rvalue, and not have to store it in a variable to free after this call.
  // this is helpful for doing a builder.append_then_free(some_allocating_function());
  // so you don't leak.
  fn append_then_free!<T>(*mut self, mut value: T) where T: Deinit {
    self.append(value);
    value.deinit();
  }

  fn append_byte(*mut self, ch: u8) {
    if !self.root {
      self.root = StringBuilderBlock::new();
      self.current = self.root;
    }

    if self.current.length == STRING_BUILDER_BLOCK_MAX_LEN {
      self.current.next = StringBuilderBlock::new();
      self.current = self.current.next;
    }

    self.current.data[self.current.length] = ch;
    self.current.length += 1;
  }

  fn appendf!<Tuple>(*mut self, fmt: str, values: Tuple, options: FormatOptions) where Tuple: IsTuple {
    mut formatted := format(fmt, values, options);
    self.append(formatted);
    formatted.deinit();
  }
  fn append_utf8(*mut self, ch: u32) {
    bytes := utf8_encode(ch);
    for byte in bytes {
      self.append_byte(byte);
    }
  }
}

@[inline]
fn to_string!<T>(value: T) -> String {
  type := typeof(T);
  mut format : str;

  if type.is_bool() {
    if value {
      return "true".to_string(get_default_allocator());
    } else {
      return "false".to_string(get_default_allocator());
    }
  }

  if type.is_enum() {
    for field in type.fields {
      if value == field.enum_value {
        return String::from(field.name);
      }
    }
  }

  mut format_buffer: u8[255];

  if type.is_pointer() {
    format_buffer[0] = '%';
    format_buffer[1] = 'p';
    format_buffer[2] = '\0';
  } else if type == typeof(u8) {
    format_buffer[0] = '%';
    format_buffer[1] = 'c';
    format_buffer[2] = '\0';
  } else if type.is_signed() || type.is_unsigned() {
    string := switch type {
      typeof(s16) => "%d",
      typeof(s32) => "%d",
      typeof(s64) => "%ld",
      typeof(u8) =>  "%u",
      typeof(u16) => "%u",
      typeof(u32) => "%u",
      typeof(u64) => "%lu",
    };
    mut i := 0;
    for ch in string {
      format_buffer[i] = ch;
      i++;
    }
  } else if type == typeof(f32) {
    sprintf(format_buffer, "%%.%df"c, FormatOptions::current().digits_after_decimal);
  } else if type == typeof(f64) {
    sprintf(format_buffer, "%%.%dlf"c, FormatOptions::current().digits_after_decimal);
  } else {
    return .{};
  }

  buffer: u8[1024]; // this is wayyy over allocated, but it's not a big deal.
  snprintf(buffer, 1024 * sizeof(u8), format_buffer, value);
  return String::from_ptr(buffer);
}

@[inline]
fn format_struct(value: any, builder: *mut StringBuilder, options: FormatOptions) {
  builder.append(value.type.name);
  builder.append(" {");

  if options.indented {
    builder.append("\n");
  }

  mut idx := 0;
  for field in value.type.fields {
    if options.indented {
      builder.append("  ");
    }

    builder.append(" ");
    builder.append(field.name);
    builder.append(": ");

    format_any(any.{
      type: field.type,
      ptr: field.get(value.ptr),
    }, builder, options);

    if idx != value.type.fields.length - 1 {
      builder.append(",");
    }

    if options.indented {
      builder.append("\n");
    } 
    idx++;
  }

  if !options.indented {
    builder.append(" }");
  } else {
    builder.append("}");
  }
}

@[inline]
fn format_tuple(value: any, builder: *mut StringBuilder, options: FormatOptions) {
  builder.append("(");
  for i in 0..value.type.fields.length {
    field := value.type.fields[i];

    format_any(any.{
      type: field.type,
      ptr: field.get(value.ptr),
    }, builder, options);

    if i != value.type.fields.length - 1 {
      builder.append(", ");
    }
  }
  builder.append(")");
}

@[inline]
fn format_any(value: any, builder: *mut StringBuilder, options: FormatOptions) {
  if value.type.implements("Format") {
    dyn_format := new_dyn_format(value);
    dyn_format.format(builder, options);
    return;
  }

  if value.type == typeof(String)  {
    if options.quote_strings
      then builder.append("\"");
    builder.append(*(value.ptr as *const String));
    if options.quote_strings
      then builder.append("\"");
  } else if value.type == typeof(str) {
    if options.quote_strings
      then builder.append("\"");
    builder.append((*(value.ptr as *const str)));
    if options.quote_strings
      then builder.append("\"");
  } else if value.type.is_pointer() {
    builder.append_then_free(to_string(value.ptr));
  } else if value.type.is_struct() {
    format_struct(value, builder, options);
  } else if value.type.is_tuple() {
    format_tuple(value, builder, options);
  } else if value.ptr == null {
    builder.append("null");
  } else if value.type == typeof(c_str) {
    builder.append(String::from_ptr(value.unwrap!<*const u8>()));
  } else if value.type.is_enum() {
    if options.enum_parent_name {
      builder.append(value.type.name);
      builder.append("::");
    }
    for field in value.type.fields {
      if field.enum_value == value.unwrap!<s32>() {
        builder.append(field.name);
        return;
      }
    }
    builder.append("(invalid enum value)");
  } else {
    switch value.type {
      typeof(u8):      { builder.append_then_free(to_string(value.unwrap!<u8>()));        }
      typeof(u16):     { builder.append_then_free(to_string(value.unwrap!<u16>()));       }
      typeof(u32):     { builder.append_then_free(to_string(value.unwrap!<u32>()));       }
      typeof(u64):     { builder.append_then_free(to_string(value.unwrap!<u64>()));       }
      typeof(s8):      { builder.append_then_free(to_string(value.unwrap!<s8>()));        }
      typeof(s16):     { builder.append_then_free(to_string(value.unwrap!<s16>()));       }
      typeof(s32):     { builder.append_then_free(to_string(value.unwrap!<s32>()));       }
      typeof(s64):     { builder.append_then_free(to_string(value.unwrap!<s64>()));       }
      typeof(f32):     { builder.append_then_free(to_string(value.unwrap!<f32>()));       }
      typeof(f64):     { builder.append_then_free(to_string(value.unwrap!<f64>()));       }
      typeof(bool):    { builder.append_then_free(to_string(value.unwrap!<bool>()));      }
      else:            { builder.append("(unsupported)");                                 }
    }
  }
}

@[inline]
fn format!<Tuple>(fmt: str, tuple: Tuple, options: FormatOptions) -> String where Tuple: IsTuple {
  if fmt.length == 0 then
    return .{};

  mut builder: StringBuilder;

  defer builder.deinit();

  value_index := 0;

  fields := typeof(Tuple).fields;

  if fields.is_empty() {
    return String::from("()");
  }

  while *fmt.data {
    if (*fmt.data) == '\\' && *(fmt.data + 1) == '%' {
      builder.append('%');
      fmt.data += 2;
      continue;
    }

    if (*fmt.data) == '%' && value_index >= fields.length {
      panic("too few data arguments provided to 'format'");
    }

    if (*fmt.data) == '%' && value_index < fields.length {
      field := fields[value_index];
      value :any = .{
        type: field.type,
        ptr: field.get(&const tuple),
      };
      format_any(value, &mut builder, options);
      value_index++;
    } else {
      builder.append((*fmt.data) as u32);
    }
    fmt.data++;
  }

  return builder.get_string();
}

/* 
  Quick format. avoid passing settings.
*/
@[inline]
fn qformat!<Tuple>(fmt: str, tuple: Tuple) -> String where Tuple: IsTuple {
  return format(fmt, tuple, *FormatOptions::current());
}


@[inline]
fn print!<T>(message: T) {
  mut formatted := format("%", (message,), *FormatOptions::current());
  printf("%s"c, formatted.data);
  formatted.deinit();
}

@[inline]
fn println!<T>(message: T) {
  mut formatted := format("%", (message,), *FormatOptions::current());
  printf("%s\n"c, formatted.data);
  formatted.deinit();
}

@[inline]
fn printlnf!<Tuple>(fmt: str, tuple: Tuple) where Tuple: IsTuple {
  mut formatted := format(fmt, tuple, *FormatOptions::current());
  printf("%s\n"c, formatted.data);
  formatted.deinit();
}

#region UTF8.2 {
  /*
    ! this needs to be rewritten for Iterator!<>
  */
  struct UTF8_Iter {
    slice: Slice!<u8>,
    position: u32,
    current_char: u32,
  }

  impl Iterator!<u32> for UTF8_Iter {
    fn next(*mut self) -> Option!<u32> {
      if self.position >= self.slice.length {
        return Option!<u32>::None;
      }
      subslice := self.slice.slice(self.position..(self.position + 4));
      ch, advance := utf8_to_code_point(subslice);
      self.position += advance;
      self.current_char = ch;
      return Option!<u32>::Some(ch);
    }
  }

  impl String {
    fn chars(self) -> UTF8_Iter {
      return .{
        slice: self.as_byte_slice(),
        position: 0,
        current_char: '\0',
      }
    }
  }
}

#include "formatters/other.ela"   // Option!<T> Result!<Ok, Err>.
#include "formatters/number.ela"  // Barely implemented.
#include "formatters/strings.ela" // Not yet implemented.
#include "formatters/list.ela"    // List!<T>



