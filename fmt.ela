//module fmt;

import stringstream::{
  StringStream,
};

import math;

const UTF8_ERROR: u32 = 0xFFFD;

#region UTF8 {
  /*
    Copyright 2024 Kang-Che Sung

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    */
  /* SPDX-License-Identifier: MIT */

  // returns a tuple representing:
  // .0: a u32 code point,
  // .1: the 'advance' which is the number of bytes this codepoint consumed.
  fn utf8_to_code_point(sequence: [u8]) -> (u32, s8) {
    if sequence.length == 0
      then return (UTF8_ERROR, 1);

    if sequence[0] <= 0x7F
      then return (sequence[0] as u32, 1);

    /* Multibyte sequence. We assume valid sequences appear more
        frequently than invalid ones. */
    mut max_length : u32;
    mut min_code_point: u32;
    mut code_point: u32;

    byte_0 := sequence[0];

    if (byte_0 & 0xF0) < 0xE0 {
      /* First byte in the range [0x80, 0xBF] is covered here.
          It wraps around to an invalid code point. */
      max_length = 2;
      min_code_point = 0x80;
      code_point = (byte_0 - 0xC0) as u32;
    } else if ((byte_0 & 0xF0) == 0xE0) {
      max_length = 3;
      min_code_point = 0x0800;
      code_point = (byte_0 - 0xE0) as u32;
    } else {
      max_length = 4;
      min_code_point = 0x10000;
      code_point = (byte_0 - 0xF0) as u32;
    }

    index := 1; // we start 1 byte in front of the byte we already decoded above.
    while index < sequence.length {
      index++;
      byte := sequence[index];
      max_length -= 1;

      if max_length == 0
        then break;

      offset : u32 = byte - 0x80;

      /*
        (*sequence) points to the byte where the next sequence may begin.
        The next sequence may be valid or invalid.
      */
      if offset > 0x3F {
        return (UTF8_ERROR, 1);
      }
      code_point = (code_point << 6) + offset;
    }

    /* Overlong sequence */
    if code_point < min_code_point {
      return (UTF8_ERROR, 1);
    }

    /*
      UTF-16 surrogates are invalid in UTF-8.
      They are used in CESU-8, which is a different encoding.
    */
    if code_point >= 0xD800 && code_point <= 0xDFFF {
      return (UTF8_ERROR, 1);
    }

    /*
      Any value outside the [0x00, 0x10FFFF] range indicates an invalid sequence.
    */
    if code_point > 0x10FFFF {
      return (UTF8_ERROR, 1);
    }

    return (code_point, index as s8);
  }

  fn utf8_decode!<T>(data: T) -> List!<u32> where T: AsSlice!<char> {
    slice := data.as_slice!<char>();
    mut output: List!<u32>;
    index := 0;
    while index < slice.length {
      subslice := slice.slice(index..index+4);
      ch, advance := utf8_to_code_point(subslice);
      index += advance;
      output.push(ch);
    }
    return output;
  }

  fn utf8_encode(code_point: u32) -> List!<u8> {
    mut output: List!<u8>;
    if code_point <= 0x7F {
      output.push(code_point as u8);
      return output;
    } else if code_point <= 0x7FF {
      output.push((0xC0 | (code_point >> 6)) as u8);
      output.push((0x80 | (code_point & 0x3F)) as u8);
      return output;
    } else if code_point <= 0xFFFF {
      output.push((0xE0 | (code_point >> 12)) as u8);
      output.push((0x80 | ((code_point >> 6) & 0x3F)) as u8);
      output.push((0x80 | (code_point & 0x3F)) as u8);
      return output;
    } else if code_point <= 0x10FFFF {
      output.push((0xF0 | (code_point >> 18)) as u8);
      output.push((0x80 | ((code_point >> 12) & 0x3F)) as u8);
      output.push((0x80 | ((code_point >> 6) & 0x3F)) as u8);
      output.push((0x80 | (code_point & 0x3F)) as u8);
      return output;
    } else {
      output.push(UTF8_ERROR as u8); // UTF8_ERROR
      return output;
    }
  }

  fn utf8_is_cyrillic_alpha(ch: char) -> bool {
    return (0x0400 <= ch && ch <= 0x04FF) || (0x0500 <= ch && ch <= 0x052F);
  }

  fn utf8_is_chinese_alpha(ch: char) -> bool {
    return (0x4E00 <= ch && ch <= 0x9FFF) || (0x3400 <= ch && ch <= 0x4DBF);
  }

  fn utf8_is_korean_alpha(ch: char) -> bool {
    return (0xAC00 <= ch && ch <= 0xD7AF) || (0x1100 <= ch && ch <= 0x11FF);
  }

  fn utf8_is_japanese_alpha(ch: char) -> bool {
    return (0x3040 <= ch && ch <= 0x309F) || (0x30A0 <= ch && ch <= 0x30FF) || (0x4E00 <= ch && ch <= 0x9FFF);
  }

  fn utf8_is_latin_alpha(ch: char) -> bool {
    return (0x0041 <= ch && ch <= 0x005A) || (0x0061 <= ch && ch <= 0x007A);
  }

  fn utf8_is_alpha(ch: char) -> bool {
    return utf8_is_cyrillic_alpha(ch) ||
          utf8_is_chinese_alpha(ch)  ||
          utf8_is_korean_alpha(ch)   ||
          utf8_is_japanese_alpha(ch) ||
          utf8_is_latin_alpha(ch);
  }
}

enum NumberStyle {
  Decimal = 0,
  Binary,
  Hexadecimal,
}

struct FormatOptions {
  digits_after_decimal: u8 = 2,
  indented: bool = false,
  quote_strings: bool = false,
  typename: bool = false,
  number_style: NumberStyle,
}

impl FormatOptions {
  fn default() -> Self => .{
    digits_after_decimal: 2,
    indented: false,
    quote_strings: false,
    typename: true,
  };

  fn current() -> *mut Self {
    #static mut current: FormatOptions;
    return &mut current;
  }

  fn unquoted(self) -> Self {
    mut copy := self;
    copy.quote_strings = false;
    return copy;
  }

  fn quoted(self) -> Self {
    mut copy := self;
    copy.quote_strings = true;
    return copy;
  }

  fn with_number_style(self, style: NumberStyle) -> Self {
    mut copy := self;
    copy.number_style = style;
    return copy;
  }

  fn with_digits_after_decimal(self, n_digits: u8) -> Self {
    mut copy := self;
    copy.digits_after_decimal = n_digits;
    return copy;
  }

  fn without_typename(self) -> Self {
    mut copy := self;
    copy.typename = false;
    return copy;
  }

  fn with_typename(self) -> Self {
    mut copy := self;
    copy.typename = true;
    return copy;
  }
}

struct Formatter {
  writer: *mut StringStream,
  indentation: u32,
  options: FormatOptions,
  allocator: dyn Allocator,
}

fn to_string!<T>(value: T, options: FormatOptions, allocator: dyn Allocator = get_global_allocator()) -> String;
fn format!<Tuple>(fmt : str, tuple: Tuple, options: FormatOptions = .{}, allocator: dyn Allocator = get_global_allocator()) -> String where Tuple: IsTuple;
fn format_any(v: any, formatter: *mut Formatter);

trait Format {
  fn format(*const self, formatter: *mut Formatter);
  fn println(*self) {
    using mut writer: StringStream;
    mut formatter: Formatter = .{
      writer: &mut writer,
      indentation: 0,
      options: FormatOptions::default(),
      allocator: get_global_allocator(),
    };
    self.format(&mut formatter);
    using string := formatter.writer.get_string();
    std::c::printf("%s\n"c, string.data);
  }
}

fn new_dyn_format(value: any) -> dyn Format {
  instance, _type := value;
  
  method := find_first_of(_type.methods.iter(), null,
    fn(_: *mut void, method: Method) -> bool {
      return method.name == "format";
    }
  )

  if method.is_none() {
    std::c::printf("unable to find 'format' in _type %s\n"c, _type.name);
    panic("DynFormat failure");
  }
  
  mut dynamic: dyn Format;
  dynamic.instance = instance;
  dynamic.format =  method.unwrap().pointer as fn (*const void, *mut Formatter);
  return dynamic;
}


impl StringStream {
  fn appendf!<Tuple>(*mut self, fmt: str, values: Tuple, options: FormatOptions) where Tuple: IsTuple {
    mut formatted := format(fmt, values, options);
    self.append(formatted);
    formatted.destroy();
  }

  @[inline]
  fn append_utf8(*mut self, ch: u32) {
    bytes := utf8_encode(ch);
    for byte in bytes {
      self.append_byte(byte);
    }
  }
}

/* 
  This is really just for numerical values,
  and anything that can use the negate operator. i.e pointers, strings, whatever.
  Structs by value will cause this function to fail.
*/
fn to_string!<T>(value: T, options: FormatOptions, allocator: dyn Allocator = get_global_allocator()) -> String {
  where T: bool {
    if value {
      return "true".to_string(allocator);
    } else {
      return "false".to_string(allocator);
    }
  } else where T: IsEnum {
    for field in _type.fields {
      if value == field.enum_value {
        return field.name.to_string(allocator);
      }
    }
  } else where T: Format {
    mut sstream: StringStream;
    mut formatter := Formatter.{
      options: *FormatOptions::current(),
      writer: &mut sstream, 
    };
    value.format(&mut formatter);
  } else {
    _type := typeof(T);
    mut format : str;
    mut format_buffer: [u8; 255];
    where T: IsPointer {
      format_buffer[0] = '%';
      format_buffer[1] = 'p';
      format_buffer[2] = '\0';
    } else where T: u8 {
      format_buffer[0] = '%';
      format_buffer[1] = 'c';
      format_buffer[2] = '\0';
    } else where T: IsInteger {
      where T: s8 {
        switch options.number_style {
          NumberStyle::Decimal:      { std::c::memcpy(format_buffer, "%d"c, 3); }
          NumberStyle::Binary:       { std::c::memcpy(format_buffer, "0b%b"c, 5); }
          NumberStyle::Hexadecimal:  { std::c::memcpy(format_buffer, "%#04x"c, 6); }
        }
      } else where T: s16 {
        switch options.number_style {
          NumberStyle::Decimal:      { std::c::memcpy(format_buffer, "%d"c, 3); }
          NumberStyle::Binary:       { std::c::memcpy(format_buffer, "0b%b"c, 5); }
          NumberStyle::Hexadecimal:  { std::c::memcpy(format_buffer, "%#06x"c, 6); }
        }
      } else where T: s32 {
        switch options.number_style {
          NumberStyle::Decimal:      { std::c::memcpy(format_buffer, "%d"c, 3); }
          NumberStyle::Binary:       { std::c::memcpy(format_buffer, "0b%b"c, 5); }
          NumberStyle::Hexadecimal:  { std::c::memcpy(format_buffer, "%#08x"c, 6); }
        }
      } else where T: s64 {
        switch options.number_style {
          NumberStyle::Decimal:      { std::c::memcpy(format_buffer, "%ld"c, 4); }
          NumberStyle::Binary:       { std::c::memcpy(format_buffer, "0b%b"c, 5); }
          NumberStyle::Hexadecimal:  { std::c::memcpy(format_buffer, "%#016lx"c, 8); }
        }
      } else where T: u8 {
        switch options.number_style {
          NumberStyle::Decimal:      { std::c::memcpy(format_buffer, "%u"c, 3); }
          NumberStyle::Binary:       { std::c::memcpy(format_buffer, "0b%b"c, 5); }
          NumberStyle::Hexadecimal:  { std::c::memcpy(format_buffer, "%#04x"c, 6); }
        }
      } else where T: u16 {
        switch options.number_style {
          NumberStyle::Decimal:      { std::c::memcpy(format_buffer, "%u"c, 3); }
          NumberStyle::Binary:       { std::c::memcpy(format_buffer, "0b%b"c, 5); }
          NumberStyle::Hexadecimal:  { std::c::memcpy(format_buffer, "%#06x"c, 6); }
        }
      } else where T: u32 {
        switch options.number_style {
          NumberStyle::Decimal:      { std::c::memcpy(format_buffer, "%u"c, 3); }
          NumberStyle::Binary:       { std::c::memcpy(format_buffer, "0b%b"c, 5); }
          NumberStyle::Hexadecimal:  { std::c::memcpy(format_buffer, "%#08x"c, 6); }
        }
      } else where T: u64 {
        switch options.number_style {
          NumberStyle::Decimal:      { std::c::memcpy(format_buffer, "%lu"c, 4); }
          NumberStyle::Binary:       { std::c::memcpy(format_buffer, "0b%b"c, 5); }
          NumberStyle::Hexadecimal:  { std::c::memcpy(format_buffer, "%#016lx"c, 8); }
        }
      }
    } else where T: f32 {
      std::c::sprintf(format_buffer, "%%.%df"c, options.digits_after_decimal);
    } else where T: f64 {
      std::c::sprintf(format_buffer, "%%.%dlf"c, options.digits_after_decimal);
    } else {
      panic(std::asprintf("Type %s failed in 'to_string(T, F, A)'!\n", (_type.name,)).as_str());
      return .{};
    }
    buffer: [u8; 1024];
    length := std::c::snprintf(buffer, 1024 * sizeof(u8), format_buffer, value);
    return String.{
      data: allocator.copy(buffer, sizeof(u8), length),
      length: length,
    };
  }
}

fn format_struct(value: any, formatter: *mut Formatter) {
  formatter.writer.append(value._type.name);
  formatter.writer.append(" {");

  if formatter.options.indented {
    formatter.writer.append("\n");
  }

  mut idx := 0;
  for field in value._type.fields {
    if formatter.options.indented {
      formatter.writer.append("  ");
    }

    formatter.writer.append(" ");
    formatter.writer.append(field.name);
    formatter.writer.append(": ");

    format_any(field.as_any(value.ptr), formatter);

    if idx != value._type.fields.length - 1 {
      formatter.writer.append(",");
    }

    if formatter.options.indented {
      formatter.writer.append("\n");
    } 
    idx++;
  }

  if formatter.options.indented {
    formatter.writer.append("}");
  } else {
    formatter.writer.append(" }");
  }
}

fn format_tuple(value: any, formatter: *mut Formatter) {
  formatter.writer.append("(");
  for i in 0..value._type.fields.length {
    field := value._type.fields[i];

    format_any(any.{
      _type: field._type,
      ptr: field.get(value.ptr),
    }, formatter);

    if i != value._type.fields.length - 1 {
      formatter.writer.append(", ");
    }
  }
  formatter.writer.append(")");
}

fn format_choice(value: any, formatter: *mut Formatter) {
  ty := value._type;
   // The discriminant is always the first member.
  discriminant: *u32 = value.ptr;

  if formatter.options.typename {
    formatter.writer.append(ty.name);
    formatter.writer.append("::");
  }

  for field in ty.fields {
    if field.discriminant == *discriminant {
      formatter.writer.append(field.name);
      format_any(any.{
        _type: field._type,
        // offset of discriminant is where the union starts
        // ! this just seems wrong because we have no idea if the payload
        // ! causes this to be padded, i am not sure if this is good.
        ptr: value.ptr + sizeof(u32) 
      }, formatter);
      return;
    }
  }

  formatter.writer.append("(Uninitialized)");
}

fn format_any(value: any, formatter: *mut Formatter) {
  if value._type.implements("Format") {
    dyn_format := new_dyn_format(value);
    dyn_format.format(formatter);
    return;
  }

  if value._type == typeof(String)  {
    if formatter.options.quote_strings
      then formatter.writer.append("\"");
    formatter.writer.append(*(value.ptr as *const String));
    if formatter.options.quote_strings
      then formatter.writer.append("\"");
  } else if value._type == typeof(str) {
    if formatter.options.quote_strings
      then formatter.writer.append("\"");
    formatter.writer.append((*(value.ptr as *const str)));
    if formatter.options.quote_strings
      then formatter.writer.append("\"");
  } else if value._type.is_pointer() {
    formatter.writer.append_then_free(to_string(value.ptr, formatter.options));
  } else if value._type.is_struct() {
    format_struct(value, formatter);
  } else if value._type.is_tuple() {
    format_tuple(value, formatter);
  } else if value.ptr == null {
    formatter.writer.append("null");
  } else if value._type == typeof(c_str) {
    formatter.writer.append(String::from_ptr(value.unwrap!<*const u8>()));
  } else if value._type.is_flags_enum() {
    if formatter.options.typename {
      formatter.writer.append(value._type.name);
      formatter.writer.append("::(");
    } 
    input_value := value.unwrap!<s32>();
    mut found_any := false;
    for field in value._type.fields {
      if input_value & field.enum_value {
        if found_any {
          formatter.writer.append(" | ");
        }
        formatter.writer.append(field.name);
        found_any = true;
      }
    }
    if !found_any {
      formatter.writer.append("invalid flags enum value)");
      return;
    } else {
      formatter.writer.append(")");
    }
  } else if value._type.is_enum() {
    if formatter.options.typename {
      formatter.writer.append(value._type.name);
      formatter.writer.append("::");
    } 
    val := value.unwrap!<s32>();
    for field in value._type.fields {
      if field.enum_value == val {
        formatter.writer.append(field.name);
        return;
      }
    }
    formatter.writer.append("(invalid enum value)");
  } else if value._type.is_array() {
    formatter.writer.append("[");
    mut first := true;
    for element in value._type.elements(value.ptr) {
      if !first {
        formatter.writer.append(", ");
      }
      format_any(element, formatter);
      first = false;
    }
    formatter.writer.append("]");
  } else if value._type.is_choice() {
    format_choice(value, formatter);
  } else {
    switch value._type {
      typeof(u8):      { formatter.writer.append_then_free(to_string(value.unwrap!<u8>(), formatter.options, get_global_allocator()));        }
      typeof(u16):     { formatter.writer.append_then_free(to_string(value.unwrap!<u16>(), formatter.options, get_global_allocator()));       }
      typeof(u32):     { formatter.writer.append_then_free(to_string(value.unwrap!<u32>(), formatter.options, get_global_allocator()));       }
      typeof(u64):     { formatter.writer.append_then_free(to_string(value.unwrap!<u64>(), formatter.options, get_global_allocator()));       }
      typeof(s8):      { formatter.writer.append_then_free(to_string(value.unwrap!<s8>(), formatter.options, get_global_allocator()));        }
      typeof(s16):     { formatter.writer.append_then_free(to_string(value.unwrap!<s16>(), formatter.options, get_global_allocator()));       }
      typeof(s32):     { formatter.writer.append_then_free(to_string(value.unwrap!<s32>(), formatter.options, get_global_allocator()));       }
      typeof(s64):     { formatter.writer.append_then_free(to_string(value.unwrap!<s64>(), formatter.options, get_global_allocator()));       }
      typeof(f32):     { formatter.writer.append_then_free(to_string(value.unwrap!<f32>(), formatter.options, get_global_allocator()));       }
      typeof(f64):     { formatter.writer.append_then_free(to_string(value.unwrap!<f64>(), formatter.options, get_global_allocator()));       }
      typeof(bool):    { formatter.writer.append_then_free(to_string(value.unwrap!<bool>(), formatter.options, get_global_allocator()));      }
      else:            { formatter.writer.append("$$(unsupported fmt _type)$$");                                 }
    }
  }
}

// TODO: this is unintuitive and strange. what if you wanted to emplace a \ and then a %. just not possible.
// I think %% worked better, but whatever. we'll find a better solution; 
// maybe just using {}, and {{ }} for escaped (the obvious modern solution)
const FORMAT_ESCAPED_PERCENT_STRING := "\\%";

fn format!<Tuple>(fmt: str, tuple: Tuple, options: FormatOptions = *FormatOptions::current(), allocator: dyn Allocator = get_global_allocator()) -> String where Tuple: IsTuple | Format {
  if fmt.length == 0 then
    return .{};

  using mut sstream: StringStream = .{
    allocator: allocator,
    block_size: 8192
  };

  mut formatter: Formatter = .{
    indentation: 0,
    writer: &mut sstream,
    options: options,
  };

  where tuple: Format {
    mut value_written := false;
    while *fmt.data {
      if (*fmt.data) == '\\' && *(fmt.data + 1) == '%' {
        formatter.writer.append('%');
        fmt.data += 2;
        continue;
      }

      if (*fmt.data) == '%' && value_written {
        panic("too few data arguments provided to 'format'");
      }

      if (*fmt.data) == '%' {
        tuple.format(&mut formatter);
        value_written = true;
      } else {
        formatter.writer.append((*fmt.data) as u32);
      }

      fmt.data++;
    }
  } else {
    value_index := 0;

    fields := typeof(Tuple).fields;

    if fields.is_empty() {
      return "()".to_string(allocator);
    }

    while *fmt.data {
      if (*fmt.data) == '\\' && (*(fmt.data + 1)) == '%' {
        formatter.writer.append('%');
        fmt.data += 2;
        continue;
      }

      if (*fmt.data) == '%' && value_index >= fields.length {
        panic("too few data arguments provided to 'format'");
      }

      if (*fmt.data) == '%' && value_index < fields.length {
        field := fields[value_index];
        value: any = .{
          _type: field._type,
          ptr: field.get(&const tuple),
        };
        format_any(value, &mut formatter);
        value_index++;
      } else {
        formatter.writer.append((*fmt.data) as u32);
      }
      fmt.data++;
    }
  }

  return formatter.writer.get_string(Some(allocator));
}

@[deprecated ("format supports better default arguments now", fmt::format)]
fn qformat!<Tuple>(fmt: str, tuple: Tuple) -> String where Tuple: IsTuple {
  return format(fmt, tuple, *FormatOptions::current(), get_global_allocator());
}

@[deprecated ("use the io module", "io::print")]
fn print!<T>(message: T, options: FormatOptions = *FormatOptions::current()) {
  where T: Format {
    using mut sstream: StringStream;
    mut formatter: Formatter = .{
      writer: &mut sstream,
      options: options,
    };
    message.format(&mut formatter);
    using formatted := sstream.get_string();
    std::c::printf("%s"c, formatted.data);
  } else {
    mut formatted := format("%", (message,), options);
    std::c::printf("%s"c, formatted.data);
    formatted.destroy();
  }
}

@[deprecated ("use the io module", "io::println")]
fn println!<T>(message: T, options: FormatOptions = *FormatOptions::current()) {
  where T: Format {
    mut sstream: StringStream;
    mut formatter: Formatter = .{
      writer: &mut sstream,
      options: options,
    };
    message.format(&mut formatter);
    formatted := sstream.get_string();
    defer {
      formatted.destroy();
      sstream.destroy();
    }
    std::c::printf("%s\n"c, formatted.data);
  } else {
    mut formatted := format("%", (message,), options);
    std::c::printf("%s\n"c, formatted.data);
    formatted.destroy();
  }
}

@[deprecated ("use the io module", "io::printlnf")]
fn printlnf!<Tuple>(fmt: str, tuple: Tuple, options: FormatOptions = *FormatOptions::current()) where Tuple: IsTuple | Format {
  mut formatted := format(fmt, tuple, options);
  std::c::printf("%s\n"c, formatted.data);
  formatted.destroy();
}

@[deprecated ("use the io module", "io::printf")]
fn printf!<Tuple>(fmt: str, tuple: Tuple, options: FormatOptions = *FormatOptions::current()) where Tuple: IsTuple | Format {
  mut formatted := format(fmt, tuple, options);
  std::c::printf("%s"c, formatted.data);
  formatted.destroy();
}


#include "formatters/other.ela"   // Option!<T> Result!<Ok, Err>.
#include "formatters/number.ela"  // Barely implemented.
#include "formatters/strings.ela" // Not yet implemented.
#include "formatters/list.ela"    // List!<T>
#include "formatters/range.ela"   // 0..10