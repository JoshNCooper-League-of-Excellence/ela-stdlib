import math::*;

#include "raylib.ela";

// NOTE:
// If you use static libraries in your .ela library, you should provide that dependency in your lib/ dir, and just link against it as such.
// do not use -lsome_system_library, or you will have a terrible library.

#ifdef RAYLIB_LINK_SHARED {
  #print "Linking against raylib dynamically."
  #c_flags " -fPIC -L/usr/local/lib/ela/raylib/libraylib.so -lm "
} else {
  #print "Linking against raylib statically."
  #c_flags " /usr/local/lib/ela/raylib/libraylib.a -lm "
}


impl Color {
  fn scaled_rgb(self, scale: f32) -> Self {
    return .{
      r: clamp!<u8>(self.r, 0, 255),
      g: clamp!<u8>(self.g, 0, 255),
      b: clamp!<u8>(self.b, 0, 255),
      a: self.a,
    };
  }
  fn with_alpha(self, a: u8) -> Color {
    return .{
      r: self.r as u8,
      g: self.g as u8,
      b: self.b as u8,
      a: a,
    };
  }
  fn lerp(a: Self, b: Self, t: f32) -> Self {
    return .{
      r: (a.r + (b.r - a.r) * t) as u8,
      g: (a.g + (b.g - a.g) * t) as u8,
      b: (a.b + (b.b - a.b) * t) as u8,
      a: (a.a + (b.a - a.a) * t) as u8,
    };
  }
  fn new(r: u8, g: u8, b: u8, a: u8) -> Self {
    return .{
      r: r,
      g: g,
      b: b,
      a: a,
    }
  }
}

impl Vector2 {

  @[inline]
  fn smooth_step(self, target: Self, mut t: f32) -> Self {
    t = math::clamp(t, 0.0, 1.0);
    t = t * t * (3.0 - 2.0 * t);
    return .{
      x: self.x + (target.x - self.x) * t,
      y: self.y + (target.y - self.y) * t,
    };
  }

  @[inline]
  fn move_towards(self, target: Self, max_distance_delta: f32) -> Self {
    delta := target.sub(self);
    distance := delta.length();
    if distance <= max_distance_delta || distance == 0.0 {
      return target;
    }
    return self.add(delta.normalize().mul(max_distance_delta));
  }

  @[inline]
  fn zero() -> Self {
    return .{ x: 0.0, y: 0.0 };
  }

  @[inline]
  fn one() -> Self {
    return .{ x: 1.0, y: 1.0 };
  }

  @[inline]
  fn scalar(value: f32) -> Self {
    return .{ x: value, y: value };
  }

  @[inline]
  fn add(self, other: Self) -> Self {
    return .{ x: self.x + other.x, y: self.y + other.y };
  }

  @[inline]
  fn sub(self, other: Self) -> Self {
    return .{ x: self.x - other.x, y: self.y - other.y };
  }

  @[inline]
  fn mul(self, scalar: f64) -> Self {
    return .{ x: self.x * scalar, y: self.y * scalar };
  }

  @[inline]
  fn div(self, scalar: f64) -> Self {
    return .{ x: self.x / scalar, y: self.y / scalar };
  }

  @[inline]
  fn length(self) -> f32 {
    return sqrt(self.x * self.x + self.y * self.y) as f32;
  }

  @[inline]
  fn length_sqr(self) -> f32 {
    return self.x * self.x + self.y * self.y;
  }

  @[inline]
  fn normalize(self) -> Self {
    len := self.length();
    return .{ x: self.x / len, y: self.y / len };
  }

  @[inline]
  fn dot(self, other: Self) -> f32 {
    return (self.x * other.x) + (self.y * other.y);
  }

  @[inline]
  fn cross(self, other: Self) -> f32 {
    return self.x * other.y - self.y * other.x;
  }

  @[inline]
  fn scale(self, scalar: Vector2) -> Self {
    return .{ x: self.x * scalar.x, y: self.y * scalar.y };
  }

  @[inline]
  fn eq(self, other: Self) -> bool {
    return self.x == other.x && self.y == other.y;
  }

  @[inline]
  fn neq(self, other: Self) -> bool {
    return !self.eq(other);
  }

  @[inline]
  fn distance(self, other: Self) -> f32 {
    return sqrt((self.x - other.x) * (self.x - other.x) + (self.y - other.y) * (self.y - other.y)) as f32;
  }

  @[inline]
  fn random(scale: s32) -> Self {
    return .{ x: GetRandomValue(-scale, scale) as f32, y: GetRandomValue(-scale, scale) as f32 };
  }

  @[inline]
  fn clamp(self, min: Self, max: Self) -> Self {
    return .{
      x: math::clamp(self.x, min.x, max.x),
      y: math::clamp(self.y, min.y, max.y)
    };
  }

  @[inline]
  fn reflect(self, normal: Self) -> Self {
    dot := self.dot(normal);
    return self.sub(normal.mul(2.0 * dot));
  }

  @[inline]
  fn rotate(self, angle: f32) -> Self {
    cos_theta := cos(angle);
    sin_theta := sin(angle);
    return .{
      x: self.x * cos_theta - self.y * sin_theta,
      y: self.x * sin_theta + self.y * cos_theta
    };
  }

  @[inline]
  fn comp_add(*mut self, other: Vector2) {
    *self = self.add(other);
  }

  @[inline]
  fn comp_mul(*mut self, other: f64) {
    *self = self.mul(other);
  }

  @[inline]
  fn neg(self) -> Self {
    return .{x: -self.x, y: -self.y};
  }
}

impl Vector3 {
  fn new(x: f32, y: f32, z: f32) -> Self {
    return .{ x: x, y: y, z: z };
  }
  
  fn zero() -> Self {
    return .{ x: 0.0, y: 0.0, z: 0.0 };
  }

  fn one() -> Self {
    return .{ x: 1.0, y: 1.0, z: 1.0 };
  }

  fn scalar(value: f32) -> Self {
    return .{ x: value, y: value, z: value };
  }

  fn add(self, other: Self) -> Self {
    return .{ x: self.x + other.x, y: self.y + other.y, z: self.z + other.z };
  }

  fn sub(self, other: Self) -> Self {
    return .{ x: self.x - other.x, y: self.y - other.y, z: self.z - other.z };
  }

  fn mul(self, scalar: f32) -> Self {
    return .{ x: self.x * scalar, y: self.y * scalar, z: self.z * scalar };
  }

  fn div(self, scalar: f32) -> Self {
    return .{ x: self.x / scalar, y: self.y / scalar, z: self.z / scalar };
  }

  fn length(self) -> f32 {
    return sqrt(self.x * self.x + self.y * self.y + self.z * self.z) as f32;
  }

  fn length_sqr(self) -> f32 {
    return self.x * self.x + self.y * self.y + self.z * self.z;
  }


  fn normalize(self) -> Self {
    len := self.length();
    return .{ x: self.x / len, y: self.y / len, z: self.z / len };
  }

  fn dot(self, other: Self) -> f32 {
    return self.x * other.x + self.y * other.y + self.z * other.z;
  }

  fn cross(self, other: Self) -> Self {
    return .{
      x: self.y * other.z - self.z * other.y,
      y: self.z * other.x - self.x * other.z,
      z: self.x * other.y - self.y * other.x
    };
  }

  fn scale(self, scalar: f32) -> Self {
    return .{ x: self.x * scalar, y: self.y * scalar, z: self.z * scalar };
  }

  fn equals(self, other: Self) -> bool {
    return self.x == other.x && self.y == other.y && self.z == other.z;
  }

  fn distance(self, other: Self) -> f32 {
    return sqrt((self.x - other.x) * (self.x - other.x) + (self.y - other.y) * (self.y - other.y) + (self.z - other.z) * (self.z - other.z)) as f32;
  }
}

impl Vector4 {
  fn new(x: f32, y: f32, z: f32, w: f32) -> Self {
    return .{ x: x, y: y, z: z, w: w };
  }

  fn zero() -> Self {
    return .{ x: 0.0, y: 0.0, z: 0.0, w: 0.0 };
  }

  fn one() -> Self {
    return .{ x: 1.0, y: 1.0, z: 1.0, w: 1.0 };
  }

  fn scalar(value: f32) -> Self {
    return .{ x: value, y: value, z: value, w: value };
  }

  fn add(self, other: Self) -> Self {
    return .{ x: self.x + other.x, y: self.y + other.y, z: self.z + other.z, w: self.w + other.w };
  }

  fn sub(self, other: Self) -> Self {
    return .{ x: self.x - other.x, y: self.y - other.y, z: self.z - other.z, w: self.w - other.w };
  }

  fn mul(self, other: Self) -> Self {
    return QuaternionMultiply(self, other);
  }

  fn div(self, scalar: f32) -> Self {
    return .{ x: self.x / scalar, y: self.y / scalar, z: self.z / scalar, w: self.w / scalar };
  }

  fn length(self) -> f32 {
    return sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w) as f32;
  }

  fn length_sqr(self) -> f32 {
    return self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w;
  }

  fn normalize(self) -> Self {
    len := self.length();
    return .{ x: self.x / len, y: self.y / len, z: self.z / len, w: self.w / len };
  }

  fn dot(self, other: Self) -> f32 {
    return self.x * other.x + self.y * other.y + self.z * other.z + self.w * other.w;
  }

  fn scale(self, scalar: f32) -> Self {
    return .{ x: self.x * scalar, y: self.y * scalar, z: self.z * scalar, w: self.w * scalar };
  }

  fn equals(self, other: Self) -> bool {
    return self.x == other.x && self.y == other.y && self.z == other.z && self.w == other.w;
  }

  fn distance(self, other: Self) -> f32 {
    return sqrt((self.x - other.x) * (self.x - other.x) + (self.y - other.y) * (self.y - other.y) + (self.z - other.z) * (self.z - other.z) + (self.w - other.w) * (self.w - other.w)) as f32;
  }
}

impl Rectangle {
  fn from_vectors(position: Vector2, scale: Vector2) -> Self {
    return .{
      x: position.x,
      y: position.y,
      width: scale.x,
      height: scale.y,
    };
  }

  fn position(self) -> Vector2 {
    return .{
      x: self.x,
      y: self.y,
    };
  }
  fn size(self) -> Vector2 {
    return .{
      x: self.width,
      y: self.height,
    };
  }
}

impl Quaternion {
  fn from_euler(x: f32, y: f32, z: f32) -> Self {
    return QuaternionFromEuler(x, y, z);
  }
}

const CLEAR := Color.{ r: 0 as u8, g: 0 as u8, b: 0 as u8, a: 0 as u8 };
const WHITE := Color.{ r: 255 as u8, g: 255 as u8, b: 255 as u8, a: 255 as u8 };
const BLACK := Color.{ r: 0 as u8, g: 0 as u8, b: 0 as u8, a: 255 as u8 };
const RED := Color.{ r: 255 as u8, g: 0 as u8, b: 0 as u8, a: 255 as u8 };
const GREEN := Color.{ r: 0 as u8, g: 255 as u8, b: 0 as u8, a: 255 as u8 };
const BLUE := Color.{ r: 0 as u8, g: 0 as u8, b: 255 as u8, a: 255 as u8 };
const YELLOW := Color.{ r: 255 as u8, g: 255 as u8, b: 0 as u8, a: 255 as u8 };
const PURPLE := Color.{ r: 255 as u8, g: 0 as u8, b: 255 as u8, a: 255 as u8 };
const ORANGE := Color.{ r: 255 as u8, g: 165 as u8, b: 0 as u8, a: 255 as u8 };
const GRAY := Color.{ r: 128 as u8, g: 128 as u8, b: 128 as u8, a: 255 as u8 };
const DARKGRAY := Color.{ r: 80 as u8, g: 80 as u8, b: 80 as u8, a: 255 as u8 };
const LIGHTGRAY := Color.{ r: 200 as u8, g: 200 as u8, b: 200 as u8, a: 255 as u8 };
const BROWN := Color.{ r: 165 as u8, g: 42 as u8, b: 42 as u8, a: 255 as u8 };
const PINK := Color.{ r: 255 as u8, g: 192 as u8, b: 203 as u8, a: 255 as u8 };
const LIME := Color.{ r: 0 as u8, g: 255 as u8, b: 0 as u8, a: 255 as u8 };
const DARKGREEN := Color.{ r: 0 as u8, g: 100 as u8, b: 0 as u8, a: 255 as u8 };
const SKYBLUE := Color.{ r: 135 as u8, g: 206 as u8, b: 235 as u8, a: 255 as u8 };
const VIOLET := Color.{ r: 238 as u8, g: 130 as u8, b: 238 as u8, a: 255 as u8 };
const GOLD := Color.{ r: 255 as u8, g: 215 as u8, b: 0 as u8, a: 255 as u8 };
const BEIGE := Color.{ r: 245 as u8, g: 245 as u8, b: 220 as u8, a: 255 as u8 };
const MAGENTA := Color.{ r: 255 as u8, g: 0 as u8, b: 255 as u8, a: 255 as u8 };
const MAROON := Color.{ r: 128 as u8, g: 0 as u8, b: 0 as u8, a: 255 as u8 };
const DARKBLUE := Color.{ r: 0 as u8, g: 0 as u8, b: 139 as u8, a: 255 as u8 };
const DARKPURPLE := Color.{ r: 139 as u8, g: 0 as u8, b: 139 as u8, a: 255 as u8 };
const DARKBROWN := Color.{ r: 101 as u8, g: 67 as u8, b: 33 as u8, a: 255 as u8 };
const CYAN := Color.{ r: 0 as u8, g: 255 as u8, b: 255 as u8, a: 255 as u8 };
const DARKCYAN := Color.{ r: 0 as u8, g: 139 as u8, b: 139 as u8, a: 255 as u8 };
const LIGHTCYAN := Color.{ r: 224 as u8, g: 255 as u8, b: 255 as u8, a: 255 as u8 };

#static All_Colors: InitList!<Color> = .[
  WHITE,
  RED,
  GREEN,
  BLUE,
  YELLOW,
  PURPLE,
  ORANGE,
  GRAY,
  DARKGRAY,
  LIGHTGRAY,
  BROWN,
  PINK,
  LIME,
  DARKGREEN,
  SKYBLUE,
  VIOLET,
  GOLD,
  BEIGE,
  MAGENTA,
  MAROON,
  DARKBLUE,
  DARKPURPLE,
  DARKBROWN,
  CYAN,
  DARKCYAN,
  LIGHTCYAN,
];

impl Color {
  fn random(max: u8) -> Self {
    return .{
      r: GetRandomValue(0, max) as u8,
      g: GetRandomValue(0, max) as u8,
      b: GetRandomValue(0, max) as u8,
      a: 255 as u8,
    };
  }
}

// ? A simple timer that can be used in update loops to get a tick every N seconds.
// * interval: f32 = seconds between each tick.
struct Timer {
  interval: f32,
  last_tick_time: f32,
}

impl Timer {
  // * Returns true if the timer has exceeded the interval time relative to the last tick time,
  fn tick(*mut self) -> bool {
    if self.will_tick() {
      self.last_tick_time = GetTime();
      return true;
    }
    return false;
  }

  // * check whether the timer will tick when 'tick' is called, without setting the last tick time.
  fn will_tick(self) -> bool {
    now := GetTime();
    if now >= (self.last_tick_time + self.interval) || self.last_tick_time == 0 {
      return true;
    }
    return false;
  }
}

module util {
  fn center_screen() -> Vector2 {
    return .{
      x: GetScreenWidth() as f32 / 2.0,
      y: GetScreenHeight() as f32 / 2.0
    };
  }
  
  fn screen_rect() -> Rectangle {
    return Rectangle.{
      x: 0, y: 0, 
      width: GetScreenWidth(), 
      height: GetScreenHeight(),
    };
  }

  fn screen_size() -> Vector2 {
    return .{
      x: GetScreenWidth(),
      y: GetScreenHeight(),
    };
  }
}

fn run_demo_program() {
    SetTraceLogLevel(TraceLogLevel::LOG_NONE);
    InitWindow(800, 600, "Hello, Raylib!"c);
    SetConfigFlags(ConfigFlags::FLAG_WINDOW_RESIZABLE);

    mut pos_x: f32 = GetScreenWidth() as f32 / 2.0;
    mut pos_y: f32 = GetScreenHeight() as f32 / 2.0;
    move_speed: f32 = 200.0; // pixels per second

    while !WindowShouldClose() {
      dt := GetFrameTime();

      if IsKeyDown(KeyboardKey::KEY_W) {
        pos_y -= move_speed * dt;
      }
      if IsKeyDown(KeyboardKey::KEY_S) {
        pos_y += move_speed * dt;
      }
      if IsKeyDown(KeyboardKey::KEY_A) {
        pos_x -= move_speed * dt;
      }
      if IsKeyDown(KeyboardKey::KEY_D) {
        pos_x += move_speed * dt;
      }

      std::c::printf("pos_x=%.1f, pos_y=%.1f\n"c, pos_x, pos_y);

      BeginDrawing();
      ClearBackground(WHITE);

      rect_size: s32 = 100;
      rect_x := pos_x as s32 - (rect_size / 2);
      rect_y := pos_y as s32 - (rect_size / 2);
      DrawRectangle(rect_x, rect_y, rect_size, rect_size, BLACK);

      text := "Hello, Raylib!"c; // the little 'c' denotes a c string, *const u8
      text_size: s32 = 16;
      text_x := pos_x as s32 - (MeasureText(text, text_size) / 2);
      text_y := pos_y as s32 - (text_size / 2);

      DrawFPS(0, 0);
      DrawText(text, text_x, text_y, text_size, WHITE);

      EndDrawing();
    }
}


// Simple shape drawing API using choice types.
#include "shape.ela"