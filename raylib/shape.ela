// TODO: add stuff like rotation, textures etc.
choice SolidShape {
  Square {
    scale: Vector2,
  },
  Circle {
    radius: f32,
  },
  /*
    Triangle must be CCW,
    for example
      [ 0.0, 0.0  ]
      [ 1.0, 0.0  ]
      [ 0.5, 0.-5 ]
  */
  Triangle {
    // in model space. (preferable -1 to 1)
    points: Vector2[3],
    // actual size.
    scale: Vector2,
  }
}

impl SolidShape {
  fn draw(self, mut position: Vector2, color: Color) {
    switch is self {
      SolidShape::Circle.{radius: radius}: {
        DrawCircleV(position, radius, color);
      }
      SolidShape::Square.{scale: scale}: {
        DrawRectangleV(position - (scale / 2.0), scale, color);
      }
      SolidShape::Triangle.{points: points, scale: scale}: {
        mut cpy: Vector2[3];
        for i in 0..3 {
          // TODO: make sure the half-width scaling is correct here.
          cpy[i] = points[i].scale(scale / 2.0) + position;
        }
        DrawTriangle(cpy[0], cpy[1], cpy[2], color);
      }
    }
  }

  fn get_size(self) -> Vector2 =>
    switch is self {
      SolidShape::Circle.{radius: radius} => Vector2.{x: radius, y: radius},
      SolidShape::Square.{scale: scale} => scale,
      SolidShape::Triangle.{points: points, scale: scale} => scale,
    };
}