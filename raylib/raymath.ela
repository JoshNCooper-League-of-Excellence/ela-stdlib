/*
  These bindings were auto generated by 'ela-bindings-generator', from 'raymath.c' at 2025-03-11 12:53:54. 
*/
struct Vector2 {
  x: f32,
  y: f32,
};
struct Vector3 {
  x: f32,
  y: f32,
  z: f32,
};
struct Vector4 {
  x: f32,
  y: f32,
  z: f32,
  w: f32,
};
type Quaternion :: Vector4;
struct Matrix {
  m0: f32,
  m4: f32,
  m8: f32,
  m12: f32,
  m1: f32,
  m5: f32,
  m9: f32,
  m13: f32,
  m2: f32,
  m6: f32,
  m10: f32,
  m14: f32,
  m3: f32,
  m7: f32,
  m11: f32,
  m15: f32,
};
struct float3 {
  v: [f32; 3],
};
struct float16 {
  v: [f32; 16],
};
extern fn acos(__x: f64) -> f64;
extern fn asin(__x: f64) -> f64;
extern fn atan(__x: f64) -> f64;
extern fn atan2(__y: f64, __x: f64) -> f64;
extern fn cos(__x: f64) -> f64;
extern fn sin(__x: f64) -> f64;
extern fn tan(__x: f64) -> f64;
extern fn cosh(__x: f64) -> f64;
extern fn sinh(__x: f64) -> f64;
extern fn tanh(__x: f64) -> f64;
extern fn acosh(__x: f64) -> f64;
extern fn asinh(__x: f64) -> f64;
extern fn atanh(__x: f64) -> f64;
extern fn exp(__x: f64) -> f64;
extern fn frexp(__x: f64, __exponent: *mut s32) -> f64;
extern fn ldexp(__x: f64, __exponent: s32) -> f64;
extern fn log(__x: f64) -> f64;
extern fn log10(__x: f64) -> f64;
extern fn modf(__x: f64, __iptr: *mut f64) -> f64;
extern fn expm1(__x: f64) -> f64;
extern fn log1p(__x: f64) -> f64;
extern fn logb(__x: f64) -> f64;
extern fn exp2(__x: f64) -> f64;
extern fn log2(__x: f64) -> f64;
extern fn pow(__x: f64, __y: f64) -> f64;
extern fn sqrt(__x: f64) -> f64;
extern fn hypot(__x: f64, __y: f64) -> f64;
extern fn cbrt(__x: f64) -> f64;
extern fn ceil(__x: f64) -> f64;
extern fn fabs(__x: f64) -> f64;
extern fn floor(__x: f64) -> f64;
extern fn fmod(__x: f64, __y: f64) -> f64;
extern fn isinf(__value: f64) -> s32;
extern fn finite(__value: f64) -> s32;
extern fn drem(__x: f64, __y: f64) -> f64;
extern fn significand(__x: f64) -> f64;
extern fn copysign(__x: f64, __y: f64) -> f64;
extern fn nan(__tagb: *const u8) -> f64;
extern fn isnan(__value: f64) -> s32;
extern fn j0(param0: f64) -> f64;
extern fn j1(param0: f64) -> f64;
extern fn jn(param0: s32, param1: f64) -> f64;
extern fn y0(param0: f64) -> f64;
extern fn y1(param0: f64) -> f64;
extern fn yn(param0: s32, param1: f64) -> f64;
extern fn erf(param0: f64) -> f64;
extern fn erfc(param0: f64) -> f64;
extern fn lgamma(param0: f64) -> f64;
extern fn tgamma(param0: f64) -> f64;
extern fn gamma(param0: f64) -> f64;
extern fn lgamma_r(param0: f64, __signgamp: *mut s32) -> f64;
extern fn rint(__x: f64) -> f64;
extern fn nextafter(__x: f64, __y: f64) -> f64;
extern fn nexttoward(__x: f64, __y: f64) -> f64;
extern fn remainder(__x: f64, __y: f64) -> f64;
extern fn scalbn(__x: f64, __n: s32) -> f64;
extern fn ilogb(__x: f64) -> s32;
extern fn scalbln(__x: f64, __n: s64) -> f64;
extern fn nearbyint(__x: f64) -> f64;
extern fn round(__x: f64) -> f64;
extern fn trunc(__x: f64) -> f64;
extern fn remquo(__x: f64, __y: f64, __quo: *mut s32) -> f64;
extern fn lrint(__x: f64) -> s64;
extern fn llrint(__x: f64) -> s64;
extern fn lround(__x: f64) -> s64;
extern fn llround(__x: f64) -> s64;
extern fn fdim(__x: f64, __y: f64) -> f64;
extern fn fmax(__x: f64, __y: f64) -> f64;
extern fn fmin(__x: f64, __y: f64) -> f64;
extern fn fma(__x: f64, __y: f64, __z: f64) -> f64;
extern fn scalb(__x: f64, __n: f64) -> f64;
extern fn acosf(__x: f32) -> f32;
extern fn asinf(__x: f32) -> f32;
extern fn atanf(__x: f32) -> f32;
extern fn atan2f(__y: f32, __x: f32) -> f32;
extern fn cosf(__x: f32) -> f32;
extern fn sinf(__x: f32) -> f32;
extern fn tanf(__x: f32) -> f32;
extern fn coshf(__x: f32) -> f32;
extern fn sinhf(__x: f32) -> f32;
extern fn tanhf(__x: f32) -> f32;
extern fn acoshf(__x: f32) -> f32;
extern fn asinhf(__x: f32) -> f32;
extern fn atanhf(__x: f32) -> f32;
extern fn expf(__x: f32) -> f32;
extern fn frexpf(__x: f32, __exponent: *mut s32) -> f32;
extern fn ldexpf(__x: f32, __exponent: s32) -> f32;
extern fn logf(__x: f32) -> f32;
extern fn log10f(__x: f32) -> f32;
extern fn modff(__x: f32, __iptr: *mut f32) -> f32;
extern fn expm1f(__x: f32) -> f32;
extern fn log1pf(__x: f32) -> f32;
extern fn logbf(__x: f32) -> f32;
extern fn exp2f(__x: f32) -> f32;
extern fn log2f(__x: f32) -> f32;
extern fn powf(__x: f32, __y: f32) -> f32;
extern fn sqrtf(__x: f32) -> f32;
extern fn hypotf(__x: f32, __y: f32) -> f32;
extern fn cbrtf(__x: f32) -> f32;
extern fn ceilf(__x: f32) -> f32;
extern fn fabsf(__x: f32) -> f32;
extern fn floorf(__x: f32) -> f32;
extern fn fmodf(__x: f32, __y: f32) -> f32;
extern fn isinff(__value: f32) -> s32;
extern fn finitef(__value: f32) -> s32;
extern fn dremf(__x: f32, __y: f32) -> f32;
extern fn significandf(__x: f32) -> f32;
extern fn copysignf(__x: f32, __y: f32) -> f32;
extern fn nanf(__tagb: *const u8) -> f32;
extern fn isnanf(__value: f32) -> s32;
extern fn j0f(param0: f32) -> f32;
extern fn j1f(param0: f32) -> f32;
extern fn jnf(param0: s32, param1: f32) -> f32;
extern fn y0f(param0: f32) -> f32;
extern fn y1f(param0: f32) -> f32;
extern fn ynf(param0: s32, param1: f32) -> f32;
extern fn erff(param0: f32) -> f32;
extern fn erfcf(param0: f32) -> f32;
extern fn lgammaf(param0: f32) -> f32;
extern fn tgammaf(param0: f32) -> f32;
extern fn gammaf(param0: f32) -> f32;
extern fn lgammaf_r(param0: f32, __signgamp: *mut s32) -> f32;
extern fn rintf(__x: f32) -> f32;
extern fn nextafterf(__x: f32, __y: f32) -> f32;
extern fn nexttowardf(__x: f32, __y: f64) -> f32;
extern fn remainderf(__x: f32, __y: f32) -> f32;
extern fn scalbnf(__x: f32, __n: s32) -> f32;
extern fn ilogbf(__x: f32) -> s32;
extern fn scalblnf(__x: f32, __n: s64) -> f32;
extern fn nearbyintf(__x: f32) -> f32;
extern fn roundf(__x: f32) -> f32;
extern fn truncf(__x: f32) -> f32;
extern fn remquof(__x: f32, __y: f32, __quo: *mut s32) -> f32;
extern fn lrintf(__x: f32) -> s64;
extern fn llrintf(__x: f32) -> s64;
extern fn lroundf(__x: f32) -> s64;
extern fn llroundf(__x: f32) -> s64;
extern fn fdimf(__x: f32, __y: f32) -> f32;
extern fn fmaxf(__x: f32, __y: f32) -> f32;
extern fn fminf(__x: f32, __y: f32) -> f32;
extern fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
extern fn scalbf(__x: f32, __n: f32) -> f32;
extern fn acosl(__x: f64) -> f64;
extern fn asinl(__x: f64) -> f64;
extern fn atanl(__x: f64) -> f64;
extern fn atan2l(__y: f64, __x: f64) -> f64;
extern fn cosl(__x: f64) -> f64;
extern fn sinl(__x: f64) -> f64;
extern fn tanl(__x: f64) -> f64;
extern fn coshl(__x: f64) -> f64;
extern fn sinhl(__x: f64) -> f64;
extern fn tanhl(__x: f64) -> f64;
extern fn acoshl(__x: f64) -> f64;
extern fn asinhl(__x: f64) -> f64;
extern fn atanhl(__x: f64) -> f64;
extern fn expl(__x: f64) -> f64;
extern fn frexpl(__x: f64, __exponent: *mut s32) -> f64;
extern fn ldexpl(__x: f64, __exponent: s32) -> f64;
extern fn logl(__x: f64) -> f64;
extern fn log10l(__x: f64) -> f64;
extern fn modfl(__x: f64, __iptr: *mut f64) -> f64;
extern fn expm1l(__x: f64) -> f64;
extern fn log1pl(__x: f64) -> f64;
extern fn logbl(__x: f64) -> f64;
extern fn exp2l(__x: f64) -> f64;
extern fn log2l(__x: f64) -> f64;
extern fn powl(__x: f64, __y: f64) -> f64;
extern fn sqrtl(__x: f64) -> f64;
extern fn hypotl(__x: f64, __y: f64) -> f64;
extern fn cbrtl(__x: f64) -> f64;
extern fn ceill(__x: f64) -> f64;
extern fn fabsl(__x: f64) -> f64;
extern fn floorl(__x: f64) -> f64;
extern fn fmodl(__x: f64, __y: f64) -> f64;
extern fn isinfl(__value: f64) -> s32;
extern fn finitel(__value: f64) -> s32;
extern fn dreml(__x: f64, __y: f64) -> f64;
extern fn significandl(__x: f64) -> f64;
extern fn copysignl(__x: f64, __y: f64) -> f64;
extern fn nanl(__tagb: *const u8) -> f64;
extern fn isnanl(__value: f64) -> s32;
extern fn j0l(param0: f64) -> f64;
extern fn j1l(param0: f64) -> f64;
extern fn jnl(param0: s32, param1: f64) -> f64;
extern fn y0l(param0: f64) -> f64;
extern fn y1l(param0: f64) -> f64;
extern fn ynl(param0: s32, param1: f64) -> f64;
extern fn erfl(param0: f64) -> f64;
extern fn erfcl(param0: f64) -> f64;
extern fn lgammal(param0: f64) -> f64;
extern fn tgammal(param0: f64) -> f64;
extern fn gammal(param0: f64) -> f64;
extern fn lgammal_r(param0: f64, __signgamp: *mut s32) -> f64;
extern fn rintl(__x: f64) -> f64;
extern fn nextafterl(__x: f64, __y: f64) -> f64;
extern fn nexttowardl(__x: f64, __y: f64) -> f64;
extern fn remainderl(__x: f64, __y: f64) -> f64;
extern fn scalbnl(__x: f64, __n: s32) -> f64;
extern fn ilogbl(__x: f64) -> s32;
extern fn scalblnl(__x: f64, __n: s64) -> f64;
extern fn nearbyintl(__x: f64) -> f64;
extern fn roundl(__x: f64) -> f64;
extern fn truncl(__x: f64) -> f64;
extern fn remquol(__x: f64, __y: f64, __quo: *mut s32) -> f64;
extern fn lrintl(__x: f64) -> s64;
extern fn llrintl(__x: f64) -> s64;
extern fn lroundl(__x: f64) -> s64;
extern fn llroundl(__x: f64) -> s64;
extern fn fdiml(__x: f64, __y: f64) -> f64;
extern fn fmaxl(__x: f64, __y: f64) -> f64;
extern fn fminl(__x: f64, __y: f64) -> f64;
extern fn fmal(__x: f64, __y: f64, __z: f64) -> f64;
extern fn scalbl(__x: f64, __n: f64) -> f64;
extern fn Clamp(value: f32, min: f32, max: f32) -> f32;
extern fn Lerp(start: f32, end: f32, amount: f32) -> f32;
extern fn Normalize(value: f32, start: f32, end: f32) -> f32;
extern fn Remap(value: f32, inputStart: f32, inputEnd: f32, outputStart: f32, outputEnd: f32) -> f32;
extern fn Wrap(value: f32, min: f32, max: f32) -> f32;
extern fn FloatEquals(x: f32, y: f32) -> s32;
extern fn Vector2Zero() -> Vector2;
extern fn Vector2One() -> Vector2;
extern fn Vector2Add(v1: Vector2, v2: Vector2) -> Vector2;
extern fn Vector2AddValue(v: Vector2, add: f32) -> Vector2;
extern fn Vector2Subtract(v1: Vector2, v2: Vector2) -> Vector2;
extern fn Vector2SubtractValue(v: Vector2, sub: f32) -> Vector2;
extern fn Vector2Length(v: Vector2) -> f32;
extern fn Vector2LengthSqr(v: Vector2) -> f32;
extern fn Vector2DotProduct(v1: Vector2, v2: Vector2) -> f32;
extern fn Vector2CrossProduct(v1: Vector2, v2: Vector2) -> f32;
extern fn Vector2Distance(v1: Vector2, v2: Vector2) -> f32;
extern fn Vector2DistanceSqr(v1: Vector2, v2: Vector2) -> f32;
extern fn Vector2Angle(v1: Vector2, v2: Vector2) -> f32;
extern fn Vector2LineAngle(start: Vector2, end: Vector2) -> f32;
extern fn Vector2Scale(v: Vector2, scale: f32) -> Vector2;
extern fn Vector2Multiply(v1: Vector2, v2: Vector2) -> Vector2;
extern fn Vector2Negate(v: Vector2) -> Vector2;
extern fn Vector2Divide(v1: Vector2, v2: Vector2) -> Vector2;
extern fn Vector2Normalize(v: Vector2) -> Vector2;
extern fn Vector2Transform(v: Vector2, mat: Matrix) -> Vector2;
extern fn Vector2Lerp(v1: Vector2, v2: Vector2, amount: f32) -> Vector2;
extern fn Vector2Reflect(v: Vector2, normal: Vector2) -> Vector2;
extern fn Vector2Min(v1: Vector2, v2: Vector2) -> Vector2;
extern fn Vector2Max(v1: Vector2, v2: Vector2) -> Vector2;
extern fn Vector2Rotate(v: Vector2, angle: f32) -> Vector2;
extern fn Vector2MoveTowards(v: Vector2, target: Vector2, maxDistance: f32) -> Vector2;
extern fn Vector2Invert(v: Vector2) -> Vector2;
extern fn Vector2Clamp(v: Vector2, min: Vector2, max: Vector2) -> Vector2;
extern fn Vector2ClampValue(v: Vector2, min: f32, max: f32) -> Vector2;
extern fn Vector2Equals(p: Vector2, q: Vector2) -> s32;
extern fn Vector2Refract(v: Vector2, n: Vector2, r: f32) -> Vector2;
extern fn Vector3Zero() -> Vector3;
extern fn Vector3One() -> Vector3;
extern fn Vector3Add(v1: Vector3, v2: Vector3) -> Vector3;
extern fn Vector3AddValue(v: Vector3, add: f32) -> Vector3;
extern fn Vector3Subtract(v1: Vector3, v2: Vector3) -> Vector3;
extern fn Vector3SubtractValue(v: Vector3, sub: f32) -> Vector3;
extern fn Vector3Scale(v: Vector3, scalar: f32) -> Vector3;
extern fn Vector3Multiply(v1: Vector3, v2: Vector3) -> Vector3;
extern fn Vector3CrossProduct(v1: Vector3, v2: Vector3) -> Vector3;
extern fn Vector3Perpendicular(v: Vector3) -> Vector3;
extern fn Vector3Length(v: Vector3) -> f32;
extern fn Vector3LengthSqr(v: Vector3) -> f32;
extern fn Vector3DotProduct(v1: Vector3, v2: Vector3) -> f32;
extern fn Vector3Distance(v1: Vector3, v2: Vector3) -> f32;
extern fn Vector3DistanceSqr(v1: Vector3, v2: Vector3) -> f32;
extern fn Vector3Angle(v1: Vector3, v2: Vector3) -> f32;
extern fn Vector3Negate(v: Vector3) -> Vector3;
extern fn Vector3Divide(v1: Vector3, v2: Vector3) -> Vector3;
extern fn Vector3Normalize(v: Vector3) -> Vector3;
extern fn Vector3Project(v1: Vector3, v2: Vector3) -> Vector3;
extern fn Vector3Reject(v1: Vector3, v2: Vector3) -> Vector3;
extern fn Vector3OrthoNormalize(v1: *mut Vector3, v2: *mut Vector3) -> void;
extern fn Vector3Transform(v: Vector3, mat: Matrix) -> Vector3;
extern fn Vector3RotateByQuaternion(v: Vector3, q: Quaternion) -> Vector3;
extern fn Vector3RotateByAxisAngle(v: Vector3, axis: Vector3, angle: f32) -> Vector3;
extern fn Vector3MoveTowards(v: Vector3, target: Vector3, maxDistance: f32) -> Vector3;
extern fn Vector3Lerp(v1: Vector3, v2: Vector3, amount: f32) -> Vector3;
extern fn Vector3CubicHermite(v1: Vector3, tangent1: Vector3, v2: Vector3, tangent2: Vector3, amount: f32) -> Vector3;
extern fn Vector3Reflect(v: Vector3, normal: Vector3) -> Vector3;
extern fn Vector3Min(v1: Vector3, v2: Vector3) -> Vector3;
extern fn Vector3Max(v1: Vector3, v2: Vector3) -> Vector3;
extern fn Vector3Barycenter(p: Vector3, a: Vector3, b: Vector3, c: Vector3) -> Vector3;
extern fn Vector3Unproject(source: Vector3, projection: Matrix, view: Matrix) -> Vector3;
extern fn Vector3ToFloatV(v: Vector3) -> float3;
extern fn Vector3Invert(v: Vector3) -> Vector3;
extern fn Vector3Clamp(v: Vector3, min: Vector3, max: Vector3) -> Vector3;
extern fn Vector3ClampValue(v: Vector3, min: f32, max: f32) -> Vector3;
extern fn Vector3Equals(p: Vector3, q: Vector3) -> s32;
extern fn Vector3Refract(v: Vector3, n: Vector3, r: f32) -> Vector3;
extern fn Vector4Zero() -> Vector4;
extern fn Vector4One() -> Vector4;
extern fn Vector4Add(v1: Vector4, v2: Vector4) -> Vector4;
extern fn Vector4AddValue(v: Vector4, add: f32) -> Vector4;
extern fn Vector4Subtract(v1: Vector4, v2: Vector4) -> Vector4;
extern fn Vector4SubtractValue(v: Vector4, add: f32) -> Vector4;
extern fn Vector4Length(v: Vector4) -> f32;
extern fn Vector4LengthSqr(v: Vector4) -> f32;
extern fn Vector4DotProduct(v1: Vector4, v2: Vector4) -> f32;
extern fn Vector4Distance(v1: Vector4, v2: Vector4) -> f32;
extern fn Vector4DistanceSqr(v1: Vector4, v2: Vector4) -> f32;
extern fn Vector4Scale(v: Vector4, scale: f32) -> Vector4;
extern fn Vector4Multiply(v1: Vector4, v2: Vector4) -> Vector4;
extern fn Vector4Negate(v: Vector4) -> Vector4;
extern fn Vector4Divide(v1: Vector4, v2: Vector4) -> Vector4;
extern fn Vector4Normalize(v: Vector4) -> Vector4;
extern fn Vector4Min(v1: Vector4, v2: Vector4) -> Vector4;
extern fn Vector4Max(v1: Vector4, v2: Vector4) -> Vector4;
extern fn Vector4Lerp(v1: Vector4, v2: Vector4, amount: f32) -> Vector4;
extern fn Vector4MoveTowards(v: Vector4, target: Vector4, maxDistance: f32) -> Vector4;
extern fn Vector4Invert(v: Vector4) -> Vector4;
extern fn Vector4Equals(p: Vector4, q: Vector4) -> s32;
extern fn MatrixDeterminant(mat: Matrix) -> f32;
extern fn MatrixTrace(mat: Matrix) -> f32;
extern fn MatrixTranspose(mat: Matrix) -> Matrix;
extern fn MatrixInvert(mat: Matrix) -> Matrix;
extern fn MatrixIdentity() -> Matrix;
extern fn MatrixAdd(left: Matrix, right: Matrix) -> Matrix;
extern fn MatrixSubtract(left: Matrix, right: Matrix) -> Matrix;
extern fn MatrixMultiply(left: Matrix, right: Matrix) -> Matrix;
extern fn MatrixTranslate(x: f32, y: f32, z: f32) -> Matrix;
extern fn MatrixRotate(axis: Vector3, angle: f32) -> Matrix;
extern fn MatrixRotateX(angle: f32) -> Matrix;
extern fn MatrixRotateY(angle: f32) -> Matrix;
extern fn MatrixRotateZ(angle: f32) -> Matrix;
extern fn MatrixRotateXYZ(angle: Vector3) -> Matrix;
extern fn MatrixRotateZYX(angle: Vector3) -> Matrix;
extern fn MatrixScale(x: f32, y: f32, z: f32) -> Matrix;
extern fn MatrixFrustum(left: f64, right: f64, bottom: f64, top: f64, nearPlane: f64, farPlane: f64) -> Matrix;
extern fn MatrixPerspective(fovY: f64, aspect: f64, nearPlane: f64, farPlane: f64) -> Matrix;
extern fn MatrixOrtho(left: f64, right: f64, bottom: f64, top: f64, nearPlane: f64, farPlane: f64) -> Matrix;
extern fn MatrixLookAt(eye: Vector3, target: Vector3, up: Vector3) -> Matrix;
extern fn MatrixToFloatV(mat: Matrix) -> float16;
extern fn QuaternionAdd(q1: Quaternion, q2: Quaternion) -> Quaternion;
extern fn QuaternionAddValue(q: Quaternion, add: f32) -> Quaternion;
extern fn QuaternionSubtract(q1: Quaternion, q2: Quaternion) -> Quaternion;
extern fn QuaternionSubtractValue(q: Quaternion, sub: f32) -> Quaternion;
extern fn QuaternionIdentity() -> Quaternion;
extern fn QuaternionLength(q: Quaternion) -> f32;
extern fn QuaternionNormalize(q: Quaternion) -> Quaternion;
extern fn QuaternionInvert(q: Quaternion) -> Quaternion;
extern fn QuaternionMultiply(q1: Quaternion, q2: Quaternion) -> Quaternion;
extern fn QuaternionScale(q: Quaternion, mul: f32) -> Quaternion;
extern fn QuaternionDivide(q1: Quaternion, q2: Quaternion) -> Quaternion;
extern fn QuaternionLerp(q1: Quaternion, q2: Quaternion, amount: f32) -> Quaternion;
extern fn QuaternionNlerp(q1: Quaternion, q2: Quaternion, amount: f32) -> Quaternion;
extern fn QuaternionSlerp(q1: Quaternion, q2: Quaternion, amount: f32) -> Quaternion;
extern fn QuaternionCubicHermiteSpline(q1: Quaternion, outTangent1: Quaternion, q2: Quaternion, inTangent2: Quaternion, t: f32) -> Quaternion;
extern fn QuaternionFromVector3ToVector3(from: Vector3, to: Vector3) -> Quaternion;
extern fn QuaternionFromMatrix(mat: Matrix) -> Quaternion;
extern fn QuaternionToMatrix(q: Quaternion) -> Matrix;
extern fn QuaternionFromAxisAngle(axis: Vector3, angle: f32) -> Quaternion;
extern fn QuaternionToAxisAngle(q: Quaternion, outAxis: *mut Vector3, outAngle: *mut f32) -> void;
extern fn QuaternionFromEuler(pitch: f32, yaw: f32, roll: f32) -> Quaternion;
extern fn QuaternionToEuler(q: Quaternion) -> Vector3;
extern fn QuaternionTransform(q: Quaternion, mat: Matrix) -> Quaternion;
extern fn QuaternionEquals(p: Quaternion, q: Quaternion) -> s32;
extern fn MatrixDecompose(mat: Matrix, translation: *mut Vector3, rotation: *mut Quaternion, scale: *mut Vector3) -> void;
