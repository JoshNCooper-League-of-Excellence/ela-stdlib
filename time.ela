
extern fn time(value: *const void) -> s32;

struct timespec_t {
  tv_sec: s64,
  tv_nsec: s64,
}

extern fn clock_gettime(clock_id: s32, tp: *mut timespec_t) -> s32;

struct tm_t {
  tm_sec: s32,
  tm_min: s32,
  tm_hour: s32,
  tm_mday: s32,
  tm_mon: s32,
  tm_year: s32,
  tm_wday: s32,
  tm_yday: s32,
  tm_isdst: s32,
}

extern fn localtime_r(timep: *const s64, result: *mut tm_t) -> *mut tm_t;

struct Timing;

struct DateTime {
  year: s32,
  month: s32,
  day: s32,
}

impl Timing {
  // returns the timespec_t for the current time since epoch.
  fn get_timespec_since_epoch() -> timespec_t {
    mut ts: timespec_t;
    clock_gettime(0, &mut ts);
    return ts;
  }
  
  // returns a seconds value representing time since epoch
  fn seconds() -> f64 {
    ts := Timing::get_timespec_since_epoch();
    return (ts.tv_sec as f64) + (ts.tv_nsec as f64) / (1_000_000_000.0 as f64);
  }

  // returns a milliseconds value representing time since epoch
  fn milliseconds() -> f64 {
    ts := Timing::get_timespec_since_epoch();
    return (ts.tv_sec as f64) * 1_000.0 + (ts.tv_nsec as f64) / 1_000_000.0 as f64;
  }

  // returns a microseconds value representing time since epoch
  fn microseconds() -> f64 {
    ts := Timing::get_timespec_since_epoch();
    return (ts.tv_sec as f64) * 1_000_000.0 + (ts.tv_nsec as f64) / 1_000.0;
  }

  // returns a minutes value representing time since epoch
  fn minutes() -> f64 {
    ts := Timing::get_timespec_since_epoch();
    return (ts.tv_sec as f64) / 60.0 + (ts.tv_nsec as f64) / (60.0 * 1_000_000_000.0);
  }

  // returns an hours value representing time since epoch
  fn hours() -> f64 {
    ts := Timing::get_timespec_since_epoch();
    return (ts.tv_sec as f64) / 3_600.0 + (ts.tv_nsec as f64) / ((3_600.0 * 1_000_000_000.0) as f64);
  }

  // returns a days value representing time since epoch
  fn days() -> f64 {
    ts := Timing::get_timespec_since_epoch();
    return (ts.tv_sec as f64) / 86_400.0 + (ts.tv_nsec as f64) / ((86_400.0 * 1_000_000_000.0) as f64)
  }

  fn date_time_string() -> String {
    ts := Timing::get_timespec_since_epoch();
    time_t: s64 = ts.tv_sec;
    mut tm: tm_t;
    localtime_r(&const time_t, &mut tm);
    mut buffer: [u8; 64];
    length := std::c::snprintf(buffer, 64, "%04d-%02d-%02d %02d:%02d:%02d"c,
             tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
             tm.tm_hour, tm.tm_min, tm.tm_sec);
    buffer[length] = '\0';
    return String::from_ptr(buffer);
  }
}

#test fn __test_timing() {
  import assertion::*;

  // Capture a reference time
  start_time := Timing::get_timespec_since_epoch();

  // Test seconds
  seconds := Timing::seconds();
  assert(seconds >= start_time.tv_sec, "seconds failed");

  // Test milliseconds
  milliseconds := Timing::milliseconds();
  assert(milliseconds >= start_time.tv_sec * 1000 + start_time.tv_nsec / 1_000_000, "ms failed");

  // Test microseconds
  microseconds := Timing::microseconds();
  assert(microseconds >= start_time.tv_sec * 1_000_000 + start_time.tv_nsec / 1_000, "us failed");

  // Test minutes
  minutes := Timing::minutes();
  assert(minutes >= start_time.tv_sec / 60, "minutes failed");

  // Test hours
  hours := Timing::hours();
  assert(hours >= start_time.tv_sec / 3600, "hours failed");

  // Test days
  days := Timing::days();
  assert(days >= start_time.tv_sec / 86400, "days failed");
}