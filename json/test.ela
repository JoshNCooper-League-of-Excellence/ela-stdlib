import fmt::*;
import json::*;

import assertion::*;

fn expect(msg: String) {
  fmt::println(msg);
  panic("");
}

#test fn test_serialize_scalars() {
  assert_eq_f32(
    (*serialize(42).expect(&mut expect).as_number().unwrap()) as f32,
    42.0 as f32,
    "serialize(42) != 42.0"
  );

  assert_eq_f32(
    (*serialize(-7).expect(&mut expect).as_number().unwrap()) as f32,
    -7.0 as f32,
    "serialize(-7) != -7.0"
  );

  assert_eq_f32(
    (*serialize(3.14).expect(&mut expect).as_number().unwrap()) as f32,
    3.14 as f32,
    "serialize(3.14) != 3.14"
  );

  assert_eq(
    *serialize(true).expect(&mut expect).as_bool().unwrap(),
    true,
    "serialize(true) != true"
  );

  assert_eq(
    *serialize(false).expect(&mut expect).as_bool().unwrap(),
    false,
    "serialize(false) != false"
  );

  assert_eq(
    serialize("hello").expect(&mut expect).as_string().unwrap().as_str(),
    "hello",
    "serialize(\"hello\") != \"hello\""
  );

  assert_eq(
    *serialize(String::from("world")).expect(&mut expect).as_string().unwrap(),
    String::from("world"),
    "serialize(String::from(\"world\")) != \"world\""
  );
}

#test fn test_serialize_struct() {
  struct Point {
    x: s32,
    y: s32,
  }

  p := Point.{x: 10, y: 20};
  result := serialize(p).expect(&mut expect);
  obj := result.as_object().unwrap();

  assert_eq_f32((*obj.get(String::from("x")).unwrap().as_number().unwrap()) as f32, 10.0, "Point.x serialization failed");
  assert_eq_f32((*obj.get(String::from("y")).unwrap().as_number().unwrap()) as f32, 20.0, "Point.y serialization failed");
}

#test fn test_serialize_array() {
  arr: [s32; 3] = .[1, 2, 3];
  result := serialize(arr).expect(&mut expect);
  array := result.as_array().unwrap();

  assert_eq_f32((*((*array)[0].as_number().unwrap())) as f32, 1.0, "Array[0] serialization failed");
  assert_eq_f32((*((*array)[1].as_number().unwrap())) as f32, 2.0, "Array[1] serialization failed");
  assert_eq_f32((*((*array)[2].as_number().unwrap())) as f32, 3.0, "Array[2] serialization failed");
}

#test fn test_serialize_tuple() {
  tup := (42, false, "abc");
  result := serialize(tup).expect(&mut expect);
  obj := result.as_object().unwrap();

  assert_eq_f32((*obj.get(String::from("0")).unwrap().as_number().unwrap()) as f32, 42.0, "Tuple[0] serialization failed");
  assert_eq(*obj.get(String::from("1")).unwrap().as_bool().unwrap(), false, "Tuple[1] serialization failed");
  assert_eq(obj.get(String::from("2")).unwrap().as_string().unwrap().as_str(), "abc", "Tuple[2] serialization failed");
}

#test fn test_serialize_iterator() {
  list := List!<s32>::init(.[5, 6, 7]);
  result := serialize_iterator!<Iter!<s32>, s32>(list.iter()).expect(&mut expect);
  array := result.as_array().unwrap();

  assert_eq_f32((*((*array)[0].as_number().unwrap())) as f32, 5.0, "Iterator[0] serialization failed");
  assert_eq_f32((*((*array)[1].as_number().unwrap())) as f32, 6.0, "Iterator[1] serialization failed");
  assert_eq_f32((*((*array)[2].as_number().unwrap())) as f32, 7.0, "Iterator[2] serialization failed");
}