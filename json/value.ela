import fmt::{
  Format_Options,
  String_Builder,
};

import map::*;

JsonValueType :: enum {
  Invalid = -1,
  String,
  Number,
  Object,
  Array,
  Boolean,
  Null,
}

JsonValue :: struct {
  type : s32,
  #anon :: union {
    number: f64,
    boolean: bool,

    // these need to be freed.
    string: String,
    array: List!<*mut JsonValue>,
    object: Map!<String, *mut JsonValue>,
  },
}

impl Deinit for JsonValue {
  deinit :: fn(*mut self) {
    switch self.type {
      JsonValueType::Object: {
        for key, value in self.object {
          key.deinit();
          value.deinit();
          free(value);
        }
        self.object.deinit();
      }
      JsonValueType::Array: {
        for val in self.array {
          val.deinit();
          free(val);
        }
        self.array.deinit();
      }
      JsonValueType::String: {
        self.string.deinit();
      }
    }
  }
}

// ! This just crashes the compiler.
// ! it resolves to Subscript$-2, an unresolved generic?
// ! Wtf.
// impl Subscript for JsonValue {
//   subscript :: fn(*const self, index: s32) -> *const JsonValue {
//     if self.type != JsonValueType::Array 
//       then return null;
      
//     if index < 0 || index >= self.array.length 
//       then return null;

//     return self.array[index];
//   }

//   subscript_mut :: fn(*mut self, index: s32) -> *mut JsonValue {
//     if self.type != JsonValueType::Array 
//       then return null;
//     if index < 0 || index >= self.array.length 
//       then return null;
//     return self.array[index];
//   }
// }

impl JsonValue {
  to_string :: fn(*mut self, mut options: *const Format_Options) -> String {
    
    // just doing this for now so you can pass null,
    // just for testing.
    options = new(Format_Options .{
      quote_strings: true,
      digits_after_decimal: 6,
    });

    mut builder: String_Builder;

    defer { 
      free(options);
      builder.deinit();
    }

    switch self.type {
      JsonValueType::Object: {
        builder.append("{");
        mut idx := 0;
        for key, value in self.object {
          builder.append(key);
          builder.append(": ");
          builder.append_then_free(value.to_string(options));
          if idx != self.object.length {
            builder.append(", ");
          }
        }
        builder.append("}");
      }
      JsonValueType::Array: {
        builder.append("[");
        mut idx := 0;
        for val in self.array {
          builder.append_then_free(val.to_string(options));
          if idx != self.array.length {
            builder.append(", ");
          }
        }
        builder.append("]");  
      }
      JsonValueType::Number: {
        builder.appendf("%", (self.number,), *options);
      }
      JsonValueType::String: {
        builder.appendf("%", (self.string,), *options);
      }
      JsonValueType::Boolean: {
        value := switch self.boolean {
          true => "true",
          false => "false"
        };
        builder.append(value);
      }
      JsonValueType::Null: {
        builder.append("null");
      }
      else: {
        panic("unsupported json type, probably a corrupted JsonValue");
      }
    }

    return builder.get_string();
  }

  get :: fn(*mut self, key: String) -> Option!<*mut JsonValue> {
    if self.type != JsonValueType::Object {
      return None();
    }
    return self.object.get(key);
  }

  is_number :: fn(*mut self)  -> bool 
    => self.type == JsonValueType::Number;

  is_string :: fn(*mut self)  -> bool 
    => self.type == JsonValueType::String;

  is_object :: fn(*mut self)  -> bool 
    => self.type == JsonValueType::Object;

  is_array :: fn(*mut self)   -> bool 
    => self.type == JsonValueType::Array;

  is_boolean :: fn(*mut self) -> bool 
    => self.type == JsonValueType::Boolean;

  is_null :: fn(*mut self)    -> bool 
    => self.type == JsonValueType::Null;


  as_number :: fn(*mut self) -> Option!<f64> {
    if self.type == JsonValueType::Number {
      return Some(self.number);
    }
    return None();
  }

  as_string :: fn(*mut self) -> Option!<String> {
    if self.type == JsonValueType::String {
      return Some(self.string);
    }
    return None()
  }

  as_object :: fn(*mut self) -> Option!<Map!<String, *mut JsonValue>> {
    if self.type == JsonValueType::Object {
      return Some(self.object);
    }
    return None();
  }
  
  as_array :: fn(*mut self) -> Option!<List!<*mut JsonValue>> {
    if self.type == JsonValueType::Array {
      return Some(self.array);
    }
    return None();
  }

  as_boolean :: fn(*mut self) -> Option!<bool> {
    if self.type == JsonValueType::Boolean {
      return Some(self.boolean);
    }
    return None();
  }
}