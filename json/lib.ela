#include "lexer.ela"
#include "value.ela"
#include "parser.ela"
#include "serialize.ela"
#include "deserialize.ela"

impl Serializable for String {
  fn serialize(*const self) -> JsonResult {
    return JsonResult::Ok(new(JsonValue::String(self.clone())));
  }

  fn deserialize(*mut self, object: *mut JsonValue) -> Option!<String> {
    if object is JsonValue::String(v) {
      *self = v;
    }
    return None();
  }
}

impl!<T> Serializable for List!<T> {
  fn serialize(*const self) -> JsonResult {
    return serialize_iterator!<Iter!<T>, T>(self.iter());
  }

  fn deserialize(*mut self, object: *mut JsonValue) -> Option!<String> {
    array := object.as_array().unwrap();
    self.initialize(array.length);
    for i in 0..array.length {
      err := deserialize((*array)[i], &mut (*self)[i]);
      if err.is_some() {
        return err;
      }
    }
    return None();
  }
}

// We need a way to do this for any key value, we have to constrain it to !<String, V>
// in some way, but using a where will just make it so you cannot use Map!<> with anything but String
// in a project where you are also using Json.

/* 
impl!<K, V> Serializable for Map!<K, V> {
  fn serialize(*const self) -> JsonResult {
    mut value := JsonValue::new();
    value._type = JsonValueType::Object;
    for key, v in *self {
      result := serialize!<V>(v);
      if result.is_err() {
        return result;
      }
      value.object.insert(key, result.unwrap());
    }
    return JsonResult::Ok(value);
  }
  fn deserialize(*mut self, object: *mut JsonValue) -> Option!<String> {
    println(object._type as JsonValueType);

    if object._type != JsonValueType::Object 
      then return Some(String::from("invalid json _type, expected an object to deserialize into Map."));

    for key, value in object.object {
      mut v: V;
      err := deserialize!<V>(value, &mut v);
      if err.is_some() {
        return err;
      }
      self.insert(key, v);
    }

    return None();
  }
}
*/