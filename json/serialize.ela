fn serialize_any(object: any) -> JsonResult;

trait Serializable {
  fn serialize(*const self) -> JsonResult;
  fn deserialize(*mut self, object: *mut JsonValue) -> Option!<String>;
}

fn new_dyn_serializable(value: any) -> dyn Serializable {
  instance, _type := value;

  serialize_method := _type.methods.find_first_of(
    fn(method: *const Method) -> bool {
      return method.name == "serialize";
    }
  )

  if !serialize_method {
    panic(format("unable to find 'serialize' in _type %s\n", (_type.name,), FormatOptions::default()).as_str());
  }

  deserialize_method := _type.methods.find_first_of(
    fn(method: *const Method) -> bool {
      return method.name == "deserialize";
    }
  );

  if !deserialize_method {
    panic(format("unable to find 'deserialize' in _type %s\n", (_type.name,), FormatOptions::default()).as_str());
  }

  mut dynamic: dyn Serializable;
  dynamic.instance = instance;
  dynamic.serialize = serialize_method.pointer as fn (*const void) -> JsonResult;
  dynamic.deserialize = deserialize_method.pointer as fn(*mut void, *mut JsonValue) -> Option!<String>;
  return dynamic;
}

fn serialize_scalar(object: any) -> JsonResult {
  mut val := new(JsonValue::Null)
  if object._type.is_float() {
    if object._type.size == 8 {
      *val = JsonValue::Number(*(object.ptr as *const f64));
    } else {
      *val = JsonValue::Number(*(object.ptr as *const f32));
    }
    return JsonResult::Ok(val);
  } else if object._type.is_integral() {
    *val = JsonValue::Number(0);
    if object._type.is_signed() {
      *val = JsonValue::Number(switch object._type.size {
        8 => *(object.ptr as *s64),
        4 => *(object.ptr as *s32),
        2 => *(object.ptr as *s16),
        1 => *(object.ptr as *s8),
      });
    } else {
      *val = JsonValue::Number(switch object._type.size {
        8 => *(object.ptr as *u64),
        4 => *(object.ptr as *u32),
        2 => *(object.ptr as *u16),
        1 => *(object.ptr as *u8),
      });
    }
    return JsonResult::Ok(val);
  } else if object._type.is_bool() {
    *val = JsonValue::Bool(*(object.ptr as *bool));
    return JsonResult::Ok(val);
  }
  return JsonResult::Err(format("Unsupported _type :: %", (object._type.name, ), FormatOptions::default()));
}

fn serialize_struct(object: any) -> JsonResult {
  mut val := new(JsonValue::Object(.{}));
  for field in object._type.fields {
    result := serialize_any(any.{ptr: field.get(object.ptr), _type: field._type});
    if result.is_err() {
      return result;
    }
    val.as_object().unwrap().insert(String::from(field.name), result.unwrap());
  }
  return JsonResult::Ok(val);
}

fn serialize_array(object: any) -> JsonResult {
  mut val := new(JsonValue::Array(.{}));
  for element in object._type.elements(object.ptr as *const u8) {
    result := serialize_any(element);
    if result.is_err() then return result;
    val.as_array().unwrap().push(result.unwrap());
  }
  return JsonResult::Ok(val);
}

fn serialize_tuple(object: any) -> JsonResult {
  mut val := new(JsonValue::Object(.{}));
  mut index := 0;
  for element in object._type.tuple_elements(object.ptr as *mut u8) {
    result := serialize_any(element);
    if result.is_err() {
      return result;
    }
    val.as_object().unwrap().insert(to_string(index, *FormatOptions::current()), result.unwrap());
    index += 1;
  }
  return JsonResult::Ok(val);
}

fn serialize_any(object: any) -> JsonResult {

  if object._type.implements("Serializable") {
    dynamic := new_dyn_serializable(object);
    return dynamic.serialize();
  }

  if object._type.has_no_extension() {
    if object._type == typeof(str) {
      return JsonResult::Ok(new(JsonValue::String(String::from(*(object.ptr as *const str)))));
    } else if object._type == typeof(String) {
      return JsonResult::Ok(new(JsonValue::String((object.ptr as *const String).clone())));
    } else if object._type == typeof(*const u8) {
      return JsonResult::Ok(new(JsonValue::String(String::from_ptr(*(object.ptr as *const *const u8)))));
    } else if object._type.is_scalar() {
      return serialize_scalar(object);
    } else if object._type.is_struct() {
      return serialize_struct(object);
    } else if object._type.is_tuple() {
      return serialize_tuple(object);
    }
  } else if object._type.is_array() {
    return serialize_array(object);
  }
  return JsonResult::Err(format("Unsupported _type :: '%'", (object._type.name, ), FormatOptions::default()));
}

fn serialize!<T>(mut object: T) -> JsonResult {
  return serialize_any(any::from(&mut object));
}

fn serialize_iterator!<It, V>(obj: It) -> JsonResult where It: Iterator!<V> {
  mut array: List!<*mut JsonValue>;
  for v in obj {
    result := serialize(v);
    if result.is_err() {
      return result.propagate();
    }
    array.push(result.unwrap());
  }
  return JsonResult::Ok(new(JsonValue::Array(array)));
}

