serialize_any :: fn(object: any) -> JsonResult;

Serializable :: interface {
  serialize :: fn(*const self) -> JsonResult;
  deserialize :: fn(*mut self, object: *mut JsonValue) -> Option!<String>;
}

new_dyn_serializable :: fn(value: any) -> #self {
  instance, type := value;

  serialize_tuple := type.methods.find_first_of(
    fn(tuple: *const (str, *const void)) -> bool {
      return tuple.0 == "serialize";
    }
  )

  if !serialize_tuple {
    panic(format("unable to find 'serialize' in type %s\n", (type.name,), FormatOptions::default()).as_str());
  }

  deserialize_tuple := type.methods.find_first_of(
    fn(tuple: *const (str, *const void)) -> bool {
      return tuple.0 == "deserialize";
    }
  );

  if !deserialize_tuple {
    panic(format("unable to find 'deserialize' in type %s\n", (type.name,), FormatOptions::default()).as_str());
  }

  _0, serialize := *serialize_tuple;
  _1, deserialize := *deserialize_tuple;

  mut dynamic: dyn Serializable;
  dynamic.instance = instance;
  dynamic.serialize = serialize as fn * (*const void) -> JsonResult;
  dynamic.deserialize = deserialize as fn *(*mut void, *mut JsonValue) -> Option!<String>;
  return dynamic;
}

serialize_scalar :: fn(object: any) -> JsonResult {
  val := JsonValue::new();
  if Type::is_float(object.type) {
    val.type = JsonValueType::Number;
    if object.type.size == 8 {
      val.number = *(object.ptr as *const f64);
    } else {
      val.number = *(object.ptr as *const f32);
    }
    return JsonResult::Ok(val);
  } else if Type::is_integral(object.type) {
    val.type = JsonValueType::Number;
    if Type::is_signed(object.type) {
      val.number = switch object.type.size {
        8 => *(object.ptr as *const s64),
        4 => *(object.ptr as *const s32),
        2 => *(object.ptr as *const s16),
        1 => *(object.ptr as *const s8),
      };
    } else {
      val.number = switch object.type.size {
        8 => *(object.ptr as *const u64),
        4 => *(object.ptr as *const u32),
        2 => *(object.ptr as *const u16),
        1 => *(object.ptr as *const u8),
      };
    }
    return JsonResult::Ok(val);
  } else if Type::is_bool(object.type) {
    val.type = JsonValueType::Boolean;
    val.boolean = *(object.ptr as *const bool);
    return JsonResult::Ok(val);
  }
  return JsonResult::Err(format("Unsupported type :: %", (object.type.name, ), FormatOptions::default()));
}

serialize_struct :: fn(object: any) -> JsonResult {
  val := JsonValue::new();
  val.type = JsonValueType::Object;
  val.object = .{};
  for field in object.type.fields {
    result := serialize_any(any.{ptr: field.get(object.ptr), type: field.type});
    if result.is_err() {
      return result;
    }
    val.object.insert(String::from(field.name), result.unwrap());
  }
  return JsonResult::Ok(val);
}

serialize_array :: fn(object: any) -> JsonResult {
  val := JsonValue::new();
  val.type = JsonValueType::Array;
  val.array = .{};
  for element in object.type.elements(object.ptr as *const u8) {
    result := serialize_any(element);
    if result.is_err() then return result;
    val.array.push(result.unwrap());
  }
  return JsonResult::Ok(val);
}

serialize_tuple :: fn(object: any) -> JsonResult {
  val := JsonValue::new();
  val.type = JsonValueType::Object;
  val.array = .{};
  mut index := 0;
  for element in object.type.tuple_elements(object.ptr as *mut u8) {
    result := serialize_any(element);
    if result.is_err() then return result;
    val.object.insert(to_string(index), result.unwrap());
    index += 1;
  }
  return JsonResult::Ok(val);
}

serialize_any :: fn(object: any) -> JsonResult {
  if Type::implements(object.type, "Serializable") {
    dynamic := new_dyn_serializable(object);
    return dynamic.serialize();
  }

  if Type::has_no_extension(object.type) {
    if object.type.id == #typeid(str) {
      val := JsonValue::new();
      val.type = JsonValueType::String;
      the_str := *(object.ptr as *const str);
      val.string = String::from(the_str);
      return JsonResult::Ok(val);
    } else if object.type.id == #typeid(String) {
      val := JsonValue::new();
      val.type = JsonValueType::String;
      // We clone here to guarantee we don't have to rely on the original object's lifetime.
      val.string = (object.ptr as *const String).clone(); 
      return JsonResult::Ok(val);
    } if object.type.id == #typeid(*const u8) {
      val := JsonValue::new();
      val.type = JsonValueType::String;
      val.string = String::from_ptr(*(object.ptr as *const *const u8));
      return JsonResult::Ok(val);
    } else if Type::is_scalar(object.type) {
      return serialize_scalar(object);
    } else if Type::is_struct(object.type) {
      return serialize_struct(object);
    } else if Type::is_tuple(object.type) {
      return serialize_tuple(object);
    }
  } else if Type::is_array(object.type) {
    return serialize_array(object);
  }
  return JsonResult::Err(format("Unsupported type :: '%'", (object.type.name, ), FormatOptions::default()));
}

serialize :: fn!<T>(mut object: T) -> JsonResult {
  return serialize_any(any::from(&mut object));
}

serialize_iterator :: fn!<It, V>(obj: It) -> JsonResult where It: Iterator!<V> {
  value : *mut JsonValue = JsonValue::new();
  value.type = JsonValueType::Array;
  for v in obj {
    result := serialize(v);
    if result.is_err() {
      return result.propagate();
    }
    value.array.push(result.unwrap());
  }
  return JsonResult::Ok(value);
}

