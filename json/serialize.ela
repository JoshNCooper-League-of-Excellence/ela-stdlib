serialize_scalar :: fn(object: any) -> JsonResult {
  val := new(JsonValue.{});
  if Type::is_float(object.type) {
    val.type = JsonValueType::Number;
    if object.type.size == 8 {
      val.number = *(object.ptr as *const f64);
    } else {
      val.number = *(object.ptr as *const f32);
    }
    return JsonResult::Ok(val);
  } else if Type::is_integral(object.type) {
    val.type = JsonValueType::Number;
    if Type::is_signed(object.type) {
      val.number =switch object.type.size {
        8 => *(object.ptr as *const s64),
        4 => *(object.ptr as *const s32),
        2 => *(object.ptr as *const s16),
        1 => *(object.ptr as *const s8),
      };
    } else {
      val.number = switch object.type.size {
        8 => *(object.ptr as *const u64),
        4 => *(object.ptr as *const u32),
        2 => *(object.ptr as *const u16),
        1 => *(object.ptr as *const u8),
      };
    }
    return JsonResult::Ok(val);
  } else if Type::is_bool(object.type) {
    val.type = JsonValueType::Boolean;
    val.boolean = *(object.ptr as *const bool);
    return JsonResult::Ok(val);
  }
  return JsonResult::Err(format("Unsupported type :: %", (object.type.name, ), FormatOptions::default()));
}

serialize_any :: fn(object: any) -> JsonResult;

serialize_struct :: fn(object: any) -> JsonResult {
  val := new(JsonValue.{});
  val.type = JsonValueType::Object;
  val.object = .{};
  for field in object.type.fields {
    result := serialize_any(any.{ptr: field.get(object.ptr), type: field.type});
    if result.is_err() {
      return result;
    }
    val.object.insert(String::from(field.name), result.unwrap());
  }
  return JsonResult::Ok(val);
}

serialize_array :: fn(object: any) -> JsonResult {
  val := new(JsonValue.{});
  val.type = JsonValueType::Array;
  val.array = .{};
  for element in object.type.elements(object.ptr as *const u8) {
    result := serialize_any(element);
    if result.is_err() then return result;
    val.array.push(result.unwrap());
  }
  return JsonResult::Ok(val);
}

serialize_any :: fn(object: any) -> JsonResult {
  if Type::has_no_extension(object.type) {
    if object.type.id == #typeid(*const u8) {
      val := new(JsonValue.{});
      val.type = JsonValueType::String;
      val.string = String::from_ptr(*(object.ptr as *const *const u8));
      return JsonResult::Ok(val);
    } else if Type::is_scalar(object.type) {
      return serialize_scalar(object);
    } else if Type::is_struct(object.type) {
      return serialize_struct(object);
    }
  } else if Type::is_array(object.type) {
    return serialize_array(object);
  }
  return JsonResult::Err(format("Unsupported type :: '%'", (object.type.name, ), FormatOptions::default()));
}

serialize :: fn!<T>(mut object: T) -> JsonResult {
  return serialize_any(any::from(&mut object));
}

// deserialize :: fn(val: JsonValue*, object: any) -> JsonResult;

// deserialize_struct :: fn(val: JsonValue*, object: any) -> JsonResult {
//   for field in val.object {
//     struct_field := Type::get_field(type, field.key);
//     if !struct_field {
//       set_error(format("Could not find field % in type %", {any::new(&field.key), any::new(&type.name)}))
//       return JsonResult::ERROR;
//     }
//     err := deserialize(field.value, object.ptr as u8* + struct_field.offset, struct_field.type);
//     if err {
//       return err;
//     }
//   }
//   return {};
// }

// deserialize_array :: fn(val: JsonValue*, object: any) -> JsonResult {
//   i := 0;
//   ptr: void* = malloc(type.element_type.size);
//   for elem in val.as_array() {
//     memset(ptr, 0, type.element_type.size);
//     err := deserialize(elem, ptr, type.element_type);
//     if err {
//       return err;
//     }
//     memcpy(object.ptr as u8* + (i * type.element_type.size), ptr, type.element_type.size);
//     ++i;
//   }
//   free(ptr);
//   return {};
// }

// deserialize_scalar :: fn(val: JsonValue*, object: any) -> JsonResult {
//   if (!Type::has_no_extension(object.type)) {
//     // strdup this literal because the error handler will free on overwrite.
//     set_error(strdup("Unable to deserialize into pointer type with 'deserialize_scalar'"));
//     return JsonResult::ERROR;
//   }
//   if Type::is_bool(object.type) {
//     *(object.ptr as *const bool) = val.as_boolean();
//   } else if (Type::is_float(object.type)) {
//     if (type.size == 8) {
//       *(object.ptr as *const f64) = val.as_number();
//     } else {
//       *(object.ptr as *const f32) = val.as_number() as f32;
//     }
//   } else if (Type::is_integral(object.type)) {
//     is_signed := Type::is_signed(object.type);
//     switch type.size {
//         8: {
//           if is_signed {
//             *(object.ptr as *const s64) = val.as_number();
//           } else {
//             *(object.ptr as *const u64) = val.as_number() as u64;
//           }
//         }
//         4: {
//           if is_signed {
//             *(object.ptr as *const s32) = val.as_number() as s32;
//           } else {
//             *(object.ptr as *const u32) = val.as_number() as u32;
//           }
//         }
//         2: {
//           if is_signed {
//             *(object.ptr as *const s16) = val.as_number() as s16;
//           } else {
//             *(object.ptr as *const u16) = val.as_number() as u16;
//           }
//         }
//         1: {
//           if is_signed {
//             *(object.ptr as *const s8) = val.as_number() as s8;
//           } else {
//             *(object.ptr as *const u8) = val.as_number() as u8;
//           }
//         }
//     }
//   } else if (Type::is_string(object.type)) {
//     *(object.ptr as u8*const *) = val.as_string();
//   } else {
//     set_error(format("Unable to deserialize into type %", {any::new(&type.name)}));
//     return JsonResult::ERROR;
//   }
//   return {};
// }

// deserialize :: fn(val: JsonValue*, object: any) -> JsonResult {
//   if val.is_string() {
//     if type.id == #typeid(*const u8) {
//       *(object.ptr as u8*const *) = val.as_string();
//       return {};
//     } else {
//       set_error(format("Type mismatch: u8* to %", {any::new(&type.name)}));
//       return JsonResult::ERROR;
//     }
//   } else if val.is_object() {
//     if Type::is_struct(object.type) {
//       return deserialize_struct(val, object);
//     } else {
//       set_error(format("Type mismatch: object to %", {any::new(&type.name)}));
//       return JsonResult::ERROR;
//     }
//   } else if val.is_array() {
//     return deserialize_array(val, object);
//   }
//   return deserialize_scalar(val, object);
// }
