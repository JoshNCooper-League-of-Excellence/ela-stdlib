/* 
  Since @Cooper-Pilot's hashmap implementation got lost from the git,
  this is just a reallly crappy hashmap I had chat gpt write pretty quickly.

  This should be replaced with one that is made with attention to detail and performaance in mind.
*/

struct Map!<Key, Value> {
  buckets: List!<List!<(Key, Value)>>,
  length: u64,
}

impl!<Key, Value> Map!<Key, Value> where Key: Hash {
  alias Pair :: (Key, Value);
  fn new() -> #self {
    const INITIAL_CAPACITY := 16;
    mut buckets: List!<List!<Pair>>;
    buckets.initialize(INITIAL_CAPACITY);
    return .{
      buckets: buckets,
      length: 0,
    };
  }

  fn insert(*mut self, key: Key, value: Value) {
    if self.buckets.length == 0 {
      self.buckets.initialize(16);
    }

    idx := key.hash() % self.buckets.length;
    for pair in self.buckets[idx].iter_mut() {
      if pair.0 == key {
        pair.1 = value;
        return;
      }
    }
    self.buckets[idx].push((key, value));
    self.length += 1;
  }

  fn get(*const self, search_key: Key) -> Option!<Value> {
    if self.buckets.length == 0 {
      return None();
    }

    idx := search_key.hash() % self.buckets.length;

    for pair in self.buckets[idx].iter() {
      if pair.0 == search_key then
        return Some(pair.1);
    }

    return None();
  }
  
  fn get_mut(*mut self, search_key: Key) -> Option!<*mut Value> {
    if self.buckets.length == 0 {
      return None();
    }

    idx := search_key.hash() % self.buckets.length;

    for pair in self.buckets[idx].iter() {
      if pair.0 == search_key then
        return Some(&mut pair.1);
    }

    return None();
  }

  fn remove(*mut self, key: Key) -> bool {
    if self.buckets.length == 0 {
      return false;
    }
    idx := key.hash() % self.buckets.length;
    for i in 0..self.buckets[idx].length {
      if self.buckets[idx][i].0 == key {
        self.buckets[idx].remove_at(i);
        self.length -= 1;
        return true;
      }
    }
    return false;
  }

  fn contains(*const self, key: Key) -> bool {
    return self.get(key).is_some();
  }

  fn clear(*mut self) {
    for bucket in self.buckets.iter_mut() {
      bucket.clear();
    }
    self.length = 0;
  }
}

struct MapIter!<Key, Value> {
  map: *const Map!<Key, Value>,
  bucket_index: u64,
  pair_index: u64,
}

struct MapIterMut!<Key, Value> {
  map: *const Map!<Key, Value>,
  bucket_index: u64,
  pair_index: u64,
}


impl!<Key, Value> Iterator!<(Key, Value)> for MapIter!<Key, Value> {
  fn next(*mut self) -> Option!<(Key, Value)> {
    while self.bucket_index < self.map.buckets.length {
      if self.pair_index < self.map.buckets[self.bucket_index].length {
        pair := self.map.buckets[self.bucket_index][self.pair_index];
        self.pair_index += 1;
        return Some(pair);
      } else {
        self.bucket_index += 1;
        self.pair_index = 0;
      }
    }
    return None();
  }
}

impl!<Key, Value> Iterator!<*mut (Key, Value)> for MapIterMut!<Key, Value> {
  fn next(*mut self) -> Option!<*mut (Key, Value)> {
    while self.bucket_index < self.map.buckets.length {
      if self.pair_index < self.map.buckets[self.bucket_index].length {
        self.pair_index += 1;
        return Some(&mut self.map.buckets[self.bucket_index][self.pair_index-1]);
      } else {
        self.bucket_index += 1;
        self.pair_index = 0;
      }
    }
    return None();
  }
}

impl!<Key, Value> Iterable for Map!<Key, Value> {
  fn iter(*const self) -> MapIter!<Key, Value> {
    return .{
      map: self,
      bucket_index: 0,
      pair_index: 0,
    };
  }

  fn iter_mut(*mut self) -> MapIterMut!<Key, Value> {
    return .{
      map: self
      bucket_index: 0,
      pair_index: 0,
    };
  }
}

impl!<Key, Value> Init!<(Key, Value)> for Map!<Key, Value> {
  fn init(init_list: InitList!<(Key, Value)>) -> #self {
    mut self: #self;
    for key, value in init_list {
      self.insert(key, value);
    }
    return self;
  } 
}


impl!<Key, Value> Destroy for Map!<Key, Value> {
  fn destroy(*mut self, recursive: bool = true) {
    // where Key: Destroy, 
    //       Value: Destroy {
    //   if recursive {
    //     for key, value in *self {
    //       key.destroy();
    //       value.destroy();
    //     }
    //   }
    // } else where Key: Destroy {
    //   if recursive {
    //     for key, _ in *self {
    //       key.destroy();
    //     }
    //   }
    // } else where Value: Destroy {
    //   if recursive {
    //     for _, value in *self {
    //       value.destroy();
    //     }
    //   }
    // }

    for bucket in self.buckets {
      bucket.destroy();
    }
    self.buckets.destroy();
    self.length = 0;
  }
}

impl!<Key, Value> Map!<Key, Value> {
  fn length(self) -> u64 {
    // TODO: make this cheaper.
    mut length := 0;
    for k,v in self {
      length++;
    }
    return length;
  }
}


// This should be in formatters/map.ela.
import fmt::*;
impl!<Key, Value> Format for Map!<Key, Value> {
  fn format(*const self, formatter: *mut Formatter) { 
    key_type := typeof(Key);
    value_type := typeof(Value);
    formatter.writer.appendf("Map!<%, %>", (key_type.name, value_type.name), formatter.options.unquoted());
    formatter.writer.append(" {");

    if formatter.options.indented {
      formatter.writer.append("\n  ");
    }

    mut first := true;
    for key, value in self.iter() {
      if !first {
        if formatter.options.indented {
          formatter.writer.append(",\n ");
        } else {
          formatter.writer.append(",");
        }
      }
      first = false;

      key_any : any = any.{
        ptr: &mut key,
        type: key_type,
      };
      value_any : any = any.{
        ptr: &mut value,
        type: value_type,
      };

      formatter.writer.append_byte(' ');
      format_any(key_any, formatter);
      formatter.writer.append(": ");
      format_any(value_any, formatter);
    }

    if formatter.options.indented {
      formatter.writer.append("\n}");
    } else {
      formatter.writer.append("}");
    }
  }
}
