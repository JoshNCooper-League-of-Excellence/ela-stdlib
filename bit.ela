//module bit;
// This will only work on POD structs & scalars!
// there is much undefined behaviour here, anything with pointers
// will behave very poorly.
fn to_bytes_le!<T>(v: T, allocator: dyn Allocator = get_global_allocator()) -> List!<u8> {
  n := size_of(T);
  mut out := List!<u8>::with_length(n, allocator);
  std::c::memcpy(&out[0], &v, n);
  return out;
}

// returns None if too few bytes were present to create this type.
fn from_bytes_le!<T>(bytes: [u8]) -> Option!<T> {
  if (bytes.length < size_of(T)) {
    return None();
  }
  mut v: T;
  std::c::memcpy(&mut v, bytes.data, size_of(T));
  return Some(v);
}
