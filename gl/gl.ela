#c_flags "-lGLEW -lGL -lglfw -lm"

extern fn glewInit() -> bool;
extern fn glGenVertexArrays(n: s32, arrays: *const u32);
extern fn glBindVertexArray(array: s32);
extern fn glGenBuffers(n_buf: s32, buf: *const u32);
extern fn glBindBuffer(type: s32, buf: u32);
extern fn glBufferData(target: s32, size: s64, data: *const void, usage: s32);
extern fn glEnableVertexAttribArray(index: s32);
extern fn glVertexAttribPointer(index: s32, size: s64, type: s32, normalized: bool, stride: s64, pointer: *const void);
extern fn glVertexAttribIPointer(index: s32, size: s32, type: s32, stride: s64, pointer: *const void);
extern fn glVertexAttribDivisor(index: u32, divisor: u32);

extern fn glCreateShader(type: u32) -> u32;
extern fn glShaderSource(shader: u32, count: s32, s: *const *const u8, length: *const s32);
extern fn glCompileShader(shader: u32);
extern fn glGetShaderiv(shader: u32, pname: u32, params: *const s32);
extern fn glGetShaderInfoLog(shader: u32, maxLength: s32, length: *const s32, infoLog: *const u8);
extern fn glCreateProgram() -> u32;
extern fn glAttachShader(program: u32, shader: u32);
extern fn glLinkProgram(program: u32);
extern fn glGetProgramiv(program: u32, pname: u32, params: *const s32);
extern fn glGetProgramInfoLog(program: u32, maxLength: s32, length: *const s32, infoLog: *const u8);
extern fn glUseProgram(program: u32);
extern fn glDeleteShader(shader: s32);
extern fn glDeleteProgram(shader: s32);
extern fn glGetUniformLocation(program: u32, name: *const u8) -> s32;
extern fn glUniform4fv(location: s32, count: s32, value: *const f32);
extern fn glUniform3fv(location: s32, count: s32, value: *const f32);
extern fn glUniform2fv(location: s32, count: s32, value: *const f32);
extern fn glUniform1f(location: s32, v0: f32);
extern fn glUniformMatrix4fv(location: s32, count: s32, transpose: bool, value: *const f32);
alias GLenum :: u32;
alias GLboolean :: u8;
alias GLbitfield :: u32;
alias GLvoid :: void;
alias GLbyte :: s8;
alias GLshort :: s16;
alias GLint :: s32;
alias GLubyte :: u8;
alias GLushort :: u16;
alias GLuint :: u32;
alias GLsizei :: s32;
alias GLfloat :: f32;
alias GLclampf :: f32;
alias GLdouble :: f64;
alias GLclampd :: f64;
extern fn glClearIndex(c: GLfloat) -> void;
extern fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) -> void;
extern fn glClear(mask: GLbitfield) -> void;
extern fn glIndexMask(mask: GLuint) -> void;
extern fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> void;
extern fn glAlphaFunc(func: GLenum, ref: GLclampf) -> void;
extern fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) -> void;
extern fn glLogicOp(opcode: GLenum) -> void;
extern fn glCullFace(mode: GLenum) -> void;
extern fn glFrontFace(mode: GLenum) -> void;
extern fn glPointSize(size: GLfloat) -> void;
extern fn glLineWidth(width: GLfloat) -> void;
extern fn glLineStipple(factor: GLint, pattern: GLushort) -> void;
extern fn glPolygonMode(face: GLenum, mode: GLenum) -> void;
extern fn glPolygonOffset(factor: GLfloat, units: GLfloat) -> void;
extern fn glPolygonStipple(mask: *const GLubyte) -> void;
extern fn glGetPolygonStipple(mask: *mut GLubyte) -> void;
extern fn glEdgeFlag(flag: GLboolean) -> void;
extern fn glEdgeFlagv(flag: *const GLboolean) -> void;
extern fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
extern fn glClipPlane(plane: GLenum, equation: *const GLdouble) -> void;
extern fn glGetClipPlane(plane: GLenum, equation: *mut GLdouble) -> void;
extern fn glDrawBuffer(mode: GLenum) -> void;
extern fn glReadBuffer(mode: GLenum) -> void;
extern fn glEnable(cap: GLenum) -> void;
extern fn glDisable(cap: GLenum) -> void;
extern fn glIsEnabled(cap: GLenum) -> GLboolean;
extern fn glEnableClientState(cap: GLenum) -> void;
extern fn glDisableClientState(cap: GLenum) -> void;
extern fn glGetBooleanv(pname: GLenum, params: *mut GLboolean) -> void;
extern fn glGetDoublev(pname: GLenum, params: *mut GLdouble) -> void;
extern fn glGetFloatv(pname: GLenum, params: *mut GLfloat) -> void;
extern fn glGetIntegerv(pname: GLenum, params: *mut GLint) -> void;
extern fn glPushAttrib(mask: GLbitfield) -> void;
extern fn glPopAttrib() -> void;
extern fn glPushClientAttrib(mask: GLbitfield) -> void;
extern fn glPopClientAttrib() -> void;
extern fn glRenderMode(mode: GLenum) -> GLint;
extern fn glGetError() -> GLenum;
extern fn glGetString(name: GLenum) -> *const GLubyte;
extern fn glFinish() -> void;
extern fn glFlush() -> void;
extern fn glHint(target: GLenum, mode: GLenum) -> void;
extern fn glClearDepth(depth: GLclampd) -> void;
extern fn glDepthFunc(func: GLenum) -> void;
extern fn glDepthMask(flag: GLboolean) -> void;
extern fn glDepthRange(near_val: GLclampd, far_val: GLclampd) -> void;
extern fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void;
extern fn glAccum(op: GLenum, value: GLfloat) -> void;
extern fn glMatrixMode(mode: GLenum) -> void;
extern fn glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble) -> void;
extern fn glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble) -> void;
extern fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
extern fn glPushMatrix() -> void;
extern fn glPopMatrix() -> void;
extern fn glLoadIdentity() -> void;
extern fn glLoadMatrixd(m: *const GLdouble) -> void;
extern fn glLoadMatrixf(m: *const GLfloat) -> void;
extern fn glMultMatrixd(m: *const GLdouble) -> void;
extern fn glMultMatrixf(m: *const GLfloat) -> void;
extern fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> void;
extern fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> void;
extern fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble) -> void;
extern fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat) -> void;
extern fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble) -> void;
extern fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat) -> void;
extern fn glIsList(list: GLuint) -> GLboolean;
extern fn glDeleteLists(list: GLuint, range: GLsizei) -> void;
extern fn glGenLists(range: GLsizei) -> GLuint;
extern fn glNewList(list: GLuint, mode: GLenum) -> void;
extern fn glEndList() -> void;
extern fn glCallList(list: GLuint) -> void;
extern fn glCallLists(n: GLsizei, type: GLenum, lists: *const GLvoid) -> void;
extern fn glListBase(base: GLuint) -> void;
extern fn glBegin(mode: GLenum) -> void;
extern fn glEnd() -> void;
extern fn glVertex2d(x: GLdouble, y: GLdouble) -> void;
extern fn glVertex2f(x: GLfloat, y: GLfloat) -> void;
extern fn glVertex2i(x: GLint, y: GLint) -> void;
extern fn glVertex2s(x: GLshort, y: GLshort) -> void;
extern fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble) -> void;
extern fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat) -> void;
extern fn glVertex3i(x: GLint, y: GLint, z: GLint) -> void;
extern fn glVertex3s(x: GLshort, y: GLshort, z: GLshort) -> void;
extern fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void;
extern fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void;
extern fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint) -> void;
extern fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void;
extern fn glVertex2dv(v: *const GLdouble) -> void;
extern fn glVertex2fv(v: *const GLfloat) -> void;
extern fn glVertex2iv(v: *const GLint) -> void;
extern fn glVertex2sv(v: *const GLshort) -> void;
extern fn glVertex3dv(v: *const GLdouble) -> void;
extern fn glVertex3fv(v: *const GLfloat) -> void;
extern fn glVertex3iv(v: *const GLint) -> void;
extern fn glVertex3sv(v: *const GLshort) -> void;
extern fn glVertex4dv(v: *const GLdouble) -> void;
extern fn glVertex4fv(v: *const GLfloat) -> void;
extern fn glVertex4iv(v: *const GLint) -> void;
extern fn glVertex4sv(v: *const GLshort) -> void;
extern fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) -> void;
extern fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) -> void;
extern fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) -> void;
extern fn glNormal3i(nx: GLint, ny: GLint, nz: GLint) -> void;
extern fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort) -> void;
extern fn glNormal3bv(v: *const GLbyte) -> void;
extern fn glNormal3dv(v: *const GLdouble) -> void;
extern fn glNormal3fv(v: *const GLfloat) -> void;
extern fn glNormal3iv(v: *const GLint) -> void;
extern fn glNormal3sv(v: *const GLshort) -> void;
extern fn glIndexd(c: GLdouble) -> void;
extern fn glIndexf(c: GLfloat) -> void;
extern fn glIndexi(c: GLint) -> void;
extern fn glIndexs(c: GLshort) -> void;
extern fn glIndexub(c: GLubyte) -> void;
extern fn glIndexdv(c: *const GLdouble) -> void;
extern fn glIndexfv(c: *const GLfloat) -> void;
extern fn glIndexiv(c: *const GLint) -> void;
extern fn glIndexsv(c: *const GLshort) -> void;
extern fn glIndexubv(c: *const GLubyte) -> void;
extern fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) -> void;
extern fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) -> void;
extern fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) -> void;
extern fn glColor3i(red: GLint, green: GLint, blue: GLint) -> void;
extern fn glColor3s(red: GLshort, green: GLshort, blue: GLshort) -> void;
extern fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) -> void;
extern fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint) -> void;
extern fn glColor3us(red: GLushort, green: GLushort, blue: GLushort) -> void;
extern fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) -> void;
extern fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) -> void;
extern fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void;
extern fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> void;
extern fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) -> void;
extern fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) -> void;
extern fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> void;
extern fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) -> void;
extern fn glColor3bv(v: *const GLbyte) -> void;
extern fn glColor3dv(v: *const GLdouble) -> void;
extern fn glColor3fv(v: *const GLfloat) -> void;
extern fn glColor3iv(v: *const GLint) -> void;
extern fn glColor3sv(v: *const GLshort) -> void;
extern fn glColor3ubv(v: *const GLubyte) -> void;
extern fn glColor3uiv(v: *const GLuint) -> void;
extern fn glColor3usv(v: *const GLushort) -> void;
extern fn glColor4bv(v: *const GLbyte) -> void;
extern fn glColor4dv(v: *const GLdouble) -> void;
extern fn glColor4fv(v: *const GLfloat) -> void;
extern fn glColor4iv(v: *const GLint) -> void;
extern fn glColor4sv(v: *const GLshort) -> void;
extern fn glColor4ubv(v: *const GLubyte) -> void;
extern fn glColor4uiv(v: *const GLuint) -> void;
extern fn glColor4usv(v: *const GLushort) -> void;
extern fn glTexCoord1d(s: GLdouble) -> void;
extern fn glTexCoord1f(s: GLfloat) -> void;
extern fn glTexCoord1i(s: GLint) -> void;
extern fn glTexCoord1s(s: GLshort) -> void;
extern fn glTexCoord2d(s: GLdouble, t: GLdouble) -> void;
extern fn glTexCoord2f(s: GLfloat, t: GLfloat) -> void;
extern fn glTexCoord2i(s: GLint, t: GLint) -> void;
extern fn glTexCoord2s(s: GLshort, t: GLshort) -> void;
extern fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) -> void;
extern fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) -> void;
extern fn glTexCoord3i(s: GLint, t: GLint, r: GLint) -> void;
extern fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort) -> void;
extern fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> void;
extern fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> void;
extern fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) -> void;
extern fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> void;
extern fn glTexCoord1dv(v: *const GLdouble) -> void;
extern fn glTexCoord1fv(v: *const GLfloat) -> void;
extern fn glTexCoord1iv(v: *const GLint) -> void;
extern fn glTexCoord1sv(v: *const GLshort) -> void;
extern fn glTexCoord2dv(v: *const GLdouble) -> void;
extern fn glTexCoord2fv(v: *const GLfloat) -> void;
extern fn glTexCoord2iv(v: *const GLint) -> void;
extern fn glTexCoord2sv(v: *const GLshort) -> void;
extern fn glTexCoord3dv(v: *const GLdouble) -> void;
extern fn glTexCoord3fv(v: *const GLfloat) -> void;
extern fn glTexCoord3iv(v: *const GLint) -> void;
extern fn glTexCoord3sv(v: *const GLshort) -> void;
extern fn glTexCoord4dv(v: *const GLdouble) -> void;
extern fn glTexCoord4fv(v: *const GLfloat) -> void;
extern fn glTexCoord4iv(v: *const GLint) -> void;
extern fn glTexCoord4sv(v: *const GLshort) -> void;
extern fn glRasterPos2d(x: GLdouble, y: GLdouble) -> void;
extern fn glRasterPos2f(x: GLfloat, y: GLfloat) -> void;
extern fn glRasterPos2i(x: GLint, y: GLint) -> void;
extern fn glRasterPos2s(x: GLshort, y: GLshort) -> void;
extern fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) -> void;
extern fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) -> void;
extern fn glRasterPos3i(x: GLint, y: GLint, z: GLint) -> void;
extern fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort) -> void;
extern fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void;
extern fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void;
extern fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) -> void;
extern fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void;
extern fn glRasterPos2dv(v: *const GLdouble) -> void;
extern fn glRasterPos2fv(v: *const GLfloat) -> void;
extern fn glRasterPos2iv(v: *const GLint) -> void;
extern fn glRasterPos2sv(v: *const GLshort) -> void;
extern fn glRasterPos3dv(v: *const GLdouble) -> void;
extern fn glRasterPos3fv(v: *const GLfloat) -> void;
extern fn glRasterPos3iv(v: *const GLint) -> void;
extern fn glRasterPos3sv(v: *const GLshort) -> void;
extern fn glRasterPos4dv(v: *const GLdouble) -> void;
extern fn glRasterPos4fv(v: *const GLfloat) -> void;
extern fn glRasterPos4iv(v: *const GLint) -> void;
extern fn glRasterPos4sv(v: *const GLshort) -> void;
extern fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) -> void;
extern fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) -> void;
extern fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) -> void;
extern fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) -> void;
extern fn glRectdv(v1: *const GLdouble, v2: *const GLdouble) -> void;
extern fn glRectfv(v1: *const GLfloat, v2: *const GLfloat) -> void;
extern fn glRectiv(v1: *const GLint, v2: *const GLint) -> void;
extern fn glRectsv(v1: *const GLshort, v2: *const GLshort) -> void;
extern fn glVertexPointer(size: GLint, type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
extern fn glNormalPointer(type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
extern fn glColorPointer(size: GLint, type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
extern fn glIndexPointer(type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
extern fn glTexCoordPointer(size: GLint, type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
extern fn glEdgeFlagPointer(stride: GLsizei, ptr: *const GLvoid) -> void;
extern fn glGetPointerv(pname: GLenum, params: *mut *mut GLvoid) -> void;
extern fn glArrayElement(i: GLint) -> void;
extern fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) -> void;
extern fn glDrawElements(mode: GLenum, count: GLsizei, type: GLenum, indices: *const GLvoid) -> void;
extern fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: *const GLvoid) -> void;
extern fn glShadeModel(mode: GLenum) -> void;
extern fn glLightf(light: GLenum, pname: GLenum, param: GLfloat) -> void;
extern fn glLighti(light: GLenum, pname: GLenum, param: GLint) -> void;
extern fn glLightfv(light: GLenum, pname: GLenum, params: *const GLfloat) -> void;
extern fn glLightiv(light: GLenum, pname: GLenum, params: *const GLint) -> void;
extern fn glGetLightfv(light: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
extern fn glGetLightiv(light: GLenum, pname: GLenum, params: *mut GLint) -> void;
extern fn glLightModelf(pname: GLenum, param: GLfloat) -> void;
extern fn glLightModeli(pname: GLenum, param: GLint) -> void;
extern fn glLightModelfv(pname: GLenum, params: *const GLfloat) -> void;
extern fn glLightModeliv(pname: GLenum, params: *const GLint) -> void;
extern fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat) -> void;
extern fn glMateriali(face: GLenum, pname: GLenum, param: GLint) -> void;
extern fn glMaterialfv(face: GLenum, pname: GLenum, params: *const GLfloat) -> void;
extern fn glMaterialiv(face: GLenum, pname: GLenum, params: *const GLint) -> void;
extern fn glGetMaterialfv(face: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
extern fn glGetMaterialiv(face: GLenum, pname: GLenum, params: *mut GLint) -> void;
extern fn glColorMaterial(face: GLenum, mode: GLenum) -> void;
extern fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat) -> void;
extern fn glPixelStoref(pname: GLenum, param: GLfloat) -> void;
extern fn glPixelStorei(pname: GLenum, param: GLint) -> void;
extern fn glPixelTransferf(pname: GLenum, param: GLfloat) -> void;
extern fn glPixelTransferi(pname: GLenum, param: GLint) -> void;
extern fn glPixelMapfv(map: GLenum, mapsize: GLsizei, values: *const GLfloat) -> void;
extern fn glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: *const GLuint) -> void;
extern fn glPixelMapusv(map: GLenum, mapsize: GLsizei, values: *const GLushort) -> void;
extern fn glGetPixelMapfv(map: GLenum, values: *mut GLfloat) -> void;
extern fn glGetPixelMapuiv(map: GLenum, values: *mut GLuint) -> void;
extern fn glGetPixelMapusv(map: GLenum, values: *mut GLushort) -> void;
extern fn glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *const GLubyte) -> void;
extern fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *mut GLvoid) -> void;
extern fn glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
extern fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type: GLenum) -> void;
extern fn glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) -> void;
extern fn glStencilMask(mask: GLuint) -> void;
extern fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) -> void;
extern fn glClearStencil(s: GLint) -> void;
extern fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble) -> void;
extern fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat) -> void;
extern fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint) -> void;
extern fn glTexGendv(coord: GLenum, pname: GLenum, params: *const GLdouble) -> void;
extern fn glTexGenfv(coord: GLenum, pname: GLenum, params: *const GLfloat) -> void;
extern fn glTexGeniv(coord: GLenum, pname: GLenum, params: *const GLint) -> void;
extern fn glGetTexGendv(coord: GLenum, pname: GLenum, params: *mut GLdouble) -> void;
extern fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
extern fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: *mut GLint) -> void;
extern fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat) -> void;
extern fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint) -> void;
extern fn glTexEnvfv(target: GLenum, pname: GLenum, params: *const GLfloat) -> void;
extern fn glTexEnviv(target: GLenum, pname: GLenum, params: *const GLint) -> void;
extern fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
extern fn glGetTexEnviv(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
extern fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) -> void;
extern fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) -> void;
extern fn glTexParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat) -> void;
extern fn glTexParameteriv(target: GLenum, pname: GLenum, params: *const GLint) -> void;
extern fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
extern fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
extern fn glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: *mut GLfloat) -> void;
extern fn glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: *mut GLint) -> void;
extern fn glTexImage1D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
extern fn glTexImage2D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
extern fn glGetTexImage(target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *mut GLvoid) -> void;
extern fn glGenTextures(n: GLsizei, textures: *mut GLuint) -> void;
extern fn glDeleteTextures(n: GLsizei, textures: *const GLuint) -> void;
extern fn glBindTexture(target: GLenum, texture: GLuint) -> void;
extern fn glPrioritizeTextures(n: GLsizei, textures: *const GLuint, priorities: *const GLclampf) -> void;
extern fn glAreTexturesResident(n: GLsizei, textures: *const GLuint, residences: *mut GLboolean) -> GLboolean;
extern fn glIsTexture(texture: GLuint) -> GLboolean;
extern fn glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
extern fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
extern fn glCopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> void;
extern fn glCopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> void;
extern fn glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> void;
extern fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
extern fn glMap1d(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *const GLdouble) -> void;
extern fn glMap1f(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *const GLfloat) -> void;
extern fn glMap2d(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *const GLdouble) -> void;
extern fn glMap2f(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *const GLfloat) -> void;
extern fn glGetMapdv(target: GLenum, query: GLenum, v: *mut GLdouble) -> void;
extern fn glGetMapfv(target: GLenum, query: GLenum, v: *mut GLfloat) -> void;
extern fn glGetMapiv(target: GLenum, query: GLenum, v: *mut GLint) -> void;
extern fn glEvalCoord1d(u: GLdouble) -> void;
extern fn glEvalCoord1f(u: GLfloat) -> void;
extern fn glEvalCoord1dv(u: *const GLdouble) -> void;
extern fn glEvalCoord1fv(u: *const GLfloat) -> void;
extern fn glEvalCoord2d(u: GLdouble, v: GLdouble) -> void;
extern fn glEvalCoord2f(u: GLfloat, v: GLfloat) -> void;
extern fn glEvalCoord2dv(u: *const GLdouble) -> void;
extern fn glEvalCoord2fv(u: *const GLfloat) -> void;
extern fn glMapGrid1d(un: GLint, u1: GLdouble, u2: GLdouble) -> void;
extern fn glMapGrid1f(un: GLint, u1: GLfloat, u2: GLfloat) -> void;
extern fn glMapGrid2d(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) -> void;
extern fn glMapGrid2f(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) -> void;
extern fn glEvalPoint1(i: GLint) -> void;
extern fn glEvalPoint2(i: GLint, j: GLint) -> void;
extern fn glEvalMesh1(mode: GLenum, i1: GLint, i2: GLint) -> void;
extern fn glEvalMesh2(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) -> void;
extern fn glFogf(pname: GLenum, param: GLfloat) -> void;
extern fn glFogi(pname: GLenum, param: GLint) -> void;
extern fn glFogfv(pname: GLenum, params: *const GLfloat) -> void;
extern fn glFogiv(pname: GLenum, params: *const GLint) -> void;
extern fn glFeedbackBuffer(size: GLsizei, type: GLenum, buffer: *mut GLfloat) -> void;
extern fn glPassThrough(token: GLfloat) -> void;
extern fn glSelectBuffer(size: GLsizei, buffer: *mut GLuint) -> void;
extern fn glInitNames() -> void;
extern fn glLoadName(name: GLuint) -> void;
extern fn glPushName(name: GLuint) -> void;
extern fn glPopName() -> void;
extern fn glDrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *const GLvoid) -> void;
extern fn glTexImage3D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
extern fn glTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
extern fn glCopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
alias PFNGLDRAWRANGEELEMENTSPROC :: fn*(GLenum, GLuint, GLuint, GLsizei, GLenum, *const GLvoid) -> void;
alias PFNGLTEXIMAGE3DPROC :: fn*(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *const GLvoid) -> void;
alias PFNGLTEXSUBIMAGE3DPROC :: fn*(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *const GLvoid) -> void;
alias PFNGLCOPYTEXSUBIMAGE3DPROC :: fn*(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
extern fn glColorTable(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: *const GLvoid) -> void;
extern fn glColorSubTable(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type: GLenum, data: *const GLvoid) -> void;
extern fn glColorTableParameteriv(target: GLenum, pname: GLenum, params: *const GLint) -> void;
extern fn glColorTableParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat) -> void;
extern fn glCopyColorSubTable(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> void;
extern fn glCopyColorTable(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> void;
extern fn glGetColorTable(target: GLenum, format: GLenum, type: GLenum, table: *mut GLvoid) -> void;
extern fn glGetColorTableParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
extern fn glGetColorTableParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
extern fn glBlendEquation(mode: GLenum) -> void;
extern fn glBlendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) -> void;
extern fn glHistogram(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> void;
extern fn glResetHistogram(target: GLenum) -> void;
extern fn glGetHistogram(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: *mut GLvoid) -> void;
extern fn glGetHistogramParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
extern fn glGetHistogramParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
extern fn glMinmax(target: GLenum, internalformat: GLenum, sink: GLboolean) -> void;
extern fn glResetMinmax(target: GLenum) -> void;
extern fn glGetMinmax(target: GLenum, reset: GLboolean, format: GLenum, types: GLenum, values: *mut GLvoid) -> void;
extern fn glGetMinmaxParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
extern fn glGetMinmaxParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
extern fn glConvolutionFilter1D(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, image: *const GLvoid) -> void;
extern fn glConvolutionFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, image: *const GLvoid) -> void;
extern fn glConvolutionParameterf(target: GLenum, pname: GLenum, params: GLfloat) -> void;
extern fn glConvolutionParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat) -> void;
extern fn glConvolutionParameteri(target: GLenum, pname: GLenum, params: GLint) -> void;
extern fn glConvolutionParameteriv(target: GLenum, pname: GLenum, params: *const GLint) -> void;
extern fn glCopyConvolutionFilter1D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> void;
extern fn glCopyConvolutionFilter2D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
extern fn glGetConvolutionFilter(target: GLenum, format: GLenum, type: GLenum, image: *mut GLvoid) -> void;
extern fn glGetConvolutionParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
extern fn glGetConvolutionParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
extern fn glSeparableFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, row: *const GLvoid, column: *const GLvoid) -> void;
extern fn glGetSeparableFilter(target: GLenum, format: GLenum, type: GLenum, row: *mut GLvoid, column: *mut GLvoid, span: *mut GLvoid) -> void;
extern fn glActiveTexture(texture: GLenum) -> void;
extern fn glClientActiveTexture(texture: GLenum) -> void;
extern fn glCompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *const GLvoid) -> void;
extern fn glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *const GLvoid) -> void;
extern fn glCompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *const GLvoid) -> void;
extern fn glCompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const GLvoid) -> void;
extern fn glCompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const GLvoid) -> void;
extern fn glCompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const GLvoid) -> void;
extern fn glGetCompressedTexImage(target: GLenum, lod: GLint, img: *mut GLvoid) -> void;
extern fn glMultiTexCoord1d(target: GLenum, s: GLdouble) -> void;
extern fn glMultiTexCoord1dv(target: GLenum, v: *const GLdouble) -> void;
extern fn glMultiTexCoord1f(target: GLenum, s: GLfloat) -> void;
extern fn glMultiTexCoord1fv(target: GLenum, v: *const GLfloat) -> void;
extern fn glMultiTexCoord1i(target: GLenum, s: GLint) -> void;
extern fn glMultiTexCoord1iv(target: GLenum, v: *const GLint) -> void;
extern fn glMultiTexCoord1s(target: GLenum, s: GLshort) -> void;
extern fn glMultiTexCoord1sv(target: GLenum, v: *const GLshort) -> void;
extern fn glMultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble) -> void;
extern fn glMultiTexCoord2dv(target: GLenum, v: *const GLdouble) -> void;
extern fn glMultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat) -> void;
extern fn glMultiTexCoord2fv(target: GLenum, v: *const GLfloat) -> void;
extern fn glMultiTexCoord2i(target: GLenum, s: GLint, t: GLint) -> void;
extern fn glMultiTexCoord2iv(target: GLenum, v: *const GLint) -> void;
extern fn glMultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort) -> void;
extern fn glMultiTexCoord2sv(target: GLenum, v: *const GLshort) -> void;
extern fn glMultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> void;
extern fn glMultiTexCoord3dv(target: GLenum, v: *const GLdouble) -> void;
extern fn glMultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> void;
extern fn glMultiTexCoord3fv(target: GLenum, v: *const GLfloat) -> void;
extern fn glMultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint) -> void;
extern fn glMultiTexCoord3iv(target: GLenum, v: *const GLint) -> void;
extern fn glMultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> void;
extern fn glMultiTexCoord3sv(target: GLenum, v: *const GLshort) -> void;
extern fn glMultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> void;
extern fn glMultiTexCoord4dv(target: GLenum, v: *const GLdouble) -> void;
extern fn glMultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> void;
extern fn glMultiTexCoord4fv(target: GLenum, v: *const GLfloat) -> void;
extern fn glMultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> void;
extern fn glMultiTexCoord4iv(target: GLenum, v: *const GLint) -> void;
extern fn glMultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> void;
extern fn glMultiTexCoord4sv(target: GLenum, v: *const GLshort) -> void;
extern fn glLoadTransposeMatrixd(m: *const GLdouble) -> void;
extern fn glLoadTransposeMatrixf(m: *const GLfloat) -> void;
extern fn glMultTransposeMatrixd(m: *const GLdouble) -> void;
extern fn glMultTransposeMatrixf(m: *const GLfloat) -> void;
extern fn glSampleCoverage(value: GLclampf, invert: GLboolean) -> void;
alias PFNGLACTIVETEXTUREPROC :: fn*(GLenum) -> void;
alias PFNGLSAMPLECOVERAGEPROC :: fn*(GLclampf, GLboolean) -> void;
alias PFNGLCOMPRESSEDTEXIMAGE3DPROC :: fn*(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXIMAGE2DPROC :: fn*(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXIMAGE1DPROC :: fn*(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC :: fn*(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC :: fn*(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC :: fn*(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, *const GLvoid) -> void;
alias PFNGLGETCOMPRESSEDTEXIMAGEPROC :: fn*(GLenum, GLint, *mut GLvoid) -> void;
extern fn glActiveTextureARB(texture: GLenum) -> void;
extern fn glClientActiveTextureARB(texture: GLenum) -> void;
extern fn glMultiTexCoord1dARB(target: GLenum, s: GLdouble) -> void;
extern fn glMultiTexCoord1dvARB(target: GLenum, v: *const GLdouble) -> void;
extern fn glMultiTexCoord1fARB(target: GLenum, s: GLfloat) -> void;
extern fn glMultiTexCoord1fvARB(target: GLenum, v: *const GLfloat) -> void;
extern fn glMultiTexCoord1iARB(target: GLenum, s: GLint) -> void;
extern fn glMultiTexCoord1ivARB(target: GLenum, v: *const GLint) -> void;
extern fn glMultiTexCoord1sARB(target: GLenum, s: GLshort) -> void;
extern fn glMultiTexCoord1svARB(target: GLenum, v: *const GLshort) -> void;
extern fn glMultiTexCoord2dARB(target: GLenum, s: GLdouble, t: GLdouble) -> void;
extern fn glMultiTexCoord2dvARB(target: GLenum, v: *const GLdouble) -> void;
extern fn glMultiTexCoord2fARB(target: GLenum, s: GLfloat, t: GLfloat) -> void;
extern fn glMultiTexCoord2fvARB(target: GLenum, v: *const GLfloat) -> void;
extern fn glMultiTexCoord2iARB(target: GLenum, s: GLint, t: GLint) -> void;
extern fn glMultiTexCoord2ivARB(target: GLenum, v: *const GLint) -> void;
extern fn glMultiTexCoord2sARB(target: GLenum, s: GLshort, t: GLshort) -> void;
extern fn glMultiTexCoord2svARB(target: GLenum, v: *const GLshort) -> void;
extern fn glMultiTexCoord3dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> void;
extern fn glMultiTexCoord3dvARB(target: GLenum, v: *const GLdouble) -> void;
extern fn glMultiTexCoord3fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> void;
extern fn glMultiTexCoord3fvARB(target: GLenum, v: *const GLfloat) -> void;
extern fn glMultiTexCoord3iARB(target: GLenum, s: GLint, t: GLint, r: GLint) -> void;
extern fn glMultiTexCoord3ivARB(target: GLenum, v: *const GLint) -> void;
extern fn glMultiTexCoord3sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> void;
extern fn glMultiTexCoord3svARB(target: GLenum, v: *const GLshort) -> void;
extern fn glMultiTexCoord4dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> void;
extern fn glMultiTexCoord4dvARB(target: GLenum, v: *const GLdouble) -> void;
extern fn glMultiTexCoord4fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> void;
extern fn glMultiTexCoord4fvARB(target: GLenum, v: *const GLfloat) -> void;
extern fn glMultiTexCoord4iARB(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> void;
extern fn glMultiTexCoord4ivARB(target: GLenum, v: *const GLint) -> void;
extern fn glMultiTexCoord4sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> void;
extern fn glMultiTexCoord4svARB(target: GLenum, v: *const GLshort) -> void;

