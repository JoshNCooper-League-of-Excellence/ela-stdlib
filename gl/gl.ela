#c_flags "-lGLEW -lGL -lglfw -lm"

#foreign fn glewInit() -> bool;
#foreign fn glGenVertexArrays(n: s32, arrays: *const u32);
#foreign fn glBindVertexArray(array: s32);
#foreign fn glGenBuffers(n_buf: s32, buf: *const u32);
#foreign fn glBindBuffer(type: s32, buf: u32);
#foreign fn glBufferData(target: s32, size: s64, data: *const void, usage: s32);
#foreign fn glEnableVertexAttribArray(index: s32);
#foreign fn glVertexAttribPointer(index: s32, size: s64, type: s32, normalized: bool, stride: s64, pointer: *const void);
#foreign fn glVertexAttribIPointer(index: s32, size: s32, type: s32, stride: s64, pointer: *const void);
#foreign fn glVertexAttribDivisor(index: u32, divisor: u32);

#foreign fn glCreateShader(type: u32) -> u32;
#foreign fn glShaderSource(shader: u32, count: s32, s: *const *const u8, length: *const s32);
#foreign fn glCompileShader(shader: u32);
#foreign fn glGetShaderiv(shader: u32, pname: u32, params: *const s32);
#foreign fn glGetShaderInfoLog(shader: u32, maxLength: s32, length: *const s32, infoLog: *const u8);
#foreign fn glCreateProgram() -> u32;
#foreign fn glAttachShader(program: u32, shader: u32);
#foreign fn glLinkProgram(program: u32);
#foreign fn glGetProgramiv(program: u32, pname: u32, params: *const s32);
#foreign fn glGetProgramInfoLog(program: u32, maxLength: s32, length: *const s32, infoLog: *const u8);
#foreign fn glUseProgram(program: u32);
#foreign fn glDeleteShader(shader: s32);
#foreign fn glDeleteProgram(shader: s32);
#foreign fn glGetUniformLocation(program: u32, name: *const u8) -> s32;
#foreign fn glUniform4fv(location: s32, count: s32, value: *const f32);
#foreign fn glUniform3fv(location: s32, count: s32, value: *const f32);
#foreign fn glUniform2fv(location: s32, count: s32, value: *const f32);
#foreign fn glUniform1f(location: s32, v0: f32);
#foreign fn glUniformMatrix4fv(location: s32, count: s32, transpose: bool, value: *const f32);
alias GLenum :: u32;
alias GLboolean :: u8;
alias GLbitfield :: u32;
alias GLvoid :: void;
alias GLbyte :: s8;
alias GLshort :: s16;
alias GLint :: s32;
alias GLubyte :: u8;
alias GLushort :: u16;
alias GLuint :: u32;
alias GLsizei :: s32;
alias GLfloat :: f32;
alias GLclampf :: f32;
alias GLdouble :: f64;
alias GLclampd :: f64;
#foreign fn glClearIndex(c: GLfloat) -> void;
#foreign fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) -> void;
#foreign fn glClear(mask: GLbitfield) -> void;
#foreign fn glIndexMask(mask: GLuint) -> void;
#foreign fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> void;
#foreign fn glAlphaFunc(func: GLenum, ref: GLclampf) -> void;
#foreign fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) -> void;
#foreign fn glLogicOp(opcode: GLenum) -> void;
#foreign fn glCullFace(mode: GLenum) -> void;
#foreign fn glFrontFace(mode: GLenum) -> void;
#foreign fn glPointSize(size: GLfloat) -> void;
#foreign fn glLineWidth(width: GLfloat) -> void;
#foreign fn glLineStipple(factor: GLint, pattern: GLushort) -> void;
#foreign fn glPolygonMode(face: GLenum, mode: GLenum) -> void;
#foreign fn glPolygonOffset(factor: GLfloat, units: GLfloat) -> void;
#foreign fn glPolygonStipple(mask: *const GLubyte) -> void;
#foreign fn glGetPolygonStipple(mask: *mut GLubyte) -> void;
#foreign fn glEdgeFlag(flag: GLboolean) -> void;
#foreign fn glEdgeFlagv(flag: *const GLboolean) -> void;
#foreign fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
#foreign fn glClipPlane(plane: GLenum, equation: *const GLdouble) -> void;
#foreign fn glGetClipPlane(plane: GLenum, equation: *mut GLdouble) -> void;
#foreign fn glDrawBuffer(mode: GLenum) -> void;
#foreign fn glReadBuffer(mode: GLenum) -> void;
#foreign fn glEnable(cap: GLenum) -> void;
#foreign fn glDisable(cap: GLenum) -> void;
#foreign fn glIsEnabled(cap: GLenum) -> GLboolean;
#foreign fn glEnableClientState(cap: GLenum) -> void;
#foreign fn glDisableClientState(cap: GLenum) -> void;
#foreign fn glGetBooleanv(pname: GLenum, params: *mut GLboolean) -> void;
#foreign fn glGetDoublev(pname: GLenum, params: *mut GLdouble) -> void;
#foreign fn glGetFloatv(pname: GLenum, params: *mut GLfloat) -> void;
#foreign fn glGetIntegerv(pname: GLenum, params: *mut GLint) -> void;
#foreign fn glPushAttrib(mask: GLbitfield) -> void;
#foreign fn glPopAttrib() -> void;
#foreign fn glPushClientAttrib(mask: GLbitfield) -> void;
#foreign fn glPopClientAttrib() -> void;
#foreign fn glRenderMode(mode: GLenum) -> GLint;
#foreign fn glGetError() -> GLenum;
#foreign fn glGetString(name: GLenum) -> *const GLubyte;
#foreign fn glFinish() -> void;
#foreign fn glFlush() -> void;
#foreign fn glHint(target: GLenum, mode: GLenum) -> void;
#foreign fn glClearDepth(depth: GLclampd) -> void;
#foreign fn glDepthFunc(func: GLenum) -> void;
#foreign fn glDepthMask(flag: GLboolean) -> void;
#foreign fn glDepthRange(near_val: GLclampd, far_val: GLclampd) -> void;
#foreign fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void;
#foreign fn glAccum(op: GLenum, value: GLfloat) -> void;
#foreign fn glMatrixMode(mode: GLenum) -> void;
#foreign fn glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble) -> void;
#foreign fn glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble) -> void;
#foreign fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
#foreign fn glPushMatrix() -> void;
#foreign fn glPopMatrix() -> void;
#foreign fn glLoadIdentity() -> void;
#foreign fn glLoadMatrixd(m: *const GLdouble) -> void;
#foreign fn glLoadMatrixf(m: *const GLfloat) -> void;
#foreign fn glMultMatrixd(m: *const GLdouble) -> void;
#foreign fn glMultMatrixf(m: *const GLfloat) -> void;
#foreign fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> void;
#foreign fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> void;
#foreign fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble) -> void;
#foreign fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat) -> void;
#foreign fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble) -> void;
#foreign fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat) -> void;
#foreign fn glIsList(list: GLuint) -> GLboolean;
#foreign fn glDeleteLists(list: GLuint, range: GLsizei) -> void;
#foreign fn glGenLists(range: GLsizei) -> GLuint;
#foreign fn glNewList(list: GLuint, mode: GLenum) -> void;
#foreign fn glEndList() -> void;
#foreign fn glCallList(list: GLuint) -> void;
#foreign fn glCallLists(n: GLsizei, type: GLenum, lists: *const GLvoid) -> void;
#foreign fn glListBase(base: GLuint) -> void;
#foreign fn glBegin(mode: GLenum) -> void;
#foreign fn glEnd() -> void;
#foreign fn glVertex2d(x: GLdouble, y: GLdouble) -> void;
#foreign fn glVertex2f(x: GLfloat, y: GLfloat) -> void;
#foreign fn glVertex2i(x: GLint, y: GLint) -> void;
#foreign fn glVertex2s(x: GLshort, y: GLshort) -> void;
#foreign fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble) -> void;
#foreign fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat) -> void;
#foreign fn glVertex3i(x: GLint, y: GLint, z: GLint) -> void;
#foreign fn glVertex3s(x: GLshort, y: GLshort, z: GLshort) -> void;
#foreign fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void;
#foreign fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void;
#foreign fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint) -> void;
#foreign fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void;
#foreign fn glVertex2dv(v: *const GLdouble) -> void;
#foreign fn glVertex2fv(v: *const GLfloat) -> void;
#foreign fn glVertex2iv(v: *const GLint) -> void;
#foreign fn glVertex2sv(v: *const GLshort) -> void;
#foreign fn glVertex3dv(v: *const GLdouble) -> void;
#foreign fn glVertex3fv(v: *const GLfloat) -> void;
#foreign fn glVertex3iv(v: *const GLint) -> void;
#foreign fn glVertex3sv(v: *const GLshort) -> void;
#foreign fn glVertex4dv(v: *const GLdouble) -> void;
#foreign fn glVertex4fv(v: *const GLfloat) -> void;
#foreign fn glVertex4iv(v: *const GLint) -> void;
#foreign fn glVertex4sv(v: *const GLshort) -> void;
#foreign fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) -> void;
#foreign fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) -> void;
#foreign fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) -> void;
#foreign fn glNormal3i(nx: GLint, ny: GLint, nz: GLint) -> void;
#foreign fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort) -> void;
#foreign fn glNormal3bv(v: *const GLbyte) -> void;
#foreign fn glNormal3dv(v: *const GLdouble) -> void;
#foreign fn glNormal3fv(v: *const GLfloat) -> void;
#foreign fn glNormal3iv(v: *const GLint) -> void;
#foreign fn glNormal3sv(v: *const GLshort) -> void;
#foreign fn glIndexd(c: GLdouble) -> void;
#foreign fn glIndexf(c: GLfloat) -> void;
#foreign fn glIndexi(c: GLint) -> void;
#foreign fn glIndexs(c: GLshort) -> void;
#foreign fn glIndexub(c: GLubyte) -> void;
#foreign fn glIndexdv(c: *const GLdouble) -> void;
#foreign fn glIndexfv(c: *const GLfloat) -> void;
#foreign fn glIndexiv(c: *const GLint) -> void;
#foreign fn glIndexsv(c: *const GLshort) -> void;
#foreign fn glIndexubv(c: *const GLubyte) -> void;
#foreign fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) -> void;
#foreign fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) -> void;
#foreign fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) -> void;
#foreign fn glColor3i(red: GLint, green: GLint, blue: GLint) -> void;
#foreign fn glColor3s(red: GLshort, green: GLshort, blue: GLshort) -> void;
#foreign fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) -> void;
#foreign fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint) -> void;
#foreign fn glColor3us(red: GLushort, green: GLushort, blue: GLushort) -> void;
#foreign fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) -> void;
#foreign fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) -> void;
#foreign fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void;
#foreign fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> void;
#foreign fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) -> void;
#foreign fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) -> void;
#foreign fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> void;
#foreign fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) -> void;
#foreign fn glColor3bv(v: *const GLbyte) -> void;
#foreign fn glColor3dv(v: *const GLdouble) -> void;
#foreign fn glColor3fv(v: *const GLfloat) -> void;
#foreign fn glColor3iv(v: *const GLint) -> void;
#foreign fn glColor3sv(v: *const GLshort) -> void;
#foreign fn glColor3ubv(v: *const GLubyte) -> void;
#foreign fn glColor3uiv(v: *const GLuint) -> void;
#foreign fn glColor3usv(v: *const GLushort) -> void;
#foreign fn glColor4bv(v: *const GLbyte) -> void;
#foreign fn glColor4dv(v: *const GLdouble) -> void;
#foreign fn glColor4fv(v: *const GLfloat) -> void;
#foreign fn glColor4iv(v: *const GLint) -> void;
#foreign fn glColor4sv(v: *const GLshort) -> void;
#foreign fn glColor4ubv(v: *const GLubyte) -> void;
#foreign fn glColor4uiv(v: *const GLuint) -> void;
#foreign fn glColor4usv(v: *const GLushort) -> void;
#foreign fn glTexCoord1d(s: GLdouble) -> void;
#foreign fn glTexCoord1f(s: GLfloat) -> void;
#foreign fn glTexCoord1i(s: GLint) -> void;
#foreign fn glTexCoord1s(s: GLshort) -> void;
#foreign fn glTexCoord2d(s: GLdouble, t: GLdouble) -> void;
#foreign fn glTexCoord2f(s: GLfloat, t: GLfloat) -> void;
#foreign fn glTexCoord2i(s: GLint, t: GLint) -> void;
#foreign fn glTexCoord2s(s: GLshort, t: GLshort) -> void;
#foreign fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) -> void;
#foreign fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) -> void;
#foreign fn glTexCoord3i(s: GLint, t: GLint, r: GLint) -> void;
#foreign fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort) -> void;
#foreign fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> void;
#foreign fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> void;
#foreign fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) -> void;
#foreign fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> void;
#foreign fn glTexCoord1dv(v: *const GLdouble) -> void;
#foreign fn glTexCoord1fv(v: *const GLfloat) -> void;
#foreign fn glTexCoord1iv(v: *const GLint) -> void;
#foreign fn glTexCoord1sv(v: *const GLshort) -> void;
#foreign fn glTexCoord2dv(v: *const GLdouble) -> void;
#foreign fn glTexCoord2fv(v: *const GLfloat) -> void;
#foreign fn glTexCoord2iv(v: *const GLint) -> void;
#foreign fn glTexCoord2sv(v: *const GLshort) -> void;
#foreign fn glTexCoord3dv(v: *const GLdouble) -> void;
#foreign fn glTexCoord3fv(v: *const GLfloat) -> void;
#foreign fn glTexCoord3iv(v: *const GLint) -> void;
#foreign fn glTexCoord3sv(v: *const GLshort) -> void;
#foreign fn glTexCoord4dv(v: *const GLdouble) -> void;
#foreign fn glTexCoord4fv(v: *const GLfloat) -> void;
#foreign fn glTexCoord4iv(v: *const GLint) -> void;
#foreign fn glTexCoord4sv(v: *const GLshort) -> void;
#foreign fn glRasterPos2d(x: GLdouble, y: GLdouble) -> void;
#foreign fn glRasterPos2f(x: GLfloat, y: GLfloat) -> void;
#foreign fn glRasterPos2i(x: GLint, y: GLint) -> void;
#foreign fn glRasterPos2s(x: GLshort, y: GLshort) -> void;
#foreign fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) -> void;
#foreign fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) -> void;
#foreign fn glRasterPos3i(x: GLint, y: GLint, z: GLint) -> void;
#foreign fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort) -> void;
#foreign fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void;
#foreign fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void;
#foreign fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) -> void;
#foreign fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void;
#foreign fn glRasterPos2dv(v: *const GLdouble) -> void;
#foreign fn glRasterPos2fv(v: *const GLfloat) -> void;
#foreign fn glRasterPos2iv(v: *const GLint) -> void;
#foreign fn glRasterPos2sv(v: *const GLshort) -> void;
#foreign fn glRasterPos3dv(v: *const GLdouble) -> void;
#foreign fn glRasterPos3fv(v: *const GLfloat) -> void;
#foreign fn glRasterPos3iv(v: *const GLint) -> void;
#foreign fn glRasterPos3sv(v: *const GLshort) -> void;
#foreign fn glRasterPos4dv(v: *const GLdouble) -> void;
#foreign fn glRasterPos4fv(v: *const GLfloat) -> void;
#foreign fn glRasterPos4iv(v: *const GLint) -> void;
#foreign fn glRasterPos4sv(v: *const GLshort) -> void;
#foreign fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) -> void;
#foreign fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) -> void;
#foreign fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) -> void;
#foreign fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) -> void;
#foreign fn glRectdv(v1: *const GLdouble, v2: *const GLdouble) -> void;
#foreign fn glRectfv(v1: *const GLfloat, v2: *const GLfloat) -> void;
#foreign fn glRectiv(v1: *const GLint, v2: *const GLint) -> void;
#foreign fn glRectsv(v1: *const GLshort, v2: *const GLshort) -> void;
#foreign fn glVertexPointer(size: GLint, type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
#foreign fn glNormalPointer(type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
#foreign fn glColorPointer(size: GLint, type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
#foreign fn glIndexPointer(type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
#foreign fn glTexCoordPointer(size: GLint, type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
#foreign fn glEdgeFlagPointer(stride: GLsizei, ptr: *const GLvoid) -> void;
#foreign fn glGetPointerv(pname: GLenum, params: *mut *mut GLvoid) -> void;
#foreign fn glArrayElement(i: GLint) -> void;
#foreign fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) -> void;
#foreign fn glDrawElements(mode: GLenum, count: GLsizei, type: GLenum, indices: *const GLvoid) -> void;
#foreign fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: *const GLvoid) -> void;
#foreign fn glShadeModel(mode: GLenum) -> void;
#foreign fn glLightf(light: GLenum, pname: GLenum, param: GLfloat) -> void;
#foreign fn glLighti(light: GLenum, pname: GLenum, param: GLint) -> void;
#foreign fn glLightfv(light: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign fn glLightiv(light: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign fn glGetLightfv(light: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign fn glGetLightiv(light: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign fn glLightModelf(pname: GLenum, param: GLfloat) -> void;
#foreign fn glLightModeli(pname: GLenum, param: GLint) -> void;
#foreign fn glLightModelfv(pname: GLenum, params: *const GLfloat) -> void;
#foreign fn glLightModeliv(pname: GLenum, params: *const GLint) -> void;
#foreign fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat) -> void;
#foreign fn glMateriali(face: GLenum, pname: GLenum, param: GLint) -> void;
#foreign fn glMaterialfv(face: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign fn glMaterialiv(face: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign fn glGetMaterialfv(face: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign fn glGetMaterialiv(face: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign fn glColorMaterial(face: GLenum, mode: GLenum) -> void;
#foreign fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat) -> void;
#foreign fn glPixelStoref(pname: GLenum, param: GLfloat) -> void;
#foreign fn glPixelStorei(pname: GLenum, param: GLint) -> void;
#foreign fn glPixelTransferf(pname: GLenum, param: GLfloat) -> void;
#foreign fn glPixelTransferi(pname: GLenum, param: GLint) -> void;
#foreign fn glPixelMapfv(map: GLenum, mapsize: GLsizei, values: *const GLfloat) -> void;
#foreign fn glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: *const GLuint) -> void;
#foreign fn glPixelMapusv(map: GLenum, mapsize: GLsizei, values: *const GLushort) -> void;
#foreign fn glGetPixelMapfv(map: GLenum, values: *mut GLfloat) -> void;
#foreign fn glGetPixelMapuiv(map: GLenum, values: *mut GLuint) -> void;
#foreign fn glGetPixelMapusv(map: GLenum, values: *mut GLushort) -> void;
#foreign fn glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *const GLubyte) -> void;
#foreign fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *mut GLvoid) -> void;
#foreign fn glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type: GLenum) -> void;
#foreign fn glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) -> void;
#foreign fn glStencilMask(mask: GLuint) -> void;
#foreign fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) -> void;
#foreign fn glClearStencil(s: GLint) -> void;
#foreign fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble) -> void;
#foreign fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat) -> void;
#foreign fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint) -> void;
#foreign fn glTexGendv(coord: GLenum, pname: GLenum, params: *const GLdouble) -> void;
#foreign fn glTexGenfv(coord: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign fn glTexGeniv(coord: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign fn glGetTexGendv(coord: GLenum, pname: GLenum, params: *mut GLdouble) -> void;
#foreign fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat) -> void;
#foreign fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint) -> void;
#foreign fn glTexEnvfv(target: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign fn glTexEnviv(target: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign fn glGetTexEnviv(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) -> void;
#foreign fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) -> void;
#foreign fn glTexParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign fn glTexParameteriv(target: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign fn glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: *mut GLfloat) -> void;
#foreign fn glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: *mut GLint) -> void;
#foreign fn glTexImage1D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign fn glTexImage2D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign fn glGetTexImage(target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *mut GLvoid) -> void;
#foreign fn glGenTextures(n: GLsizei, textures: *mut GLuint) -> void;
#foreign fn glDeleteTextures(n: GLsizei, textures: *const GLuint) -> void;
#foreign fn glBindTexture(target: GLenum, texture: GLuint) -> void;
#foreign fn glPrioritizeTextures(n: GLsizei, textures: *const GLuint, priorities: *const GLclampf) -> void;
#foreign fn glAreTexturesResident(n: GLsizei, textures: *const GLuint, residences: *mut GLboolean) -> GLboolean;
#foreign fn glIsTexture(texture: GLuint) -> GLboolean;
#foreign fn glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign fn glCopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> void;
#foreign fn glCopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> void;
#foreign fn glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> void;
#foreign fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
#foreign fn glMap1d(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *const GLdouble) -> void;
#foreign fn glMap1f(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *const GLfloat) -> void;
#foreign fn glMap2d(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *const GLdouble) -> void;
#foreign fn glMap2f(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *const GLfloat) -> void;
#foreign fn glGetMapdv(target: GLenum, query: GLenum, v: *mut GLdouble) -> void;
#foreign fn glGetMapfv(target: GLenum, query: GLenum, v: *mut GLfloat) -> void;
#foreign fn glGetMapiv(target: GLenum, query: GLenum, v: *mut GLint) -> void;
#foreign fn glEvalCoord1d(u: GLdouble) -> void;
#foreign fn glEvalCoord1f(u: GLfloat) -> void;
#foreign fn glEvalCoord1dv(u: *const GLdouble) -> void;
#foreign fn glEvalCoord1fv(u: *const GLfloat) -> void;
#foreign fn glEvalCoord2d(u: GLdouble, v: GLdouble) -> void;
#foreign fn glEvalCoord2f(u: GLfloat, v: GLfloat) -> void;
#foreign fn glEvalCoord2dv(u: *const GLdouble) -> void;
#foreign fn glEvalCoord2fv(u: *const GLfloat) -> void;
#foreign fn glMapGrid1d(un: GLint, u1: GLdouble, u2: GLdouble) -> void;
#foreign fn glMapGrid1f(un: GLint, u1: GLfloat, u2: GLfloat) -> void;
#foreign fn glMapGrid2d(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) -> void;
#foreign fn glMapGrid2f(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) -> void;
#foreign fn glEvalPoint1(i: GLint) -> void;
#foreign fn glEvalPoint2(i: GLint, j: GLint) -> void;
#foreign fn glEvalMesh1(mode: GLenum, i1: GLint, i2: GLint) -> void;
#foreign fn glEvalMesh2(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) -> void;
#foreign fn glFogf(pname: GLenum, param: GLfloat) -> void;
#foreign fn glFogi(pname: GLenum, param: GLint) -> void;
#foreign fn glFogfv(pname: GLenum, params: *const GLfloat) -> void;
#foreign fn glFogiv(pname: GLenum, params: *const GLint) -> void;
#foreign fn glFeedbackBuffer(size: GLsizei, type: GLenum, buffer: *mut GLfloat) -> void;
#foreign fn glPassThrough(token: GLfloat) -> void;
#foreign fn glSelectBuffer(size: GLsizei, buffer: *mut GLuint) -> void;
#foreign fn glInitNames() -> void;
#foreign fn glLoadName(name: GLuint) -> void;
#foreign fn glPushName(name: GLuint) -> void;
#foreign fn glPopName() -> void;
#foreign fn glDrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *const GLvoid) -> void;
#foreign fn glTexImage3D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign fn glTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign fn glCopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
alias PFNGLDRAWRANGEELEMENTSPROC :: fn*(GLenum, GLuint, GLuint, GLsizei, GLenum, *const GLvoid) -> void;
alias PFNGLTEXIMAGE3DPROC :: fn*(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *const GLvoid) -> void;
alias PFNGLTEXSUBIMAGE3DPROC :: fn*(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *const GLvoid) -> void;
alias PFNGLCOPYTEXSUBIMAGE3DPROC :: fn*(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
#foreign fn glColorTable(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: *const GLvoid) -> void;
#foreign fn glColorSubTable(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type: GLenum, data: *const GLvoid) -> void;
#foreign fn glColorTableParameteriv(target: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign fn glColorTableParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign fn glCopyColorSubTable(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> void;
#foreign fn glCopyColorTable(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> void;
#foreign fn glGetColorTable(target: GLenum, format: GLenum, type: GLenum, table: *mut GLvoid) -> void;
#foreign fn glGetColorTableParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign fn glGetColorTableParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign fn glBlendEquation(mode: GLenum) -> void;
#foreign fn glBlendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) -> void;
#foreign fn glHistogram(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> void;
#foreign fn glResetHistogram(target: GLenum) -> void;
#foreign fn glGetHistogram(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: *mut GLvoid) -> void;
#foreign fn glGetHistogramParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign fn glGetHistogramParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign fn glMinmax(target: GLenum, internalformat: GLenum, sink: GLboolean) -> void;
#foreign fn glResetMinmax(target: GLenum) -> void;
#foreign fn glGetMinmax(target: GLenum, reset: GLboolean, format: GLenum, types: GLenum, values: *mut GLvoid) -> void;
#foreign fn glGetMinmaxParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign fn glGetMinmaxParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign fn glConvolutionFilter1D(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, image: *const GLvoid) -> void;
#foreign fn glConvolutionFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, image: *const GLvoid) -> void;
#foreign fn glConvolutionParameterf(target: GLenum, pname: GLenum, params: GLfloat) -> void;
#foreign fn glConvolutionParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign fn glConvolutionParameteri(target: GLenum, pname: GLenum, params: GLint) -> void;
#foreign fn glConvolutionParameteriv(target: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign fn glCopyConvolutionFilter1D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> void;
#foreign fn glCopyConvolutionFilter2D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
#foreign fn glGetConvolutionFilter(target: GLenum, format: GLenum, type: GLenum, image: *mut GLvoid) -> void;
#foreign fn glGetConvolutionParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign fn glGetConvolutionParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign fn glSeparableFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, row: *const GLvoid, column: *const GLvoid) -> void;
#foreign fn glGetSeparableFilter(target: GLenum, format: GLenum, type: GLenum, row: *mut GLvoid, column: *mut GLvoid, span: *mut GLvoid) -> void;
#foreign fn glActiveTexture(texture: GLenum) -> void;
#foreign fn glClientActiveTexture(texture: GLenum) -> void;
#foreign fn glCompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *const GLvoid) -> void;
#foreign fn glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *const GLvoid) -> void;
#foreign fn glCompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *const GLvoid) -> void;
#foreign fn glCompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const GLvoid) -> void;
#foreign fn glCompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const GLvoid) -> void;
#foreign fn glCompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const GLvoid) -> void;
#foreign fn glGetCompressedTexImage(target: GLenum, lod: GLint, img: *mut GLvoid) -> void;
#foreign fn glMultiTexCoord1d(target: GLenum, s: GLdouble) -> void;
#foreign fn glMultiTexCoord1dv(target: GLenum, v: *const GLdouble) -> void;
#foreign fn glMultiTexCoord1f(target: GLenum, s: GLfloat) -> void;
#foreign fn glMultiTexCoord1fv(target: GLenum, v: *const GLfloat) -> void;
#foreign fn glMultiTexCoord1i(target: GLenum, s: GLint) -> void;
#foreign fn glMultiTexCoord1iv(target: GLenum, v: *const GLint) -> void;
#foreign fn glMultiTexCoord1s(target: GLenum, s: GLshort) -> void;
#foreign fn glMultiTexCoord1sv(target: GLenum, v: *const GLshort) -> void;
#foreign fn glMultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble) -> void;
#foreign fn glMultiTexCoord2dv(target: GLenum, v: *const GLdouble) -> void;
#foreign fn glMultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat) -> void;
#foreign fn glMultiTexCoord2fv(target: GLenum, v: *const GLfloat) -> void;
#foreign fn glMultiTexCoord2i(target: GLenum, s: GLint, t: GLint) -> void;
#foreign fn glMultiTexCoord2iv(target: GLenum, v: *const GLint) -> void;
#foreign fn glMultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort) -> void;
#foreign fn glMultiTexCoord2sv(target: GLenum, v: *const GLshort) -> void;
#foreign fn glMultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> void;
#foreign fn glMultiTexCoord3dv(target: GLenum, v: *const GLdouble) -> void;
#foreign fn glMultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> void;
#foreign fn glMultiTexCoord3fv(target: GLenum, v: *const GLfloat) -> void;
#foreign fn glMultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint) -> void;
#foreign fn glMultiTexCoord3iv(target: GLenum, v: *const GLint) -> void;
#foreign fn glMultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> void;
#foreign fn glMultiTexCoord3sv(target: GLenum, v: *const GLshort) -> void;
#foreign fn glMultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> void;
#foreign fn glMultiTexCoord4dv(target: GLenum, v: *const GLdouble) -> void;
#foreign fn glMultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> void;
#foreign fn glMultiTexCoord4fv(target: GLenum, v: *const GLfloat) -> void;
#foreign fn glMultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> void;
#foreign fn glMultiTexCoord4iv(target: GLenum, v: *const GLint) -> void;
#foreign fn glMultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> void;
#foreign fn glMultiTexCoord4sv(target: GLenum, v: *const GLshort) -> void;
#foreign fn glLoadTransposeMatrixd(m: *const GLdouble) -> void;
#foreign fn glLoadTransposeMatrixf(m: *const GLfloat) -> void;
#foreign fn glMultTransposeMatrixd(m: *const GLdouble) -> void;
#foreign fn glMultTransposeMatrixf(m: *const GLfloat) -> void;
#foreign fn glSampleCoverage(value: GLclampf, invert: GLboolean) -> void;
alias PFNGLACTIVETEXTUREPROC :: fn*(GLenum) -> void;
alias PFNGLSAMPLECOVERAGEPROC :: fn*(GLclampf, GLboolean) -> void;
alias PFNGLCOMPRESSEDTEXIMAGE3DPROC :: fn*(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXIMAGE2DPROC :: fn*(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXIMAGE1DPROC :: fn*(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC :: fn*(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC :: fn*(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC :: fn*(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, *const GLvoid) -> void;
alias PFNGLGETCOMPRESSEDTEXIMAGEPROC :: fn*(GLenum, GLint, *mut GLvoid) -> void;
#foreign fn glActiveTextureARB(texture: GLenum) -> void;
#foreign fn glClientActiveTextureARB(texture: GLenum) -> void;
#foreign fn glMultiTexCoord1dARB(target: GLenum, s: GLdouble) -> void;
#foreign fn glMultiTexCoord1dvARB(target: GLenum, v: *const GLdouble) -> void;
#foreign fn glMultiTexCoord1fARB(target: GLenum, s: GLfloat) -> void;
#foreign fn glMultiTexCoord1fvARB(target: GLenum, v: *const GLfloat) -> void;
#foreign fn glMultiTexCoord1iARB(target: GLenum, s: GLint) -> void;
#foreign fn glMultiTexCoord1ivARB(target: GLenum, v: *const GLint) -> void;
#foreign fn glMultiTexCoord1sARB(target: GLenum, s: GLshort) -> void;
#foreign fn glMultiTexCoord1svARB(target: GLenum, v: *const GLshort) -> void;
#foreign fn glMultiTexCoord2dARB(target: GLenum, s: GLdouble, t: GLdouble) -> void;
#foreign fn glMultiTexCoord2dvARB(target: GLenum, v: *const GLdouble) -> void;
#foreign fn glMultiTexCoord2fARB(target: GLenum, s: GLfloat, t: GLfloat) -> void;
#foreign fn glMultiTexCoord2fvARB(target: GLenum, v: *const GLfloat) -> void;
#foreign fn glMultiTexCoord2iARB(target: GLenum, s: GLint, t: GLint) -> void;
#foreign fn glMultiTexCoord2ivARB(target: GLenum, v: *const GLint) -> void;
#foreign fn glMultiTexCoord2sARB(target: GLenum, s: GLshort, t: GLshort) -> void;
#foreign fn glMultiTexCoord2svARB(target: GLenum, v: *const GLshort) -> void;
#foreign fn glMultiTexCoord3dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> void;
#foreign fn glMultiTexCoord3dvARB(target: GLenum, v: *const GLdouble) -> void;
#foreign fn glMultiTexCoord3fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> void;
#foreign fn glMultiTexCoord3fvARB(target: GLenum, v: *const GLfloat) -> void;
#foreign fn glMultiTexCoord3iARB(target: GLenum, s: GLint, t: GLint, r: GLint) -> void;
#foreign fn glMultiTexCoord3ivARB(target: GLenum, v: *const GLint) -> void;
#foreign fn glMultiTexCoord3sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> void;
#foreign fn glMultiTexCoord3svARB(target: GLenum, v: *const GLshort) -> void;
#foreign fn glMultiTexCoord4dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> void;
#foreign fn glMultiTexCoord4dvARB(target: GLenum, v: *const GLdouble) -> void;
#foreign fn glMultiTexCoord4fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> void;
#foreign fn glMultiTexCoord4fvARB(target: GLenum, v: *const GLfloat) -> void;
#foreign fn glMultiTexCoord4iARB(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> void;
#foreign fn glMultiTexCoord4ivARB(target: GLenum, v: *const GLint) -> void;
#foreign fn glMultiTexCoord4sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> void;
#foreign fn glMultiTexCoord4svARB(target: GLenum, v: *const GLshort) -> void;

