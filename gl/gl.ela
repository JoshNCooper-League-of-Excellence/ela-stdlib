#c_flags "-lGLEW -lGL -lglfw -lm"

#foreign glewInit :: fn() -> bool;
#foreign glGenVertexArrays :: fn(n: s32, arrays: *const u32);
#foreign glBindVertexArray :: fn(array: s32);
#foreign glGenBuffers :: fn(n_buf: s32, buf: *const u32);
#foreign glBindBuffer :: fn(type: s32, buf: u32);
#foreign glBufferData :: fn(target: s32, size: s64, data: *const void, usage: s32);
#foreign glEnableVertexAttribArray :: fn(index: s32);
#foreign glVertexAttribPointer :: fn(index: s32, size: s64, type: s32, normalized: bool, stride: s64, pointer: *const void);
#foreign glVertexAttribIPointer :: fn(index: s32, size: s32, type: s32, stride: s64, pointer: *const void);
#foreign glVertexAttribDivisor :: fn(index: u32, divisor: u32);

#foreign glCreateShader :: fn(type: u32) -> u32;
#foreign glShaderSource :: fn(shader: u32, count: s32, s: *const *const u8, length: *const s32);
#foreign glCompileShader :: fn(shader: u32);
#foreign glGetShaderiv :: fn(shader: u32, pname: u32, params: *const s32);
#foreign glGetShaderInfoLog :: fn(shader: u32, maxLength: s32, length: *const s32, infoLog: *const u8);
#foreign glCreateProgram :: fn() -> u32;
#foreign glAttachShader :: fn(program: u32, shader: u32);
#foreign glLinkProgram :: fn(program: u32);
#foreign glGetProgramiv :: fn(program: u32, pname: u32, params: *const s32);
#foreign glGetProgramInfoLog :: fn(program: u32, maxLength: s32, length: *const s32, infoLog: *const u8);
#foreign glUseProgram :: fn(program: u32);
#foreign glDeleteShader :: fn(shader: s32);
#foreign glDeleteProgram :: fn(shader: s32);
#foreign glGetUniformLocation :: fn(program: u32, name: *const u8) -> s32;
#foreign glUniform4fv :: fn(location: s32, count: s32, value: *const f32);
#foreign glUniform3fv :: fn(location: s32, count: s32, value: *const f32);
#foreign glUniform2fv :: fn(location: s32, count: s32, value: *const f32);
#foreign glUniform1f :: fn(location: s32, v0: f32);
#foreign glUniformMatrix4fv :: fn(location: s32, count: s32, transpose: bool, value: *const f32);
alias GLenum :: u32;
alias GLboolean :: u8;
alias GLbitfield :: u32;
alias GLvoid :: void;
alias GLbyte :: s8;
alias GLshort :: s16;
alias GLint :: s32;
alias GLubyte :: u8;
alias GLushort :: u16;
alias GLuint :: u32;
alias GLsizei :: s32;
alias GLfloat :: f32;
alias GLclampf :: f32;
alias GLdouble :: f64;
alias GLclampd :: f64;
#foreign glClearIndex :: fn(c: GLfloat) -> void;
#foreign glClearColor :: fn(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) -> void;
#foreign glClear :: fn(mask: GLbitfield) -> void;
#foreign glIndexMask :: fn(mask: GLuint) -> void;
#foreign glColorMask :: fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> void;
#foreign glAlphaFunc :: fn(func: GLenum, ref: GLclampf) -> void;
#foreign glBlendFunc :: fn(sfactor: GLenum, dfactor: GLenum) -> void;
#foreign glLogicOp :: fn(opcode: GLenum) -> void;
#foreign glCullFace :: fn(mode: GLenum) -> void;
#foreign glFrontFace :: fn(mode: GLenum) -> void;
#foreign glPointSize :: fn(size: GLfloat) -> void;
#foreign glLineWidth :: fn(width: GLfloat) -> void;
#foreign glLineStipple :: fn(factor: GLint, pattern: GLushort) -> void;
#foreign glPolygonMode :: fn(face: GLenum, mode: GLenum) -> void;
#foreign glPolygonOffset :: fn(factor: GLfloat, units: GLfloat) -> void;
#foreign glPolygonStipple :: fn(mask: *const GLubyte) -> void;
#foreign glGetPolygonStipple :: fn(mask: *mut GLubyte) -> void;
#foreign glEdgeFlag :: fn(flag: GLboolean) -> void;
#foreign glEdgeFlagv :: fn(flag: *const GLboolean) -> void;
#foreign glScissor :: fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
#foreign glClipPlane :: fn(plane: GLenum, equation: *const GLdouble) -> void;
#foreign glGetClipPlane :: fn(plane: GLenum, equation: *mut GLdouble) -> void;
#foreign glDrawBuffer :: fn(mode: GLenum) -> void;
#foreign glReadBuffer :: fn(mode: GLenum) -> void;
#foreign glEnable :: fn(cap: GLenum) -> void;
#foreign glDisable :: fn(cap: GLenum) -> void;
#foreign glIsEnabled :: fn(cap: GLenum) -> GLboolean;
#foreign glEnableClientState :: fn(cap: GLenum) -> void;
#foreign glDisableClientState :: fn(cap: GLenum) -> void;
#foreign glGetBooleanv :: fn(pname: GLenum, params: *mut GLboolean) -> void;
#foreign glGetDoublev :: fn(pname: GLenum, params: *mut GLdouble) -> void;
#foreign glGetFloatv :: fn(pname: GLenum, params: *mut GLfloat) -> void;
#foreign glGetIntegerv :: fn(pname: GLenum, params: *mut GLint) -> void;
#foreign glPushAttrib :: fn(mask: GLbitfield) -> void;
#foreign glPopAttrib :: fn() -> void;
#foreign glPushClientAttrib :: fn(mask: GLbitfield) -> void;
#foreign glPopClientAttrib :: fn() -> void;
#foreign glRenderMode :: fn(mode: GLenum) -> GLint;
#foreign glGetError :: fn() -> GLenum;
#foreign glGetString :: fn(name: GLenum) -> *const GLubyte;
#foreign glFinish :: fn() -> void;
#foreign glFlush :: fn() -> void;
#foreign glHint :: fn(target: GLenum, mode: GLenum) -> void;
#foreign glClearDepth :: fn(depth: GLclampd) -> void;
#foreign glDepthFunc :: fn(func: GLenum) -> void;
#foreign glDepthMask :: fn(flag: GLboolean) -> void;
#foreign glDepthRange :: fn(near_val: GLclampd, far_val: GLclampd) -> void;
#foreign glClearAccum :: fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void;
#foreign glAccum :: fn(op: GLenum, value: GLfloat) -> void;
#foreign glMatrixMode :: fn(mode: GLenum) -> void;
#foreign glOrtho :: fn(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble) -> void;
#foreign glFrustum :: fn(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble) -> void;
#foreign glViewport :: fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
#foreign glPushMatrix :: fn() -> void;
#foreign glPopMatrix :: fn() -> void;
#foreign glLoadIdentity :: fn() -> void;
#foreign glLoadMatrixd :: fn(m: *const GLdouble) -> void;
#foreign glLoadMatrixf :: fn(m: *const GLfloat) -> void;
#foreign glMultMatrixd :: fn(m: *const GLdouble) -> void;
#foreign glMultMatrixf :: fn(m: *const GLfloat) -> void;
#foreign glRotated :: fn(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> void;
#foreign glRotatef :: fn(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> void;
#foreign glScaled :: fn(x: GLdouble, y: GLdouble, z: GLdouble) -> void;
#foreign glScalef :: fn(x: GLfloat, y: GLfloat, z: GLfloat) -> void;
#foreign glTranslated :: fn(x: GLdouble, y: GLdouble, z: GLdouble) -> void;
#foreign glTranslatef :: fn(x: GLfloat, y: GLfloat, z: GLfloat) -> void;
#foreign glIsList :: fn(list: GLuint) -> GLboolean;
#foreign glDeleteLists :: fn(list: GLuint, range: GLsizei) -> void;
#foreign glGenLists :: fn(range: GLsizei) -> GLuint;
#foreign glNewList :: fn(list: GLuint, mode: GLenum) -> void;
#foreign glEndList :: fn() -> void;
#foreign glCallList :: fn(list: GLuint) -> void;
#foreign glCallLists :: fn(n: GLsizei, type: GLenum, lists: *const GLvoid) -> void;
#foreign glListBase :: fn(base: GLuint) -> void;
#foreign glBegin :: fn(mode: GLenum) -> void;
#foreign glEnd :: fn() -> void;
#foreign glVertex2d :: fn(x: GLdouble, y: GLdouble) -> void;
#foreign glVertex2f :: fn(x: GLfloat, y: GLfloat) -> void;
#foreign glVertex2i :: fn(x: GLint, y: GLint) -> void;
#foreign glVertex2s :: fn(x: GLshort, y: GLshort) -> void;
#foreign glVertex3d :: fn(x: GLdouble, y: GLdouble, z: GLdouble) -> void;
#foreign glVertex3f :: fn(x: GLfloat, y: GLfloat, z: GLfloat) -> void;
#foreign glVertex3i :: fn(x: GLint, y: GLint, z: GLint) -> void;
#foreign glVertex3s :: fn(x: GLshort, y: GLshort, z: GLshort) -> void;
#foreign glVertex4d :: fn(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void;
#foreign glVertex4f :: fn(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void;
#foreign glVertex4i :: fn(x: GLint, y: GLint, z: GLint, w: GLint) -> void;
#foreign glVertex4s :: fn(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void;
#foreign glVertex2dv :: fn(v: *const GLdouble) -> void;
#foreign glVertex2fv :: fn(v: *const GLfloat) -> void;
#foreign glVertex2iv :: fn(v: *const GLint) -> void;
#foreign glVertex2sv :: fn(v: *const GLshort) -> void;
#foreign glVertex3dv :: fn(v: *const GLdouble) -> void;
#foreign glVertex3fv :: fn(v: *const GLfloat) -> void;
#foreign glVertex3iv :: fn(v: *const GLint) -> void;
#foreign glVertex3sv :: fn(v: *const GLshort) -> void;
#foreign glVertex4dv :: fn(v: *const GLdouble) -> void;
#foreign glVertex4fv :: fn(v: *const GLfloat) -> void;
#foreign glVertex4iv :: fn(v: *const GLint) -> void;
#foreign glVertex4sv :: fn(v: *const GLshort) -> void;
#foreign glNormal3b :: fn(nx: GLbyte, ny: GLbyte, nz: GLbyte) -> void;
#foreign glNormal3d :: fn(nx: GLdouble, ny: GLdouble, nz: GLdouble) -> void;
#foreign glNormal3f :: fn(nx: GLfloat, ny: GLfloat, nz: GLfloat) -> void;
#foreign glNormal3i :: fn(nx: GLint, ny: GLint, nz: GLint) -> void;
#foreign glNormal3s :: fn(nx: GLshort, ny: GLshort, nz: GLshort) -> void;
#foreign glNormal3bv :: fn(v: *const GLbyte) -> void;
#foreign glNormal3dv :: fn(v: *const GLdouble) -> void;
#foreign glNormal3fv :: fn(v: *const GLfloat) -> void;
#foreign glNormal3iv :: fn(v: *const GLint) -> void;
#foreign glNormal3sv :: fn(v: *const GLshort) -> void;
#foreign glIndexd :: fn(c: GLdouble) -> void;
#foreign glIndexf :: fn(c: GLfloat) -> void;
#foreign glIndexi :: fn(c: GLint) -> void;
#foreign glIndexs :: fn(c: GLshort) -> void;
#foreign glIndexub :: fn(c: GLubyte) -> void;
#foreign glIndexdv :: fn(c: *const GLdouble) -> void;
#foreign glIndexfv :: fn(c: *const GLfloat) -> void;
#foreign glIndexiv :: fn(c: *const GLint) -> void;
#foreign glIndexsv :: fn(c: *const GLshort) -> void;
#foreign glIndexubv :: fn(c: *const GLubyte) -> void;
#foreign glColor3b :: fn(red: GLbyte, green: GLbyte, blue: GLbyte) -> void;
#foreign glColor3d :: fn(red: GLdouble, green: GLdouble, blue: GLdouble) -> void;
#foreign glColor3f :: fn(red: GLfloat, green: GLfloat, blue: GLfloat) -> void;
#foreign glColor3i :: fn(red: GLint, green: GLint, blue: GLint) -> void;
#foreign glColor3s :: fn(red: GLshort, green: GLshort, blue: GLshort) -> void;
#foreign glColor3ub :: fn(red: GLubyte, green: GLubyte, blue: GLubyte) -> void;
#foreign glColor3ui :: fn(red: GLuint, green: GLuint, blue: GLuint) -> void;
#foreign glColor3us :: fn(red: GLushort, green: GLushort, blue: GLushort) -> void;
#foreign glColor4b :: fn(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) -> void;
#foreign glColor4d :: fn(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) -> void;
#foreign glColor4f :: fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void;
#foreign glColor4i :: fn(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> void;
#foreign glColor4s :: fn(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) -> void;
#foreign glColor4ub :: fn(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) -> void;
#foreign glColor4ui :: fn(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> void;
#foreign glColor4us :: fn(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) -> void;
#foreign glColor3bv :: fn(v: *const GLbyte) -> void;
#foreign glColor3dv :: fn(v: *const GLdouble) -> void;
#foreign glColor3fv :: fn(v: *const GLfloat) -> void;
#foreign glColor3iv :: fn(v: *const GLint) -> void;
#foreign glColor3sv :: fn(v: *const GLshort) -> void;
#foreign glColor3ubv :: fn(v: *const GLubyte) -> void;
#foreign glColor3uiv :: fn(v: *const GLuint) -> void;
#foreign glColor3usv :: fn(v: *const GLushort) -> void;
#foreign glColor4bv :: fn(v: *const GLbyte) -> void;
#foreign glColor4dv :: fn(v: *const GLdouble) -> void;
#foreign glColor4fv :: fn(v: *const GLfloat) -> void;
#foreign glColor4iv :: fn(v: *const GLint) -> void;
#foreign glColor4sv :: fn(v: *const GLshort) -> void;
#foreign glColor4ubv :: fn(v: *const GLubyte) -> void;
#foreign glColor4uiv :: fn(v: *const GLuint) -> void;
#foreign glColor4usv :: fn(v: *const GLushort) -> void;
#foreign glTexCoord1d :: fn(s: GLdouble) -> void;
#foreign glTexCoord1f :: fn(s: GLfloat) -> void;
#foreign glTexCoord1i :: fn(s: GLint) -> void;
#foreign glTexCoord1s :: fn(s: GLshort) -> void;
#foreign glTexCoord2d :: fn(s: GLdouble, t: GLdouble) -> void;
#foreign glTexCoord2f :: fn(s: GLfloat, t: GLfloat) -> void;
#foreign glTexCoord2i :: fn(s: GLint, t: GLint) -> void;
#foreign glTexCoord2s :: fn(s: GLshort, t: GLshort) -> void;
#foreign glTexCoord3d :: fn(s: GLdouble, t: GLdouble, r: GLdouble) -> void;
#foreign glTexCoord3f :: fn(s: GLfloat, t: GLfloat, r: GLfloat) -> void;
#foreign glTexCoord3i :: fn(s: GLint, t: GLint, r: GLint) -> void;
#foreign glTexCoord3s :: fn(s: GLshort, t: GLshort, r: GLshort) -> void;
#foreign glTexCoord4d :: fn(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> void;
#foreign glTexCoord4f :: fn(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> void;
#foreign glTexCoord4i :: fn(s: GLint, t: GLint, r: GLint, q: GLint) -> void;
#foreign glTexCoord4s :: fn(s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> void;
#foreign glTexCoord1dv :: fn(v: *const GLdouble) -> void;
#foreign glTexCoord1fv :: fn(v: *const GLfloat) -> void;
#foreign glTexCoord1iv :: fn(v: *const GLint) -> void;
#foreign glTexCoord1sv :: fn(v: *const GLshort) -> void;
#foreign glTexCoord2dv :: fn(v: *const GLdouble) -> void;
#foreign glTexCoord2fv :: fn(v: *const GLfloat) -> void;
#foreign glTexCoord2iv :: fn(v: *const GLint) -> void;
#foreign glTexCoord2sv :: fn(v: *const GLshort) -> void;
#foreign glTexCoord3dv :: fn(v: *const GLdouble) -> void;
#foreign glTexCoord3fv :: fn(v: *const GLfloat) -> void;
#foreign glTexCoord3iv :: fn(v: *const GLint) -> void;
#foreign glTexCoord3sv :: fn(v: *const GLshort) -> void;
#foreign glTexCoord4dv :: fn(v: *const GLdouble) -> void;
#foreign glTexCoord4fv :: fn(v: *const GLfloat) -> void;
#foreign glTexCoord4iv :: fn(v: *const GLint) -> void;
#foreign glTexCoord4sv :: fn(v: *const GLshort) -> void;
#foreign glRasterPos2d :: fn(x: GLdouble, y: GLdouble) -> void;
#foreign glRasterPos2f :: fn(x: GLfloat, y: GLfloat) -> void;
#foreign glRasterPos2i :: fn(x: GLint, y: GLint) -> void;
#foreign glRasterPos2s :: fn(x: GLshort, y: GLshort) -> void;
#foreign glRasterPos3d :: fn(x: GLdouble, y: GLdouble, z: GLdouble) -> void;
#foreign glRasterPos3f :: fn(x: GLfloat, y: GLfloat, z: GLfloat) -> void;
#foreign glRasterPos3i :: fn(x: GLint, y: GLint, z: GLint) -> void;
#foreign glRasterPos3s :: fn(x: GLshort, y: GLshort, z: GLshort) -> void;
#foreign glRasterPos4d :: fn(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void;
#foreign glRasterPos4f :: fn(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void;
#foreign glRasterPos4i :: fn(x: GLint, y: GLint, z: GLint, w: GLint) -> void;
#foreign glRasterPos4s :: fn(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void;
#foreign glRasterPos2dv :: fn(v: *const GLdouble) -> void;
#foreign glRasterPos2fv :: fn(v: *const GLfloat) -> void;
#foreign glRasterPos2iv :: fn(v: *const GLint) -> void;
#foreign glRasterPos2sv :: fn(v: *const GLshort) -> void;
#foreign glRasterPos3dv :: fn(v: *const GLdouble) -> void;
#foreign glRasterPos3fv :: fn(v: *const GLfloat) -> void;
#foreign glRasterPos3iv :: fn(v: *const GLint) -> void;
#foreign glRasterPos3sv :: fn(v: *const GLshort) -> void;
#foreign glRasterPos4dv :: fn(v: *const GLdouble) -> void;
#foreign glRasterPos4fv :: fn(v: *const GLfloat) -> void;
#foreign glRasterPos4iv :: fn(v: *const GLint) -> void;
#foreign glRasterPos4sv :: fn(v: *const GLshort) -> void;
#foreign glRectd :: fn(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) -> void;
#foreign glRectf :: fn(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) -> void;
#foreign glRecti :: fn(x1: GLint, y1: GLint, x2: GLint, y2: GLint) -> void;
#foreign glRects :: fn(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) -> void;
#foreign glRectdv :: fn(v1: *const GLdouble, v2: *const GLdouble) -> void;
#foreign glRectfv :: fn(v1: *const GLfloat, v2: *const GLfloat) -> void;
#foreign glRectiv :: fn(v1: *const GLint, v2: *const GLint) -> void;
#foreign glRectsv :: fn(v1: *const GLshort, v2: *const GLshort) -> void;
#foreign glVertexPointer :: fn(size: GLint, type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
#foreign glNormalPointer :: fn(type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
#foreign glColorPointer :: fn(size: GLint, type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
#foreign glIndexPointer :: fn(type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
#foreign glTexCoordPointer :: fn(size: GLint, type: GLenum, stride: GLsizei, ptr: *const GLvoid) -> void;
#foreign glEdgeFlagPointer :: fn(stride: GLsizei, ptr: *const GLvoid) -> void;
#foreign glGetPointerv :: fn(pname: GLenum, params: *mut *mut GLvoid) -> void;
#foreign glArrayElement :: fn(i: GLint) -> void;
#foreign glDrawArrays :: fn(mode: GLenum, first: GLint, count: GLsizei) -> void;
#foreign glDrawElements :: fn(mode: GLenum, count: GLsizei, type: GLenum, indices: *const GLvoid) -> void;
#foreign glInterleavedArrays :: fn(format: GLenum, stride: GLsizei, pointer: *const GLvoid) -> void;
#foreign glShadeModel :: fn(mode: GLenum) -> void;
#foreign glLightf :: fn(light: GLenum, pname: GLenum, param: GLfloat) -> void;
#foreign glLighti :: fn(light: GLenum, pname: GLenum, param: GLint) -> void;
#foreign glLightfv :: fn(light: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign glLightiv :: fn(light: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign glGetLightfv :: fn(light: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign glGetLightiv :: fn(light: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign glLightModelf :: fn(pname: GLenum, param: GLfloat) -> void;
#foreign glLightModeli :: fn(pname: GLenum, param: GLint) -> void;
#foreign glLightModelfv :: fn(pname: GLenum, params: *const GLfloat) -> void;
#foreign glLightModeliv :: fn(pname: GLenum, params: *const GLint) -> void;
#foreign glMaterialf :: fn(face: GLenum, pname: GLenum, param: GLfloat) -> void;
#foreign glMateriali :: fn(face: GLenum, pname: GLenum, param: GLint) -> void;
#foreign glMaterialfv :: fn(face: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign glMaterialiv :: fn(face: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign glGetMaterialfv :: fn(face: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign glGetMaterialiv :: fn(face: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign glColorMaterial :: fn(face: GLenum, mode: GLenum) -> void;
#foreign glPixelZoom :: fn(xfactor: GLfloat, yfactor: GLfloat) -> void;
#foreign glPixelStoref :: fn(pname: GLenum, param: GLfloat) -> void;
#foreign glPixelStorei :: fn(pname: GLenum, param: GLint) -> void;
#foreign glPixelTransferf :: fn(pname: GLenum, param: GLfloat) -> void;
#foreign glPixelTransferi :: fn(pname: GLenum, param: GLint) -> void;
#foreign glPixelMapfv :: fn(map: GLenum, mapsize: GLsizei, values: *const GLfloat) -> void;
#foreign glPixelMapuiv :: fn(map: GLenum, mapsize: GLsizei, values: *const GLuint) -> void;
#foreign glPixelMapusv :: fn(map: GLenum, mapsize: GLsizei, values: *const GLushort) -> void;
#foreign glGetPixelMapfv :: fn(map: GLenum, values: *mut GLfloat) -> void;
#foreign glGetPixelMapuiv :: fn(map: GLenum, values: *mut GLuint) -> void;
#foreign glGetPixelMapusv :: fn(map: GLenum, values: *mut GLushort) -> void;
#foreign glBitmap :: fn(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *const GLubyte) -> void;
#foreign glReadPixels :: fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *mut GLvoid) -> void;
#foreign glDrawPixels :: fn(width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign glCopyPixels :: fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type: GLenum) -> void;
#foreign glStencilFunc :: fn(func: GLenum, ref: GLint, mask: GLuint) -> void;
#foreign glStencilMask :: fn(mask: GLuint) -> void;
#foreign glStencilOp :: fn(fail: GLenum, zfail: GLenum, zpass: GLenum) -> void;
#foreign glClearStencil :: fn(s: GLint) -> void;
#foreign glTexGend :: fn(coord: GLenum, pname: GLenum, param: GLdouble) -> void;
#foreign glTexGenf :: fn(coord: GLenum, pname: GLenum, param: GLfloat) -> void;
#foreign glTexGeni :: fn(coord: GLenum, pname: GLenum, param: GLint) -> void;
#foreign glTexGendv :: fn(coord: GLenum, pname: GLenum, params: *const GLdouble) -> void;
#foreign glTexGenfv :: fn(coord: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign glTexGeniv :: fn(coord: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign glGetTexGendv :: fn(coord: GLenum, pname: GLenum, params: *mut GLdouble) -> void;
#foreign glGetTexGenfv :: fn(coord: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign glGetTexGeniv :: fn(coord: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign glTexEnvf :: fn(target: GLenum, pname: GLenum, param: GLfloat) -> void;
#foreign glTexEnvi :: fn(target: GLenum, pname: GLenum, param: GLint) -> void;
#foreign glTexEnvfv :: fn(target: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign glTexEnviv :: fn(target: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign glGetTexEnvfv :: fn(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign glGetTexEnviv :: fn(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign glTexParameterf :: fn(target: GLenum, pname: GLenum, param: GLfloat) -> void;
#foreign glTexParameteri :: fn(target: GLenum, pname: GLenum, param: GLint) -> void;
#foreign glTexParameterfv :: fn(target: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign glTexParameteriv :: fn(target: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign glGetTexParameterfv :: fn(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign glGetTexParameteriv :: fn(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign glGetTexLevelParameterfv :: fn(target: GLenum, level: GLint, pname: GLenum, params: *mut GLfloat) -> void;
#foreign glGetTexLevelParameteriv :: fn(target: GLenum, level: GLint, pname: GLenum, params: *mut GLint) -> void;
#foreign glTexImage1D :: fn(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign glTexImage2D :: fn(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign glGetTexImage :: fn(target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *mut GLvoid) -> void;
#foreign glGenTextures :: fn(n: GLsizei, textures: *mut GLuint) -> void;
#foreign glDeleteTextures :: fn(n: GLsizei, textures: *const GLuint) -> void;
#foreign glBindTexture :: fn(target: GLenum, texture: GLuint) -> void;
#foreign glPrioritizeTextures :: fn(n: GLsizei, textures: *const GLuint, priorities: *const GLclampf) -> void;
#foreign glAreTexturesResident :: fn(n: GLsizei, textures: *const GLuint, residences: *mut GLboolean) -> GLboolean;
#foreign glIsTexture :: fn(texture: GLuint) -> GLboolean;
#foreign glTexSubImage1D :: fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign glTexSubImage2D :: fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign glCopyTexImage1D :: fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> void;
#foreign glCopyTexImage2D :: fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> void;
#foreign glCopyTexSubImage1D :: fn(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> void;
#foreign glCopyTexSubImage2D :: fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
#foreign glMap1d :: fn(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *const GLdouble) -> void;
#foreign glMap1f :: fn(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *const GLfloat) -> void;
#foreign glMap2d :: fn(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *const GLdouble) -> void;
#foreign glMap2f :: fn(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *const GLfloat) -> void;
#foreign glGetMapdv :: fn(target: GLenum, query: GLenum, v: *mut GLdouble) -> void;
#foreign glGetMapfv :: fn(target: GLenum, query: GLenum, v: *mut GLfloat) -> void;
#foreign glGetMapiv :: fn(target: GLenum, query: GLenum, v: *mut GLint) -> void;
#foreign glEvalCoord1d :: fn(u: GLdouble) -> void;
#foreign glEvalCoord1f :: fn(u: GLfloat) -> void;
#foreign glEvalCoord1dv :: fn(u: *const GLdouble) -> void;
#foreign glEvalCoord1fv :: fn(u: *const GLfloat) -> void;
#foreign glEvalCoord2d :: fn(u: GLdouble, v: GLdouble) -> void;
#foreign glEvalCoord2f :: fn(u: GLfloat, v: GLfloat) -> void;
#foreign glEvalCoord2dv :: fn(u: *const GLdouble) -> void;
#foreign glEvalCoord2fv :: fn(u: *const GLfloat) -> void;
#foreign glMapGrid1d :: fn(un: GLint, u1: GLdouble, u2: GLdouble) -> void;
#foreign glMapGrid1f :: fn(un: GLint, u1: GLfloat, u2: GLfloat) -> void;
#foreign glMapGrid2d :: fn(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) -> void;
#foreign glMapGrid2f :: fn(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) -> void;
#foreign glEvalPoint1 :: fn(i: GLint) -> void;
#foreign glEvalPoint2 :: fn(i: GLint, j: GLint) -> void;
#foreign glEvalMesh1 :: fn(mode: GLenum, i1: GLint, i2: GLint) -> void;
#foreign glEvalMesh2 :: fn(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) -> void;
#foreign glFogf :: fn(pname: GLenum, param: GLfloat) -> void;
#foreign glFogi :: fn(pname: GLenum, param: GLint) -> void;
#foreign glFogfv :: fn(pname: GLenum, params: *const GLfloat) -> void;
#foreign glFogiv :: fn(pname: GLenum, params: *const GLint) -> void;
#foreign glFeedbackBuffer :: fn(size: GLsizei, type: GLenum, buffer: *mut GLfloat) -> void;
#foreign glPassThrough :: fn(token: GLfloat) -> void;
#foreign glSelectBuffer :: fn(size: GLsizei, buffer: *mut GLuint) -> void;
#foreign glInitNames :: fn() -> void;
#foreign glLoadName :: fn(name: GLuint) -> void;
#foreign glPushName :: fn(name: GLuint) -> void;
#foreign glPopName :: fn() -> void;
#foreign glDrawRangeElements :: fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *const GLvoid) -> void;
#foreign glTexImage3D :: fn(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign glTexSubImage3D :: fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *const GLvoid) -> void;
#foreign glCopyTexSubImage3D :: fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
alias PFNGLDRAWRANGEELEMENTSPROC :: fn*(GLenum, GLuint, GLuint, GLsizei, GLenum, *const GLvoid) -> void;
alias PFNGLTEXIMAGE3DPROC :: fn*(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *const GLvoid) -> void;
alias PFNGLTEXSUBIMAGE3DPROC :: fn*(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *const GLvoid) -> void;
alias PFNGLCOPYTEXSUBIMAGE3DPROC :: fn*(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> void;
#foreign glColorTable :: fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: *const GLvoid) -> void;
#foreign glColorSubTable :: fn(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type: GLenum, data: *const GLvoid) -> void;
#foreign glColorTableParameteriv :: fn(target: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign glColorTableParameterfv :: fn(target: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign glCopyColorSubTable :: fn(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> void;
#foreign glCopyColorTable :: fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> void;
#foreign glGetColorTable :: fn(target: GLenum, format: GLenum, type: GLenum, table: *mut GLvoid) -> void;
#foreign glGetColorTableParameterfv :: fn(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign glGetColorTableParameteriv :: fn(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign glBlendEquation :: fn(mode: GLenum) -> void;
#foreign glBlendColor :: fn(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) -> void;
#foreign glHistogram :: fn(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> void;
#foreign glResetHistogram :: fn(target: GLenum) -> void;
#foreign glGetHistogram :: fn(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: *mut GLvoid) -> void;
#foreign glGetHistogramParameterfv :: fn(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign glGetHistogramParameteriv :: fn(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign glMinmax :: fn(target: GLenum, internalformat: GLenum, sink: GLboolean) -> void;
#foreign glResetMinmax :: fn(target: GLenum) -> void;
#foreign glGetMinmax :: fn(target: GLenum, reset: GLboolean, format: GLenum, types: GLenum, values: *mut GLvoid) -> void;
#foreign glGetMinmaxParameterfv :: fn(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign glGetMinmaxParameteriv :: fn(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign glConvolutionFilter1D :: fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, image: *const GLvoid) -> void;
#foreign glConvolutionFilter2D :: fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, image: *const GLvoid) -> void;
#foreign glConvolutionParameterf :: fn(target: GLenum, pname: GLenum, params: GLfloat) -> void;
#foreign glConvolutionParameterfv :: fn(target: GLenum, pname: GLenum, params: *const GLfloat) -> void;
#foreign glConvolutionParameteri :: fn(target: GLenum, pname: GLenum, params: GLint) -> void;
#foreign glConvolutionParameteriv :: fn(target: GLenum, pname: GLenum, params: *const GLint) -> void;
#foreign glCopyConvolutionFilter1D :: fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> void;
#foreign glCopyConvolutionFilter2D :: fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void;
#foreign glGetConvolutionFilter :: fn(target: GLenum, format: GLenum, type: GLenum, image: *mut GLvoid) -> void;
#foreign glGetConvolutionParameterfv :: fn(target: GLenum, pname: GLenum, params: *mut GLfloat) -> void;
#foreign glGetConvolutionParameteriv :: fn(target: GLenum, pname: GLenum, params: *mut GLint) -> void;
#foreign glSeparableFilter2D :: fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, row: *const GLvoid, column: *const GLvoid) -> void;
#foreign glGetSeparableFilter :: fn(target: GLenum, format: GLenum, type: GLenum, row: *mut GLvoid, column: *mut GLvoid, span: *mut GLvoid) -> void;
#foreign glActiveTexture :: fn(texture: GLenum) -> void;
#foreign glClientActiveTexture :: fn(texture: GLenum) -> void;
#foreign glCompressedTexImage1D :: fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *const GLvoid) -> void;
#foreign glCompressedTexImage2D :: fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *const GLvoid) -> void;
#foreign glCompressedTexImage3D :: fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *const GLvoid) -> void;
#foreign glCompressedTexSubImage1D :: fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const GLvoid) -> void;
#foreign glCompressedTexSubImage2D :: fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const GLvoid) -> void;
#foreign glCompressedTexSubImage3D :: fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const GLvoid) -> void;
#foreign glGetCompressedTexImage :: fn(target: GLenum, lod: GLint, img: *mut GLvoid) -> void;
#foreign glMultiTexCoord1d :: fn(target: GLenum, s: GLdouble) -> void;
#foreign glMultiTexCoord1dv :: fn(target: GLenum, v: *const GLdouble) -> void;
#foreign glMultiTexCoord1f :: fn(target: GLenum, s: GLfloat) -> void;
#foreign glMultiTexCoord1fv :: fn(target: GLenum, v: *const GLfloat) -> void;
#foreign glMultiTexCoord1i :: fn(target: GLenum, s: GLint) -> void;
#foreign glMultiTexCoord1iv :: fn(target: GLenum, v: *const GLint) -> void;
#foreign glMultiTexCoord1s :: fn(target: GLenum, s: GLshort) -> void;
#foreign glMultiTexCoord1sv :: fn(target: GLenum, v: *const GLshort) -> void;
#foreign glMultiTexCoord2d :: fn(target: GLenum, s: GLdouble, t: GLdouble) -> void;
#foreign glMultiTexCoord2dv :: fn(target: GLenum, v: *const GLdouble) -> void;
#foreign glMultiTexCoord2f :: fn(target: GLenum, s: GLfloat, t: GLfloat) -> void;
#foreign glMultiTexCoord2fv :: fn(target: GLenum, v: *const GLfloat) -> void;
#foreign glMultiTexCoord2i :: fn(target: GLenum, s: GLint, t: GLint) -> void;
#foreign glMultiTexCoord2iv :: fn(target: GLenum, v: *const GLint) -> void;
#foreign glMultiTexCoord2s :: fn(target: GLenum, s: GLshort, t: GLshort) -> void;
#foreign glMultiTexCoord2sv :: fn(target: GLenum, v: *const GLshort) -> void;
#foreign glMultiTexCoord3d :: fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> void;
#foreign glMultiTexCoord3dv :: fn(target: GLenum, v: *const GLdouble) -> void;
#foreign glMultiTexCoord3f :: fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> void;
#foreign glMultiTexCoord3fv :: fn(target: GLenum, v: *const GLfloat) -> void;
#foreign glMultiTexCoord3i :: fn(target: GLenum, s: GLint, t: GLint, r: GLint) -> void;
#foreign glMultiTexCoord3iv :: fn(target: GLenum, v: *const GLint) -> void;
#foreign glMultiTexCoord3s :: fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> void;
#foreign glMultiTexCoord3sv :: fn(target: GLenum, v: *const GLshort) -> void;
#foreign glMultiTexCoord4d :: fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> void;
#foreign glMultiTexCoord4dv :: fn(target: GLenum, v: *const GLdouble) -> void;
#foreign glMultiTexCoord4f :: fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> void;
#foreign glMultiTexCoord4fv :: fn(target: GLenum, v: *const GLfloat) -> void;
#foreign glMultiTexCoord4i :: fn(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> void;
#foreign glMultiTexCoord4iv :: fn(target: GLenum, v: *const GLint) -> void;
#foreign glMultiTexCoord4s :: fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> void;
#foreign glMultiTexCoord4sv :: fn(target: GLenum, v: *const GLshort) -> void;
#foreign glLoadTransposeMatrixd :: fn(m: *const GLdouble) -> void;
#foreign glLoadTransposeMatrixf :: fn(m: *const GLfloat) -> void;
#foreign glMultTransposeMatrixd :: fn(m: *const GLdouble) -> void;
#foreign glMultTransposeMatrixf :: fn(m: *const GLfloat) -> void;
#foreign glSampleCoverage :: fn(value: GLclampf, invert: GLboolean) -> void;
alias PFNGLACTIVETEXTUREPROC :: fn*(GLenum) -> void;
alias PFNGLSAMPLECOVERAGEPROC :: fn*(GLclampf, GLboolean) -> void;
alias PFNGLCOMPRESSEDTEXIMAGE3DPROC :: fn*(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXIMAGE2DPROC :: fn*(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXIMAGE1DPROC :: fn*(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC :: fn*(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC :: fn*(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, *const GLvoid) -> void;
alias PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC :: fn*(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, *const GLvoid) -> void;
alias PFNGLGETCOMPRESSEDTEXIMAGEPROC :: fn*(GLenum, GLint, *mut GLvoid) -> void;
#foreign glActiveTextureARB :: fn(texture: GLenum) -> void;
#foreign glClientActiveTextureARB :: fn(texture: GLenum) -> void;
#foreign glMultiTexCoord1dARB :: fn(target: GLenum, s: GLdouble) -> void;
#foreign glMultiTexCoord1dvARB :: fn(target: GLenum, v: *const GLdouble) -> void;
#foreign glMultiTexCoord1fARB :: fn(target: GLenum, s: GLfloat) -> void;
#foreign glMultiTexCoord1fvARB :: fn(target: GLenum, v: *const GLfloat) -> void;
#foreign glMultiTexCoord1iARB :: fn(target: GLenum, s: GLint) -> void;
#foreign glMultiTexCoord1ivARB :: fn(target: GLenum, v: *const GLint) -> void;
#foreign glMultiTexCoord1sARB :: fn(target: GLenum, s: GLshort) -> void;
#foreign glMultiTexCoord1svARB :: fn(target: GLenum, v: *const GLshort) -> void;
#foreign glMultiTexCoord2dARB :: fn(target: GLenum, s: GLdouble, t: GLdouble) -> void;
#foreign glMultiTexCoord2dvARB :: fn(target: GLenum, v: *const GLdouble) -> void;
#foreign glMultiTexCoord2fARB :: fn(target: GLenum, s: GLfloat, t: GLfloat) -> void;
#foreign glMultiTexCoord2fvARB :: fn(target: GLenum, v: *const GLfloat) -> void;
#foreign glMultiTexCoord2iARB :: fn(target: GLenum, s: GLint, t: GLint) -> void;
#foreign glMultiTexCoord2ivARB :: fn(target: GLenum, v: *const GLint) -> void;
#foreign glMultiTexCoord2sARB :: fn(target: GLenum, s: GLshort, t: GLshort) -> void;
#foreign glMultiTexCoord2svARB :: fn(target: GLenum, v: *const GLshort) -> void;
#foreign glMultiTexCoord3dARB :: fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> void;
#foreign glMultiTexCoord3dvARB :: fn(target: GLenum, v: *const GLdouble) -> void;
#foreign glMultiTexCoord3fARB :: fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> void;
#foreign glMultiTexCoord3fvARB :: fn(target: GLenum, v: *const GLfloat) -> void;
#foreign glMultiTexCoord3iARB :: fn(target: GLenum, s: GLint, t: GLint, r: GLint) -> void;
#foreign glMultiTexCoord3ivARB :: fn(target: GLenum, v: *const GLint) -> void;
#foreign glMultiTexCoord3sARB :: fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> void;
#foreign glMultiTexCoord3svARB :: fn(target: GLenum, v: *const GLshort) -> void;
#foreign glMultiTexCoord4dARB :: fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> void;
#foreign glMultiTexCoord4dvARB :: fn(target: GLenum, v: *const GLdouble) -> void;
#foreign glMultiTexCoord4fARB :: fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> void;
#foreign glMultiTexCoord4fvARB :: fn(target: GLenum, v: *const GLfloat) -> void;
#foreign glMultiTexCoord4iARB :: fn(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> void;
#foreign glMultiTexCoord4ivARB :: fn(target: GLenum, v: *const GLint) -> void;
#foreign glMultiTexCoord4sARB :: fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> void;
#foreign glMultiTexCoord4svARB :: fn(target: GLenum, v: *const GLshort) -> void;

