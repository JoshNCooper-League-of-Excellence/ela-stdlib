/*
  * This isn't actually an implementation of the popular C++ library "GLM",
  * but we just call it that because it's "gl math"

  * very barebones, very cobbled together and missing a ton of crap.s
*/

import math::*;
#c_flags " -lm "

struct Vec4 {
  x: f32,
  y: f32,
  z: f32,
  w: f32,
}

impl Vec4 {
  fn sqr_mag(*mut self) -> f32 {
    return self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w;
  }
  fn one() -> Self {
    return .{ x: 1.0, y: 1.0, z: 1.0, w: 1.0 };
  }
  fn zero() -> Self {
    return .{ x: 0.0, y: 0.0, z: 0.0, w: 0.0 };
  }
}

struct Vec3 {
  x: f32,
  y: f32,
  z: f32,
}

impl Vec3 {
  fn up() -> Self {
    #static up: Self = .{
      x: 0, y: 1, z: 0
    };
    return up;
  }


  fn sqr_mag(*mut self) -> f32 {
    return self.x * self.x + self.y * self.y + self.z * self.z;
  }
  fn one() -> Self {
    return .{ x: 1.0, y: 1.0, z: 1.0 };
  }
  fn zero() -> Vec3 {
    return .{ x: 0.0, y: 0.0, z: 0.0 };
  }
  fn normalize(self) -> Self {
    mag: f32 = sqrt(self.x * self.x + self.y * self.y + self.z * self.z) as f32;
    return .{ x: self.x / mag, y: self.y / mag, z: self.z / mag };
  }
  fn cross(self, other: Vec3) -> Vec3 {
    return .{
      x: self.y * other.z - self.z * other.y,
      y: self.z * other.x - self.x * other.z,
      z: self.x * other.y - self.y * other.x,
    };
  }
  fn dot(self, other: Vec3) -> f32 {
    return self.x * other.x + self.y * other.y + self.z * other.z;
  }
}

impl Vec3 {
  fn add(self, other: Vec3) -> Vec3 {
    return .{
      x: self.x + other.x,
      y: self.y + other.y,
      z: self.z + other.z,
    };
  }
  fn sub(self, other: Vec3) -> Vec3 {
    return .{
      x: self.x - other.x,
      y: self.y - other.y,
      z: self.z - other.z,
    };
  }
  fn mul(self, scalar: f32) -> Vec3 {
    return .{
      x: self.x * scalar,
      y: self.y * scalar,
      z: self.z * scalar,
    };
  }
  fn div(self, scalar: f32) -> Vec3 {
    return .{
      x: self.x / scalar,
      y: self.y / scalar,
      z: self.z / scalar,
    };
  }
}

struct Vec2 {
  x: f32,
  y: f32,
}

impl Vec2 {
  fn sqr_mag(*mut self) -> f32 {
    return self.x * self.x + self.y * self.y;
  }
  fn one() -> Self {
    return .{ x: 1.0, y: 1.0 };
  }
  fn zero() -> Self {
    return .{ x: 0.0, y: 0.0 };
  }
  fn normalize(*mut self) -> Self {
    mag: f32 = sqrt(self.x * self.x + self.y * self.y) as f32;
    return .{ x: self.x / mag, y: self.y / mag };
  }
}

struct Mat4 {
  M00: f32,
  M01: f32,
  M02: f32,
  M03: f32,
  M10: f32,
  M11: f32,
  M12: f32,
  M13: f32,
  M20: f32,
  M21: f32,
  M22: f32,
  M23: f32,
  M30: f32,
  M31: f32,
  M32: f32,
  M33: f32,
}

impl Mat4 {
  fn zero() -> Self {
    return .{
      M00: 0.0, M01: 0.0, M02: 0.0, M03: 0.0,
      M10: 0.0, M11: 0.0, M12: 0.0, M13: 0.0,
      M20: 0.0, M21: 0.0, M22: 0.0, M23: 0.0,
      M30: 0.0, M31: 0.0, M32: 0.0, M33: 0.0
    };
  }

  fn scale(*mut self, factor: f32) -> Self {
    mut matrix: Self;
    matrix.M00 = self.M00 * factor;
    matrix.M01 = self.M01 * factor;
    matrix.M02 = self.M02 * factor;
    matrix.M03 = self.M03 * factor;
    matrix.M10 = self.M10 * factor;
    matrix.M11 = self.M11 * factor;
    matrix.M12 = self.M12 * factor;
    matrix.M13 = self.M13 * factor;
    matrix.M20 = self.M20 * factor;
    matrix.M21 = self.M21 * factor;
    matrix.M22 = self.M22 * factor;
    matrix.M23 = self.M23 * factor;
    matrix.M30 = self.M30 * factor;
    matrix.M31 = self.M31 * factor;
    matrix.M32 = self.M32 * factor;
    matrix.M33 = self.M33 * factor;
    return matrix;
  }

  fn normalize(*mut self) -> Self {
    mag: f32 = sqrt(self.M00 * self.M00 + self.M01 * self.M01 + self.M02 * self.M02 + self.M03 * self.M03 +
                   self.M10 * self.M10 + self.M11 * self.M11 + self.M12 * self.M12 + self.M13 * self.M13 +
                   self.M20 * self.M20 + self.M21 * self.M21 + self.M22 * self.M22 + self.M23 * self.M23 +
                   self.M30 * self.M30 + self.M31 * self.M31 + self.M32 * self.M32 + self.M33 * self.M33) as f32;
    return self.scale(1.0 / mag);
  }

  fn determinant(*mut self) -> f32 {
    r0: f32 = self.M00 * (self.M11 * (self.M22 * self.M33 - self.M23 * self.M32) - self.M12 * (self.M21 * self.M33 - self.M23 * self.M31) + self.M13 * (self.M21 * self.M32 - self.M22 * self.M31));
    r1: f32 = self.M01 * (self.M10 * (self.M22 * self.M33 - self.M23 * self.M32) - self.M12 * (self.M20 * self.M33 - self.M23 * self.M30) + self.M13 * (self.M20 * self.M32 - self.M22 * self.M30));
    r2: f32 = self.M02 * (self.M10 * (self.M21 * self.M33 - self.M23 * self.M31) - self.M11 * (self.M20 * self.M33 - self.M23 * self.M30) + self.M13 * (self.M20 * self.M31 - self.M21 * self.M30));
    r3: f32 = self.M03 * (self.M10 * (self.M21 * self.M32 - self.M22 * self.M31) - self.M11 * (self.M20 * self.M32 - self.M22 * self.M30) + self.M12 * (self.M20 * self.M31 - self.M21 * self.M30));
    return r0 - r1 + r2 - r3;
  }

  fn identity() -> Self {
    mut matrix: Self;
    matrix.M00 = 1.0;
    matrix.M01 = 0.0;
    matrix.M02 = 0.0;
    matrix.M03 = 0.0;
    matrix.M10 = 0.0;
    matrix.M11 = 1.0;
    matrix.M12 = 0.0;
    matrix.M13 = 0.0;
    matrix.M20 = 0.0;
    matrix.M21 = 0.0;
    matrix.M22 = 1.0;
    matrix.M23 = 0.0;
    matrix.M30 = 0.0;
    matrix.M31 = 0.0;
    matrix.M32 = 0.0;
    matrix.M33 = 1.0;
    return matrix;
  }

  fn look_at(eye: Vec3, center: Vec3, up: Vec3) -> Self {
    f: Vec3 = (center - eye).normalize();
    s: Vec3 = f.cross(up).normalize();
    u: Vec3 = s.cross(f);

    mut matrix: Self = Mat4::identity();
    matrix.M00 = s.x;
    matrix.M01 = s.y;
    matrix.M02 = s.z;
    matrix.M10 = u.x;
    matrix.M11 = u.y;
    matrix.M12 = u.z;
    matrix.M20 = -f.x;
    matrix.M21 = -f.y;
    matrix.M22 = -f.z;
    matrix.M30 = -s.dot(eye);
    matrix.M31 = -u.dot(eye);
    matrix.M32 = f.dot(eye);

    return matrix;
  }

  fn perspective(fov: f32, aspect: f32, near: f32, far: f32) -> Self {
    tan_half_fov: f32 = tan(fov / 2.0) as f32;

    mut matrix: Self = Mat4::zero();
    matrix.M00 = 1.0 / (aspect * tan_half_fov);
    matrix.M11 = 1.0 / tan_half_fov;
    matrix.M22 = -(far + near) / (far - near);
    matrix.M23 = -1.0;
    matrix.M32 = -(2.0 * far * near) / (far - near);
    matrix.M33 = 0.0;

    return matrix;
  }

  fn mul(self, other: Self) -> Self {
    mut matrix: Self;
    matrix.M00 = self.M00 * other.M00 + self.M01 * other.M10 + self.M02 * other.M20 + self.M03 * other.M30;
    matrix.M01 = self.M00 * other.M01 + self.M01 * other.M11 + self.M02 * other.M21 + self.M03 * other.M31;
    matrix.M02 = self.M00 * other.M02 + self.M01 * other.M12 + self.M02 * other.M22 + self.M03 * other.M32;
    matrix.M03 = self.M00 * other.M03 + self.M01 * other.M13 + self.M02 * other.M23 + self.M03 * other.M33;
    
    matrix.M10 = self.M10 * other.M00 + self.M11 * other.M10 + self.M12 * other.M20 + self.M13 * other.M30;
    matrix.M11 = self.M10 * other.M01 + self.M11 * other.M11 + self.M12 * other.M21 + self.M13 * other.M31;
    matrix.M12 = self.M10 * other.M02 + self.M11 * other.M12 + self.M12 * other.M22 + self.M13 * other.M32;
    matrix.M13 = self.M10 * other.M03 + self.M11 * other.M13 + self.M12 * other.M23 + self.M13 * other.M33;
    
    matrix.M20 = self.M20 * other.M00 + self.M21 * other.M10 + self.M22 * other.M20 + self.M23 * other.M30;
    matrix.M21 = self.M20 * other.M01 + self.M21 * other.M11 + self.M22 * other.M21 + self.M23 * other.M31;
    matrix.M22 = self.M20 * other.M02 + self.M21 * other.M12 + self.M22 * other.M22 + self.M23 * other.M32;
    matrix.M23 = self.M20 * other.M03 + self.M21 * other.M13 + self.M22 * other.M23 + self.M23 * other.M33;
    
    matrix.M30 = self.M30 * other.M00 + self.M31 * other.M10 + self.M32 * other.M20 + self.M33 * other.M30;
    matrix.M31 = self.M30 * other.M01 + self.M31 * other.M11 + self.M32 * other.M21 + self.M33 * other.M31;
    matrix.M32 = self.M30 * other.M02 + self.M31 * other.M12 + self.M32 * other.M22 + self.M33 * other.M32;
    matrix.M33 = self.M30 * other.M03 + self.M31 * other.M13 + self.M32 * other.M23 + self.M33 * other.M33;
    return matrix;
  }
  
  fn translation(translation: Vec3) -> Self {
    mut matrix: Self = Mat4::identity();
    matrix.M03 = translation.x;
    matrix.M13 = translation.y;
    matrix.M23 = translation.z;
    return matrix;
  }

  fn rotation(rotation: Vec3) -> Self {
    cx: f32 = cos(rotation.x) as f32;
    sx: f32 = sin(rotation.x) as f32;
    cy: f32 = cos(rotation.y) as f32;
    sy: f32 = sin(rotation.y) as f32;
    cz: f32 = cos(rotation.z) as f32;
    sz: f32 = sin(rotation.z) as f32;

    mut matrix: Self = Mat4::identity();
    matrix.M00 = cy * cz;
    matrix.M01 = -cy * sz;
    matrix.M02 = sy;

    matrix.M10 = sx * sy * cz + cx * sz;
    matrix.M11 = -sx * sy * sz + cx * cz;
    matrix.M12 = -sx * cy;

    matrix.M20 = -cx * sy * cz + sx * sz;
    matrix.M21 = cx * sy * sz + sx * cz;
    matrix.M22 = cx * cy;

    return matrix;
  }

  fn scalar(scale: Vec3) -> Self {
    mut matrix: Self = Mat4::identity();
    matrix.M00 = scale.x;
    matrix.M11 = scale.y;
    matrix.M22 = scale.z;
    return matrix;
  }

  fn get_translation(self) -> Vec3 {
    return .{ x: self.M03, y: self.M13, z: self.M23 };
  }

  fn get_scale(self) -> Vec3 {
    return .{
      x: sqrt(self.M00 * self.M00 + self.M01 * self.M01 + self.M02 * self.M02) as f32,
      y: sqrt(self.M10 * self.M10 + self.M11 * self.M11 + self.M12 * self.M12) as f32,
      z: sqrt(self.M20 * self.M20 + self.M21 * self.M21 + self.M22 * self.M22) as f32,
    };
  }

  fn get_rotation(self) -> Vec3 {
    scale := self.get_scale();
    return .{
      x: atan2(self.M21 / scale.z, self.M22 / scale.z) as f32,
      y: atan2(-self.M20 / scale.z, sqrt(self.M21 * self.M21 + self.M22 * self.M22) / scale.z) as f32,
      z: atan2(self.M10 / scale.y, self.M00 / scale.x) as f32,
    };
  }

}