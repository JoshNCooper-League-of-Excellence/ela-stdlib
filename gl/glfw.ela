#c_flags " -lglfw "

type GLFWglproc :: fn() -> void;
type GLFWvkproc :: fn() -> void;
struct GLFWmonitor {
};
struct GLFWwindow {
};
struct GLFWcursor {
};
type GLFWallocatefun :: fn(u64, *mut void) -> *mut void;
type GLFWreallocatefun :: fn(*mut void, u64, *mut void) -> *mut void;
type GLFWdeallocatefun :: fn(*mut void, *mut void) -> void;
type GLFWerrorfun :: fn(s32, *const u8) -> void;
type GLFWwindowposfun :: fn(*mut GLFWwindow, s32, s32) -> void;
type GLFWwindowsizefun :: fn(*mut GLFWwindow, s32, s32) -> void;
type GLFWwindowclosefun :: fn(*mut GLFWwindow) -> void;
type GLFWwindowrefreshfun :: fn(*mut GLFWwindow) -> void;
type GLFWwindowfocusfun :: fn(*mut GLFWwindow, s32) -> void;
type GLFWwindowiconifyfun :: fn(*mut GLFWwindow, s32) -> void;
type GLFWwindowmaximizefun :: fn(*mut GLFWwindow, s32) -> void;
type GLFWframebuffersizefun :: fn(*mut GLFWwindow, s32, s32) -> void;
type GLFWwindowcontentscalefun :: fn(*mut GLFWwindow, f32, f32) -> void;
type GLFWmousebuttonfun :: fn(*mut GLFWwindow, s32, s32, s32) -> void;
type GLFWcursorposfun :: fn(*mut GLFWwindow, f64, f64) -> void;
type GLFWcursorenterfun :: fn(*mut GLFWwindow, s32) -> void;
type GLFWscrollfun :: fn(*mut GLFWwindow, f64, f64) -> void;
type GLFWkeyfun :: fn(*mut GLFWwindow, s32, s32, s32, s32) -> void;
type GLFWcharfun :: fn(*mut GLFWwindow, u32) -> void;
type GLFWcharmodsfun :: fn(*mut GLFWwindow, u32, s32) -> void;
type GLFWdropfun :: fn(*mut GLFWwindow, s32, *const *const u8) -> void;
type GLFWmonitorfun :: fn(*mut GLFWmonitor, s32) -> void;
type GLFWjoystickfun :: fn(s32, s32) -> void;
struct GLFWvidmode {
  width: s32,
  height: s32,
  redBits: s32,
  greenBits: s32,
  blueBits: s32,
  refreshRate: s32,
};
struct GLFWgammaramp {
  red: *mut u16,
  green: *mut u16,
  blue: *mut u16,
  size: u32,
};
struct GLFWimage {
  width: s32,
  height: s32,
  pixels: *mut u8,
};
struct GLFWgamepadstate {
  buttons: [15; u8],
  axes: [6; f32],
};
struct GLFWallocator {
  allocate: GLFWallocatefun,
  reallocate: GLFWreallocatefun,
  deallocate: GLFWdeallocatefun,
  user: *mut void,
};
extern fn glfwInit() -> s32;
extern fn glfwTerminate() -> void;
extern fn glfwInitHint(hint: s32, value: s32) -> void;
extern fn glfwInitAllocator(allocator: *const GLFWallocator) -> void;
extern fn glfwGetVersion(major: *mut s32, minor: *mut s32, rev: *mut s32) -> void;
extern fn glfwGetVersionString() -> *const u8;
extern fn glfwGetError(description: *mut *const u8) -> s32;
extern fn glfwSetErrorCallback(callback: GLFWerrorfun) -> GLFWerrorfun;
extern fn glfwGetPlatform() -> s32;
extern fn glfwPlatformSupported(platform: s32) -> s32;
extern fn glfwGetMonitors(count: *mut s32) -> *mut *mut GLFWmonitor;
extern fn glfwGetPrimaryMonitor() -> *mut GLFWmonitor;
extern fn glfwGetMonitorPos(monitor: *mut GLFWmonitor, xpos: *mut s32, ypos: *mut s32) -> void;
extern fn glfwGetMonitorWorkarea(monitor: *mut GLFWmonitor, xpos: *mut s32, ypos: *mut s32, width: *mut s32, height: *mut s32) -> void;
extern fn glfwGetMonitorPhysicalSize(monitor: *mut GLFWmonitor, widthMM: *mut s32, heightMM: *mut s32) -> void;
extern fn glfwGetMonitorContentScale(monitor: *mut GLFWmonitor, xscale: *mut f32, yscale: *mut f32) -> void;
extern fn glfwGetMonitorName(monitor: *mut GLFWmonitor) -> *const u8;
extern fn glfwSetMonitorUserPointer(monitor: *mut GLFWmonitor, pointer: *mut void) -> void;
extern fn glfwGetMonitorUserPointer(monitor: *mut GLFWmonitor) -> *mut void;
extern fn glfwSetMonitorCallback(callback: GLFWmonitorfun) -> GLFWmonitorfun;
extern fn glfwGetVideoModes(monitor: *mut GLFWmonitor, count: *mut s32) -> *const GLFWvidmode;
extern fn glfwGetVideoMode(monitor: *mut GLFWmonitor) -> *const GLFWvidmode;
extern fn glfwSetGamma(monitor: *mut GLFWmonitor, gamma: f32) -> void;
extern fn glfwGetGammaRamp(monitor: *mut GLFWmonitor) -> *const GLFWgammaramp;
extern fn glfwSetGammaRamp(monitor: *mut GLFWmonitor, ramp: *const GLFWgammaramp) -> void;
extern fn glfwDefaultWindowHints() -> void;
extern fn glfwWindowHint(hint: s32, value: s32) -> void;
extern fn glfwWindowHintString(hint: s32, value: *const u8) -> void;
extern fn glfwCreateWindow(width: s32, height: s32, title: *const u8, monitor: *mut GLFWmonitor, share: *mut GLFWwindow) -> *mut GLFWwindow;
extern fn glfwDestroyWindow(window: *mut GLFWwindow) -> void;
extern fn glfwWindowShouldClose(window: *mut GLFWwindow) -> s32;
extern fn glfwSetWindowShouldClose(window: *mut GLFWwindow, value: s32) -> void;
extern fn glfwGetWindowTitle(window: *mut GLFWwindow) -> *const u8;
extern fn glfwSetWindowTitle(window: *mut GLFWwindow, title: *const u8) -> void;
extern fn glfwSetWindowIcon(window: *mut GLFWwindow, count: s32, images: *const GLFWimage) -> void;
extern fn glfwGetWindowPos(window: *mut GLFWwindow, xpos: *mut s32, ypos: *mut s32) -> void;
extern fn glfwSetWindowPos(window: *mut GLFWwindow, xpos: s32, ypos: s32) -> void;
extern fn glfwGetWindowSize(window: *mut GLFWwindow, width: *mut s32, height: *mut s32) -> void;
extern fn glfwSetWindowSizeLimits(window: *mut GLFWwindow, minwidth: s32, minheight: s32, maxwidth: s32, maxheight: s32) -> void;
extern fn glfwSetWindowAspectRatio(window: *mut GLFWwindow, numer: s32, denom: s32) -> void;
extern fn glfwSetWindowSize(window: *mut GLFWwindow, width: s32, height: s32) -> void;
extern fn glfwGetFramebufferSize(window: *mut GLFWwindow, width: *mut s32, height: *mut s32) -> void;
extern fn glfwGetWindowFrameSize(window: *mut GLFWwindow, left: *mut s32, top: *mut s32, right: *mut s32, bottom: *mut s32) -> void;
extern fn glfwGetWindowContentScale(window: *mut GLFWwindow, xscale: *mut f32, yscale: *mut f32) -> void;
extern fn glfwGetWindowOpacity(window: *mut GLFWwindow) -> f32;
extern fn glfwSetWindowOpacity(window: *mut GLFWwindow, opacity: f32) -> void;
extern fn glfwIconifyWindow(window: *mut GLFWwindow) -> void;
extern fn glfwRestoreWindow(window: *mut GLFWwindow) -> void;
extern fn glfwMaximizeWindow(window: *mut GLFWwindow) -> void;
extern fn glfwShowWindow(window: *mut GLFWwindow) -> void;
extern fn glfwHideWindow(window: *mut GLFWwindow) -> void;
extern fn glfwFocusWindow(window: *mut GLFWwindow) -> void;
extern fn glfwRequestWindowAttention(window: *mut GLFWwindow) -> void;
extern fn glfwGetWindowMonitor(window: *mut GLFWwindow) -> *mut GLFWmonitor;
extern fn glfwSetWindowMonitor(window: *mut GLFWwindow, monitor: *mut GLFWmonitor, xpos: s32, ypos: s32, width: s32, height: s32, refreshRate: s32) -> void;
extern fn glfwGetWindowAttrib(window: *mut GLFWwindow, attrib: s32) -> s32;
extern fn glfwSetWindowAttrib(window: *mut GLFWwindow, attrib: s32, value: s32) -> void;
extern fn glfwSetWindowUserPointer(window: *mut GLFWwindow, pointer: *mut void) -> void;
extern fn glfwGetWindowUserPointer(window: *mut GLFWwindow) -> *mut void;
extern fn glfwSetWindowPosCallback(window: *mut GLFWwindow, callback: GLFWwindowposfun) -> GLFWwindowposfun;
extern fn glfwSetWindowSizeCallback(window: *mut GLFWwindow, callback: GLFWwindowsizefun) -> GLFWwindowsizefun;
extern fn glfwSetWindowCloseCallback(window: *mut GLFWwindow, callback: GLFWwindowclosefun) -> GLFWwindowclosefun;
extern fn glfwSetWindowRefreshCallback(window: *mut GLFWwindow, callback: GLFWwindowrefreshfun) -> GLFWwindowrefreshfun;
extern fn glfwSetWindowFocusCallback(window: *mut GLFWwindow, callback: GLFWwindowfocusfun) -> GLFWwindowfocusfun;
extern fn glfwSetWindowIconifyCallback(window: *mut GLFWwindow, callback: GLFWwindowiconifyfun) -> GLFWwindowiconifyfun;
extern fn glfwSetWindowMaximizeCallback(window: *mut GLFWwindow, callback: GLFWwindowmaximizefun) -> GLFWwindowmaximizefun;
extern fn glfwSetFramebufferSizeCallback(window: *mut GLFWwindow, callback: GLFWframebuffersizefun) -> GLFWframebuffersizefun;
extern fn glfwSetWindowContentScaleCallback(window: *mut GLFWwindow, callback: GLFWwindowcontentscalefun) -> GLFWwindowcontentscalefun;
extern fn glfwPollEvents() -> void;
extern fn glfwWaitEvents() -> void;
extern fn glfwWaitEventsTimeout(timeout: f64) -> void;
extern fn glfwPostEmptyEvent() -> void;
extern fn glfwGetInputMode(window: *mut GLFWwindow, mode: s32) -> s32;
extern fn glfwSetInputMode(window: *mut GLFWwindow, mode: s32, value: s32) -> void;
extern fn glfwRawMouseMotionSupported() -> s32;
extern fn glfwGetKeyName(key: s32, scancode: s32) -> *const u8;
extern fn glfwGetKeyScancode(key: s32) -> s32;
extern fn glfwGetKey(window: *mut GLFWwindow, key: s32) -> s32;
extern fn glfwGetMouseButton(window: *mut GLFWwindow, button: s32) -> s32;
extern fn glfwGetCursorPos(window: *mut GLFWwindow, xpos: *mut f64, ypos: *mut f64) -> void;
extern fn glfwSetCursorPos(window: *mut GLFWwindow, xpos: f64, ypos: f64) -> void;
extern fn glfwCreateCursor(image: *const GLFWimage, xhot: s32, yhot: s32) -> *mut GLFWcursor;
extern fn glfwCreateStandardCursor(shape: s32) -> *mut GLFWcursor;
extern fn glfwDestroyCursor(cursor: *mut GLFWcursor) -> void;
extern fn glfwSetCursor(window: *mut GLFWwindow, cursor: *mut GLFWcursor) -> void;
extern fn glfwSetKeyCallback(window: *mut GLFWwindow, callback: GLFWkeyfun) -> GLFWkeyfun;
extern fn glfwSetCharCallback(window: *mut GLFWwindow, callback: GLFWcharfun) -> GLFWcharfun;
extern fn glfwSetCharModsCallback(window: *mut GLFWwindow, callback: GLFWcharmodsfun) -> GLFWcharmodsfun;
extern fn glfwSetMouseButtonCallback(window: *mut GLFWwindow, callback: GLFWmousebuttonfun) -> GLFWmousebuttonfun;
extern fn glfwSetCursorPosCallback(window: *mut GLFWwindow, callback: GLFWcursorposfun) -> GLFWcursorposfun;
extern fn glfwSetCursorEnterCallback(window: *mut GLFWwindow, callback: GLFWcursorenterfun) -> GLFWcursorenterfun;
extern fn glfwSetScrollCallback(window: *mut GLFWwindow, callback: GLFWscrollfun) -> GLFWscrollfun;
extern fn glfwSetDropCallback(window: *mut GLFWwindow, callback: GLFWdropfun) -> GLFWdropfun;
extern fn glfwJoystickPresent(jid: s32) -> s32;
extern fn glfwGetJoystickAxes(jid: s32, count: *mut s32) -> *const f32;
extern fn glfwGetJoystickButtons(jid: s32, count: *mut s32) -> *const u8;
extern fn glfwGetJoystickHats(jid: s32, count: *mut s32) -> *const u8;
extern fn glfwGetJoystickName(jid: s32) -> *const u8;
extern fn glfwGetJoystickGUID(jid: s32) -> *const u8;
extern fn glfwSetJoystickUserPointer(jid: s32, pointer: *mut void) -> void;
extern fn glfwGetJoystickUserPointer(jid: s32) -> *mut void;
extern fn glfwJoystickIsGamepad(jid: s32) -> s32;
extern fn glfwSetJoystickCallback(callback: GLFWjoystickfun) -> GLFWjoystickfun;
extern fn glfwUpdateGamepadMappings(string: *const u8) -> s32;
extern fn glfwGetGamepadName(jid: s32) -> *const u8;
extern fn glfwGetGamepadState(jid: s32, state: *mut GLFWgamepadstate) -> s32;
extern fn glfwSetClipboardString(window: *mut GLFWwindow, string: *const u8) -> void;
extern fn glfwGetClipboardString(window: *mut GLFWwindow) -> *const u8;
extern fn glfwGetTime() -> f64;
extern fn glfwSetTime(time: f64) -> void;
extern fn glfwGetTimerValue() -> u64;
extern fn glfwGetTimerFrequency() -> u64;
extern fn glfwMakeContextCurrent(window: *mut GLFWwindow) -> void;
extern fn glfwGetCurrentContext() -> *mut GLFWwindow;
extern fn glfwSwapBuffers(window: *mut GLFWwindow) -> void;
extern fn glfwSwapInterval(interval: s32) -> void;
extern fn glfwExtensionSupported(extension: *const u8) -> s32;
extern fn glfwGetProcAddress(procname: *const u8) -> GLFWglproc;
extern fn glfwVulkanSupported() -> s32;
extern fn glfwGetRequiredInstanceExtensions(count: *mut u32) -> *mut *const u8;


enum GLFW {
  KEY_UNKNOWN = -1,
  KEY_SPACE = 32,
  KEY_APOSTROPHE = 39,
  KEY_COMMA = 44,
  KEY_MINUS = 45,
  KEY_PERIOD = 46,
  KEY_SLASH = 47,
  KEY_0 = 48,
  KEY_1 = 49,
  KEY_2 = 50,
  KEY_3 = 51,
  KEY_4 = 52,
  KEY_5 = 53,
  KEY_6 = 54,
  KEY_7 = 55,
  KEY_8 = 56,
  KEY_9 = 57,
  KEY_SEMICOLON = 59,
  KEY_EQUAL = 61,
  KEY_A = 65,
  KEY_B = 66,
  KEY_C = 67,
  KEY_D = 68,
  KEY_E = 69,
  KEY_F = 70,
  KEY_G = 71,
  KEY_H = 72,
  KEY_I = 73,
  KEY_J = 74,
  KEY_K = 75,
  KEY_L = 76,
  KEY_M = 77,
  KEY_N = 78,
  KEY_O = 79,
  KEY_P = 80,
  KEY_Q = 81,
  KEY_R = 82,
  KEY_S = 83,
  KEY_T = 84,
  KEY_U = 85,
  KEY_V = 86,
  KEY_W = 87,
  KEY_X = 88,
  KEY_Y = 89,
  KEY_Z = 90,
  KEY_LEFT_BRACKET = 91,
  KEY_BACKSLASH = 92,
  KEY_RIGHT_BRACKET = 93,
  KEY_GRAVE_ACCENT = 96,
  KEY_WORLD_1 = 161,
  KEY_WORLD_2 = 162,
  KEY_ESCAPE = 256,
  KEY_ENTER = 257,
  KEY_TAB = 258,
  KEY_BACKSPACE = 259,
  KEY_INSERT = 260,
  KEY_DELETE = 261,
  KEY_RIGHT = 262,
  KEY_LEFT = 263,
  KEY_DOWN = 264,
  KEY_UP = 265,
  KEY_PAGE_UP = 266,
  KEY_PAGE_DOWN = 267,
  KEY_HOME = 268,
  KEY_END = 269,
  KEY_CAPS_LOCK = 280,
  KEY_SCROLL_LOCK = 281,
  KEY_NUM_LOCK = 282,
  KEY_PRINT_SCREEN = 283,
  KEY_PAUSE = 284,
  KEY_F1 = 290,
  KEY_F2 = 291,
  KEY_F3 = 292,
  KEY_F4 = 293,
  KEY_F5 = 294,
  KEY_F6 = 295,
  KEY_F7 = 296,
  KEY_F8 = 297,
  KEY_F9 = 298,
  KEY_F10 = 299,
  KEY_F11 = 300,
  KEY_F12 = 301,
  KEY_F13 = 302,
  KEY_F14 = 303,
  KEY_F15 = 304,
  KEY_F16 = 305,
  KEY_F17 = 306,
  KEY_F18 = 307,
  KEY_F19 = 308,
  KEY_F20 = 309,
  KEY_F21 = 310,
  KEY_F22 = 311,
  KEY_F23 = 312,
  KEY_F24 = 313,
  KEY_F25 = 314,
  KEY_KP_0 = 320,
  KEY_KP_1 = 321,
  KEY_KP_2 = 322,
  KEY_KP_3 = 323,
  KEY_KP_4 = 324,
  KEY_KP_5 = 325,
  KEY_KP_6 = 326,
  KEY_KP_7 = 327,
  KEY_KP_8 = 328,
  KEY_KP_9 = 329,
  KEY_KP_DECIMAL = 330,
  KEY_KP_DIVIDE = 331,
  KEY_KP_MULTIPLY = 332,
  KEY_KP_SUBTRACT = 333,
  KEY_KP_ADD = 334,
  KEY_KP_ENTER = 335,
  KEY_KP_EQUAL = 336,
  KEY_LEFT_SHIFT = 340,
  KEY_LEFT_CONTROL = 341,
  KEY_LEFT_ALT = 342,
  KEY_LEFT_SUPER = 343,
  KEY_RIGHT_SHIFT = 344,
  KEY_RIGHT_CONTROL = 345,
  KEY_RIGHT_ALT = 346,
  KEY_RIGHT_SUPER = 347,
  KEY_MENU = 348,

  MOD_SHIFT = 0x0001,
  MOD_CONTROL = 0x0002,
  MOD_ALT = 0x0004,
  MOD_SUPER = 0x0008,
  MOD_CAPS_LOCK = 0x0010,
  MOD_NUM_LOCK = 0x0020

  PRESS = 1,
  RELEASE = 0,
  REPEAT = 2
}