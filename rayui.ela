import raylib::*;
import fmt::*;

// * used for UI styling.
Style :: struct {
  foreground:           Color,
  background:           Color,
  highlighted:          Color,

  line_thickness:       f32,
  font_size:            s32,
  font_color_override:  Option!<Color>,
  font:                 Font,

  // TODO: probably don't do this here?
  // It's just kind of a silly thing, we don't need to support that for everything.
  // we should have some more extensible settings so you can achieve whatever you want rather simply.
  use_jiggly_text:      bool,
  jiggle_intensity:     f32,
  jiggle_rate:          f32,
}

impl Style {
  default :: fn() -> Style {
    return .{
      foreground: WHITE,
      background: BLACK,
      highlighted: ORANGE,
      font_color_override: Some(GRAY),
      font_size: 16,
      line_thickness: 2,
      font: GetFontDefault(),
    };
  }
}

// * Measure the width of a jiggly text of 'text' and 'style'
@[inline]
measure_jiggly_text :: fn!<Data>(text: Data, style: Style) -> f32 where Data: AsByteSlice {
  slice := text.as_byte_slice();
  if slice.length == 0 then return 0.0;
  mut total_width: f32 = 0.0;
  for i in 0 as u64..slice.length {
    total_width += style.font_size;
  }
  return total_width;
}

// * Draw wavy jiggly text.
@[inline]
jiggly_text :: fn!<Data>(text: Data, rect: Rectangle, style: Style) where Data: AsByteSlice {
  text := Data.as_byte_slice();
  time: f32 = GetTime() as f32;
  intensity := style.jiggle_intensity;
  rate := style.jiggle_rate;
  for i in 0..text.length {
    pos_x := rect.x + (i * style.font_size) as f32;
    pos_y := rect.y + intensity * sin(rate * time + (i as f32));
    temp : u8[2] = .[
      text.data[i],
      '\0' as u8
    ];
    DrawText(temp, pos_x as s32, pos_y as s32, style.font_size, style.foreground);
  }
}

// * Draw a button with that returns true for clicked, false for not clicked.
@[inline]
button :: fn!<Data>(text: Data, rect: Rectangle, style: Style) -> bool where Data: AsByteSlice {
  text_bytes := text.as_byte_slice();

  mut position: Vector2 = .{
    x: rect.x,
    y: rect.y
  };

  mut size: Vector2 = .{
    x: rect.width,
    y: rect.height
  };

  mut text_width : f32;

  if style.use_jiggly_text {
    text_width = measure_jiggly_text(text, style);
  } else {
    text_width = MeasureText(text_bytes.data, style.font_size);
  }

  text_height : f32 = style.font_size;
  if text_width > rect.width {
    size.x = text_width;
    position.x = rect.x - (text_width - rect.width) / 2;
  }

  new_rect : Rectangle = .{
    x: position.x,
    y: position.y,
    width: size.x,
    height: size.y
  };

  text_x : f32 = position.x + (size.x - text_width) / 2;
  text_y : f32 = position.y + (size.y - text_height) / 2;
  mouse_over := CheckCollisionPointRec(GetMousePosition(), new_rect);

  if mouse_over {
    DrawRectangleV(position, size, style.highlighted);
    if (IsMouseButtonPressed(MouseButton::MOUSE_BUTTON_LEFT)) then return true;
  } else {
    DrawRectangleV(position, size, style.background);
  }

  if !style.use_jiggly_text {
    DrawText(text_bytes.data, text_x as s32, text_y as s32, style.font_size, style.foreground);
  } else {
    rect : Rectangle = .{
      x: text_x,
      y: text_y,
      width: new_rect.width,
      height: new_rect.height
    };
    jiggly_text(text, rect, style);
  }

  return false;
}

// * Draw a button with a click callback.
// * T* in the callback is a pointer to some of your state data, if you want to mutate it.
// * use 'button' if you don't want the callback system, or pass 'null, null' as the last two arguments.
@[inline]
button_pro :: fn!<Data, T>(text: Data, rect: Rectangle, style: Style, callback: fn* (*mut T), user_data : *mut T) where Data: AsByteSlice {
  if button(text, rect, style) {
    callback(user_data);
  }
}

SliderState :: struct!<T> {
  held : bool,
  min_value: T,
  max_value: T,
  value: *mut T,
}

/*
  draws a draggable slider, and adjusts a value of type $T.

  TODO: add vertical sliders.
*/
@[inline]
slider :: fn!<T>(
  text: Option!<String>,
  rectangle: Rectangle,
  style: Style,
  state: *mut SliderState!<T>,
  format_options: Option!<FormatOptions>,
) where T: IsNumeric {
  { // * Draw the slider.
    DrawRectangleV(
      Vector2.{ x: rectangle.x, y: rectangle.y},
      Vector2.{ x: rectangle.width, y: rectangle.height},
      style.background,
    );

    v_f := (*state.value) as f32;
    min_f := state.min_value as f32;
    max_f := state.max_value as f32;

    slider_width: f32 = rectangle.width *
                        clamp(abs(v_f - min_f) / abs(max_f - min_f), 0.0, 1.0);

    slider_rect: Rectangle = .{
      x: rectangle.x,
      y: rectangle.y,
      width: slider_width,
      height: rectangle.height
    };

    DrawRectangleRec(slider_rect, style.foreground);

    DrawRectangleLinesEx(
      rectangle,
      style.line_thickness,
      style.foreground
    );

    mut font_color: Color = style.font_color_override.or_else(style.foreground);

    mut text_x: s32;
    mut text_y: s32;
    if text.is_some() {
      the_text := text.unwrap();
      text_x = (rectangle.x - 15 + (rectangle.width - MeasureText(the_text.data, style.font_size)) / 2) as s32;
      text_y = (rectangle.y + (rectangle.height - style.font_size) / 2) as s32;
      DrawText(
        the_text.data,
        text_x,
        text_y,
        style.font_size,
        font_color
      );
    }

    mut options: FormatOptions;

    if format_options.is_some() {
      options = format_options.unwrap();
    } else {
      options = *FormatOptions::current();
    }

    mut value_text := format("%", (*state.value,), options);
    defer value_text.deinit();

    // 10 pixels padding
    value_text_x: s32 = (text_x + 30 + MeasureText(value_text.data, style.font_size)) as s32;

    DrawText(
      value_text.data,
      value_text_x,
      text_y,
      style.font_size,
      font_color
    );
  }

  { // * Update the slider.
    mut increment: T;
    if IsKeyDown(KeyboardKey::KEY_LEFT_SHIFT) {
      increment = (state.max_value - state.min_value) / 100;
    } else {
      increment = (state.max_value - state.min_value) / 50;
    }

    if IsKeyPressed(KeyboardKey::KEY_RIGHT) {
      *state.value = clamp(*state.value + increment, min(state.min_value, state.max_value), max(state.min_value, state.max_value));
    } else if IsKeyPressed(KeyboardKey::KEY_LEFT) {
      *state.value = clamp(*state.value - increment, min(state.min_value, state.max_value), max(state.min_value, state.max_value));
    }

    // Handle mouse input
    mouse_pos := GetMousePosition();

    if CheckCollisionPointRec(mouse_pos, rectangle) {
      if IsMouseButtonDown(MouseButton::MOUSE_BUTTON_LEFT) {
        state.held = true;
      }
    }

    if state.held {
      if !IsMouseButtonDown(MouseButton::MOUSE_BUTTON_LEFT) {
        state.held = false;
      } else {
        new_value := state.min_value + ((mouse_pos.x - rectangle.x) / rectangle.width) * (state.max_value - state.min_value);
        *state.value = clamp(new_value, min(state.min_value, state.max_value), max(state.min_value, state.max_value));
      }
    }
  }
}

/* 
  Draws a check button, one that is stateful-- it stores whether it's 'on' or 'off'. a toggle button.

  NOTE: 
    the 'allow_hold' parameter has significant effect on the behaviour of the button.

    if it is false:
      clicking once will toggle the button on (LMB).
      clicking it again, will toggle it off   (LMB).
      holding the button has no effect.
    
    if it is true:
      clicking the button will toggle the button on (LMB).
      mousing over the button while (LMB) is held down will toggle it on.
      clicking the button again, will toggle the button off (RMB)
      mousing over the button while (RMB) is held down will toggle it off.

    It's very likely you'd never utilize the 'allow_hold: true' behaviour, unless you're creating some grid of buttons,
    where  you want to quickly enable large ranges of them, or disable them alike. (such as the 'sequencer' project).

    perhaps we should remove this, but this is where this widget came from, and it was neccesary there.
*/
@[inline]
check_button :: fn(
  text: Option!<String>,
  rectangle: Rectangle,
  style: Style,             
  allow_hold: bool,
  value: *mut bool,         // whether the button is toggled or not.
) {
  if *value {
    DrawRectangleRec(
      rectangle,
      style.highlighted
    );
  } else {
    DrawRectangleRec(rectangle, style.background);
  }

  if text.is_some() {
    font_color := style.font_color_override.or_else(style.foreground);
    the_text := text.unwrap();
    text_x := (rectangle.x + (rectangle.width - MeasureText(the_text.data, style.font_size)) / 2) as s32;
    text_y := (rectangle.y + (rectangle.height - style.font_size) / 2) as s32;
    DrawText(the_text.data, text_x, text_y, style.font_size, font_color);
  }

  hit := CheckCollisionPointRec(GetMousePosition(), rectangle);

  if hit {
    DrawRectangleLinesEx(
      rectangle, 
      style.line_thickness, 
      ORANGE
    );
  }

  mut left := false;
  mut right := false;

  if allow_hold {
    left = IsMouseButtonDown(MouseButton::MOUSE_BUTTON_LEFT);
    right = IsMouseButtonDown(MouseButton::MOUSE_BUTTON_RIGHT);
    if hit && left {
      *value = true;
    } else if hit && right {
      *value = false;
    }
  } else if hit && IsMouseButtonPressed(MouseButton::MOUSE_BUTTON_LEFT) {
    *value = !*value;
  }
}

DropDownState :: struct!<OptionsType> where OptionsType: AsByteSlice {
  
  selected_index:     Option!<u32>, // Some(index) when one is selected, None when none are selected.
  is_open:            bool,
}

/* 
  'prefer_selected_option' 
    will prefer presenting the string value of the selected option when one is selected, over the label.
*/
@[inline]
drop_down :: fn!<OptionsType, UserArg>(
  text:                   Option!<String>,
  rectangle:              Rectangle,
  style:                  Style,
  prefer_selected_option: bool,
  state:                  *mut DropDownState!<OptionsType>,
  options:                List!<OptionsType>,
  on_option_selected:     fn * (OptionsType, *mut UserArg) -> void,
  user_arg:               *mut UserArg,
) {
  // Draw the DropDown box
  DrawRectangleRec(
    rectangle, style.background);

  // Draw the selected option, instead of the label text.
  if state.selected_index.is_some() && (text.is_none() || prefer_selected_option) {
    index := state.selected_index.unwrap();
    text_data := options[index].as_byte_slice();

    text_x := (rectangle.x + (rectangle.width - MeasureText(text_data.data, style.font_size)) / 2) as s32;
    text_y := (rectangle.y + (rectangle.height - style.font_size) / 2) as s32;

    DrawText(
      text_data.data, 
      text_x, 
      text_y, 
      style.font_size, 
      style.font_color_override.or_else(style.foreground),
    );
  } else if text.is_some() {
    label := text.unwrap();
    text_x := (rectangle.x + (rectangle.width - MeasureText(label.data, style.font_size)) / 2) as s32;
    text_y := (rectangle.y + (rectangle.height - style.font_size) / 2) as s32;
    DrawText(
      label.data, 
      text_x, 
      text_y, 
      style.font_size, 
      style.font_color_override.or_else(style.foreground),
    );
  }

  hit := CheckCollisionPointRec(GetMousePosition(), rectangle);

  if hit && IsMouseButtonPressed(MouseButton::MOUSE_BUTTON_LEFT) {
    state.is_open = !state.is_open;
  }

  mut hit_option := false;
  if state.is_open {

    // copy for mutating.
    mut option_rect: Rectangle = rectangle;
    option_rect.y += rectangle.height;

    for i in 0..options.length {

      mut option_color := style.background;
      hit := CheckCollisionPointRec(GetMousePosition(), option_rect);
      if hit {
        option_color = style.highlighted;
        hit_option = true;
      }

      DrawRectangleRec(option_rect, option_color);

      text := options[i].as_byte_slice();
      text_x := (option_rect.x + (option_rect.width - MeasureText(text.data, style.font_size)) / 2) as s32;
      text_y := (option_rect.y + (option_rect.height - style.font_size) / 2) as s32;

      DrawText(
        text.data, 
        text_x , 
        text_y, 
        style.font_size, 
        style.font_color_override.or_else(style.foreground),
      );

      if hit && IsMouseButtonPressed(MouseButton::MOUSE_BUTTON_LEFT) {
        state.selected_index = Some(i as u32);
        state.is_open = false;
        if on_option_selected {
          on_option_selected(options[i], user_arg);
        }
      }

      option_rect.y += option_rect.height;
    }
  }

  if !hit && !hit_option {
    state.is_open = false;
  }
}
